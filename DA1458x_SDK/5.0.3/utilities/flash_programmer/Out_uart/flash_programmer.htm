<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Out_uart\flash_programmer.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Out_uart\flash_programmer.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060061: Last Updated: Sat Aug 27 12:00:08 2016
<BR><P>
<H3>Maximum Stack Usage =        128 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; spi_flash_write_data &rArr; spi_flash_page_program &rArr; spi_flash_set_write_enable &rArr; spi_flash_wait_till_ready &rArr; spi_flash_read_status_reg &rArr; spi_transaction &rArr; spi_cs_low
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
 <LI><a href="#[5]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">SysTick_Handler</a><BR>
 <LI><a href="#[16]">ADC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">ADC_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[16]">ADC_Handler</a> from startup_cmsdk_cm0.o(.text) referenced from startup_cmsdk_cm0.o(RESET)
 <LI><a href="#[11]">BLE_CRYPT_Handler</a> from startup_cmsdk_cm0.o(.text) referenced from startup_cmsdk_cm0.o(RESET)
 <LI><a href="#[9]">BLE_CSCNT_Handler</a> from startup_cmsdk_cm0.o(.text) referenced from startup_cmsdk_cm0.o(RESET)
 <LI><a href="#[b]">BLE_ERROR_Handler</a> from startup_cmsdk_cm0.o(.text) referenced from startup_cmsdk_cm0.o(RESET)
 <LI><a href="#[d]">BLE_EVENT_Handler</a> from startup_cmsdk_cm0.o(.text) referenced from startup_cmsdk_cm0.o(RESET)
 <LI><a href="#[7]">BLE_FINETGTIM_Handler</a> from startup_cmsdk_cm0.o(.text) referenced from startup_cmsdk_cm0.o(RESET)
 <LI><a href="#[8]">BLE_GROSSTGTIM_Handler</a> from startup_cmsdk_cm0.o(.text) referenced from startup_cmsdk_cm0.o(RESET)
 <LI><a href="#[10]">BLE_RADIOCNTL_Handler</a> from startup_cmsdk_cm0.o(.text) referenced from startup_cmsdk_cm0.o(RESET)
 <LI><a href="#[c]">BLE_RX_Handler</a> from startup_cmsdk_cm0.o(.text) referenced from startup_cmsdk_cm0.o(RESET)
 <LI><a href="#[a]">BLE_SLP_Handler</a> from startup_cmsdk_cm0.o(.text) referenced from startup_cmsdk_cm0.o(RESET)
 <LI><a href="#[6]">BLE_WAKEUP_LP_Handler</a> from startup_cmsdk_cm0.o(.text) referenced from startup_cmsdk_cm0.o(RESET)
 <LI><a href="#[19]">GPIO0_Handler</a> from gpio.o(.text) referenced from startup_cmsdk_cm0.o(RESET)
 <LI><a href="#[1a]">GPIO1_Handler</a> from gpio.o(.text) referenced from startup_cmsdk_cm0.o(RESET)
 <LI><a href="#[1b]">GPIO2_Handler</a> from gpio.o(.text) referenced from startup_cmsdk_cm0.o(RESET)
 <LI><a href="#[1c]">GPIO3_Handler</a> from gpio.o(.text) referenced from startup_cmsdk_cm0.o(RESET)
 <LI><a href="#[1d]">GPIO4_Handler</a> from gpio.o(.text) referenced from startup_cmsdk_cm0.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_cmsdk_cm0.o(.text) referenced from startup_cmsdk_cm0.o(RESET)
 <LI><a href="#[14]">I2C_Handler</a> from startup_cmsdk_cm0.o(.text) referenced from startup_cmsdk_cm0.o(RESET)
 <LI><a href="#[17]">KEYBRD_Handler</a> from startup_cmsdk_cm0.o(.text) referenced from startup_cmsdk_cm0.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_cmsdk_cm0.o(.text) referenced from startup_cmsdk_cm0.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from startup_cmsdk_cm0.o(.text) referenced from startup_cmsdk_cm0.o(RESET)
 <LI><a href="#[18]">RFCAL_Handler</a> from startup_cmsdk_cm0.o(.text) referenced from startup_cmsdk_cm0.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_cmsdk_cm0.o(.text) referenced from startup_cmsdk_cm0.o(RESET)
 <LI><a href="#[15]">SPI_Handler</a> from startup_cmsdk_cm0.o(.text) referenced from startup_cmsdk_cm0.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from startup_cmsdk_cm0.o(.text) referenced from startup_cmsdk_cm0.o(RESET)
 <LI><a href="#[e]">SWTIM_Handler</a> from startup_cmsdk_cm0.o(.text) referenced from startup_cmsdk_cm0.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from startup_cmsdk_cm0.o(.text) referenced from startup_cmsdk_cm0.o(RESET)
 <LI><a href="#[1f]">SystemInit</a> from system_cmsdk.o(.text) referenced from startup_cmsdk_cm0.o(.text)
 <LI><a href="#[13]">UART2_Handler</a> from startup_cmsdk_cm0.o(.text) referenced from startup_cmsdk_cm0.o(RESET)
 <LI><a href="#[12]">UART_Handler</a> from startup_cmsdk_cm0.o(.text) referenced from startup_cmsdk_cm0.o(RESET)
 <LI><a href="#[f]">WUPCT_Handler</a> from startup_cmsdk_cm0.o(.text) referenced from startup_cmsdk_cm0.o(RESET)
 <LI><a href="#[20]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_cmsdk_cm0.o(.text)
 <LI><a href="#[1e]">main</a> from programmer.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[20]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm0.o(.text)
</UL>
<P><STRONG><a name="[8c]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[21]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[8b]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[8d]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[8e]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[8f]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[90]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[91]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_cmsdk_cm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm0.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cmsdk_cm0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm0.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cmsdk_cm0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm0.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cmsdk_cm0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm0.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cmsdk_cm0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm0.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_cmsdk_cm0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm0.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>ADC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm0.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>BLE_CRYPT_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm0.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>BLE_CSCNT_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm0.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>BLE_ERROR_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm0.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>BLE_EVENT_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm0.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>BLE_FINETGTIM_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm0.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>BLE_GROSSTGTIM_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm0.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>BLE_RADIOCNTL_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm0.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>BLE_RX_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm0.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>BLE_SLP_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm0.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>BLE_WAKEUP_LP_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm0.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>I2C_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm0.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>KEYBRD_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm0.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>RFCAL_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm0.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>SPI_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm0.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>SWTIM_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm0.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>UART2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm0.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>UART_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm0.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>WUPCT_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_cmsdk_cm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm0.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SystemInit</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, system_cmsdk.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm0.o(.text)
</UL>
<P><STRONG><a name="[92]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_cmsdk.o(.text), UNUSED)

<P><STRONG><a name="[23]"></a>init_i2c_pads</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, peripherals.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = init_i2c_pads
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_init
</UL>

<P><STRONG><a name="[25]"></a>init_spi_pads</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, peripherals.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = init_spi_pads
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_init
</UL>

<P><STRONG><a name="[26]"></a>init_uart_pads</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, peripherals.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = init_uart_pads
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_init
</UL>

<P><STRONG><a name="[27]"></a>periph_init</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, peripherals.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = periph_init &rArr; init_uart_pads
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uart_pads
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_spi_pads
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_i2c_pads
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[28]"></a>set_pad_uart</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, peripherals.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = set_pad_uart &rArr; GPIO_ConfigurePin &rArr; GPIO_SetPinFunction
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ConfigurePin
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_pads
</UL>

<P><STRONG><a name="[2d]"></a>update_uart_pads</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, peripherals.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_pads
</UL>

<P><STRONG><a name="[2a]"></a>set_pad_spi</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, peripherals.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = set_pad_spi &rArr; GPIO_ConfigurePin &rArr; GPIO_SetPinFunction
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ConfigurePin
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2b]"></a>set_pad_eeprom</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, peripherals.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = set_pad_eeprom &rArr; GPIO_ConfigurePin &rArr; GPIO_SetPinFunction
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ConfigurePin
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[74]"></a>crc32</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, crc32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_packet
</UL>

<P><STRONG><a name="[86]"></a>otpc_clock_enable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, otpc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[87]"></a>otpc_clock_disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, otpc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[88]"></a>otpc_write_fifo</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, otpc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = otpc_write_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[93]"></a>uart_irq_enable</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[94]"></a>uart_irq_disable</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[95]"></a>uart_send</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[96]"></a>uart_recv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[30]"></a>uart_wait_end_of_tx</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putc
</UL>

<P><STRONG><a name="[32]"></a>uart_wait_end_of_rx</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_getc
</UL>

<P><STRONG><a name="[97]"></a>uart_rx_poll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[2c]"></a>uart_pads</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = uart_pads &rArr; set_pad_uart &rArr; GPIO_ConfigurePin &rArr; GPIO_SetPinFunction
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_uart_pads
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pad_uart
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;response_id_action_result
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;response_write_action_result
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;response_action_error
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;response_read_action_result
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;response_erase_action_result
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;response_action
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[2e]"></a>uart_init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = uart_init &rArr; uart_pads &rArr; set_pad_uart &rArr; GPIO_ConfigurePin &rArr; GPIO_SetPinFunction
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_pads
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2f]"></a>uart_putc</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_wait_end_of_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_str
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_uint16
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_byte
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_print
</UL>

<P><STRONG><a name="[31]"></a>uart_getc</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = uart_getc
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_wait_end_of_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_packet
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_uint16
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_byte
</UL>

<P><STRONG><a name="[33]"></a>uart_print</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = uart_print
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putc
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_print_hex
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_print_char_hex
</UL>

<P><STRONG><a name="[34]"></a>uart_print_char_hex</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_print
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_print_int
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_print_hex
</UL>

<P><STRONG><a name="[35]"></a>uart_print_hex</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_print_char_hex
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_print
</UL>

<P><STRONG><a name="[36]"></a>uart_print_int</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_print_char_hex
</UL>

<P><STRONG><a name="[85]"></a>i2c_eeprom_init</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, i2c_eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = i2c_eeprom_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[98]"></a>i2c_eeprom_release</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, i2c_eeprom.o(.text), UNUSED)

<P><STRONG><a name="[38]"></a>i2c_wait_until_eeprom_ready</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, i2c_eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = i2c_wait_until_eeprom_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_eeprom_write_page
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_eeprom_write_byte
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_eeprom_read_data
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_eeprom_read_byte
</UL>

<P><STRONG><a name="[39]"></a>i2c_send_address</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, i2c_eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = i2c_send_address
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_eeprom_write_page
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_eeprom_write_byte
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_eeprom_read_byte
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_data_single
</UL>

<P><STRONG><a name="[37]"></a>i2c_eeprom_read_byte</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, i2c_eeprom.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_address
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_wait_until_eeprom_ready
</UL>

<P><STRONG><a name="[3b]"></a>i2c_eeprom_read_data</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, i2c_eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = i2c_eeprom_read_data &rArr; read_data_single &rArr; i2c_send_address
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_wait_until_eeprom_ready
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_data_single
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3c]"></a>i2c_eeprom_write_byte</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, i2c_eeprom.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_address
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_wait_until_eeprom_ready
</UL>

<P><STRONG><a name="[3d]"></a>i2c_eeprom_write_page</STRONG> (Thumb, 110 bytes, Stack size 20 bytes, i2c_eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = i2c_eeprom_write_page &rArr; i2c_wait_until_eeprom_ready
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_address
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_wait_until_eeprom_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_eeprom_write_data
</UL>

<P><STRONG><a name="[3e]"></a>i2c_eeprom_write_data</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, i2c_eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = i2c_eeprom_write_data &rArr; i2c_eeprom_write_page &rArr; i2c_wait_until_eeprom_ready
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_eeprom_write_page
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7d]"></a>spi_flash_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, spi_flash.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_peripheral_init
</UL>

<P><STRONG><a name="[3f]"></a>spi_flash_read_status_reg</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, spi_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = spi_flash_read_status_reg &rArr; spi_transaction &rArr; spi_cs_low
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_transaction
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_bitmode
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_configure_memory_protection
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_set_write_disable
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_write_enable_volatile
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_set_write_enable
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_wait_till_ready
</UL>

<P><STRONG><a name="[42]"></a>spi_flash_wait_till_ready</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, spi_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = spi_flash_wait_till_ready &rArr; spi_flash_read_status_reg &rArr; spi_transaction &rArr; spi_cs_low
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_read_status_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_page_fill
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_power_down
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_flash_unique_id
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_flash_memory_man_and_dev_id
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_chip_erase
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_block_erase
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_page_program
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_read_data
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_write_status_reg
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_set_write_disable
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_write_enable_volatile
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_set_write_enable
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_flash_jedec_id
</UL>

<P><STRONG><a name="[43]"></a>spi_read_flash_jedec_id</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, spi_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = spi_read_flash_jedec_id &rArr; spi_flash_wait_till_ready &rArr; spi_flash_read_status_reg &rArr; spi_transaction &rArr; spi_cs_low
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_bitmode
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_cs_low
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_cs_high
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_access
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_wait_till_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_auto_detect
</UL>

<P><STRONG><a name="[47]"></a>spi_flash_auto_detect</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, spi_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = spi_flash_auto_detect &rArr; spi_read_flash_jedec_id &rArr; spi_flash_wait_till_ready &rArr; spi_flash_read_status_reg &rArr; spi_transaction &rArr; spi_cs_low
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_flash_jedec_id
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_peripheral_init
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_enable
</UL>

<P><STRONG><a name="[48]"></a>spi_flash_set_write_enable</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, spi_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = spi_flash_set_write_enable &rArr; spi_flash_wait_till_ready &rArr; spi_flash_read_status_reg &rArr; spi_transaction &rArr; spi_cs_low
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_transaction
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_bitmode
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_wait_till_ready
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_read_status_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_page_fill
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_configure_memory_protection
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_chip_erase
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_block_erase
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_page_program
</UL>

<P><STRONG><a name="[49]"></a>spi_flash_write_enable_volatile</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, spi_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_transaction
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_bitmode
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_wait_till_ready
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_read_status_reg
</UL>

<P><STRONG><a name="[4a]"></a>spi_flash_set_write_disable</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, spi_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_transaction
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_bitmode
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_wait_till_ready
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_read_status_reg
</UL>

<P><STRONG><a name="[4b]"></a>spi_flash_write_status_reg</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, spi_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_transaction
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_bitmode
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_wait_till_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_configure_memory_protection
</UL>

<P><STRONG><a name="[4c]"></a>spi_flash_read_data</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, spi_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = spi_flash_read_data &rArr; spi_flash_wait_till_ready &rArr; spi_flash_read_status_reg &rArr; spi_transaction &rArr; spi_cs_low
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_bitmode
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_cs_low
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_cs_high
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_access
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_wait_till_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4d]"></a>spi_flash_page_program</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, spi_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = spi_flash_page_program &rArr; spi_flash_set_write_enable &rArr; spi_flash_wait_till_ready &rArr; spi_flash_read_status_reg &rArr; spi_transaction &rArr; spi_cs_low
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_bitmode
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_cs_low
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_cs_high
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_access
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_set_write_enable
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_wait_till_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_write_data
</UL>

<P><STRONG><a name="[4e]"></a>spi_flash_block_erase</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, spi_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = spi_flash_block_erase &rArr; spi_flash_set_write_enable &rArr; spi_flash_wait_till_ready &rArr; spi_flash_read_status_reg &rArr; spi_transaction &rArr; spi_cs_low
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_transaction
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_bitmode
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_set_write_enable
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_wait_till_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_flash_sectors
</UL>

<P><STRONG><a name="[4f]"></a>spi_flash_chip_erase</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, spi_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = spi_flash_chip_erase &rArr; spi_flash_set_write_enable &rArr; spi_flash_wait_till_ready &rArr; spi_flash_read_status_reg &rArr; spi_transaction &rArr; spi_cs_low
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_transaction
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_bitmode
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_set_write_enable
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_wait_till_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_chip_erase_forced
</UL>

<P><STRONG><a name="[50]"></a>spi_read_flash_memory_man_and_dev_id</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, spi_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_bitmode
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_cs_low
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_cs_high
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_access
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_wait_till_ready
</UL>

<P><STRONG><a name="[51]"></a>spi_read_flash_unique_id</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, spi_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_bitmode
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_cs_low
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_cs_high
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_access
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_wait_till_ready
</UL>

<P><STRONG><a name="[52]"></a>spi_flash_write_data</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, spi_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = spi_flash_write_data &rArr; spi_flash_page_program &rArr; spi_flash_set_write_enable &rArr; spi_flash_wait_till_ready &rArr; spi_flash_read_status_reg &rArr; spi_transaction &rArr; spi_cs_low
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_bitmode
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_page_program
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[54]"></a>spi_flash_power_down</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, spi_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_transaction
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_bitmode
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_wait_till_ready
</UL>

<P><STRONG><a name="[55]"></a>spi_flash_release_from_power_down</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, spi_flash.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = spi_flash_release_from_power_down &rArr; spi_transaction &rArr; spi_cs_low
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_transaction
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_bitmode
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_peripheral_init
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_enable
</UL>

<P><STRONG><a name="[56]"></a>spi_flash_configure_memory_protection</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, spi_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_write_status_reg
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_set_write_enable
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_read_status_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_chip_erase_forced
</UL>

<P><STRONG><a name="[57]"></a>spi_flash_chip_erase_forced</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, spi_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_configure_memory_protection
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_chip_erase
</UL>

<P><STRONG><a name="[58]"></a>spi_flash_page_fill</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, spi_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_bitmode
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_cs_low
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_cs_high
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_access
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_set_write_enable
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_wait_till_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_fill
</UL>

<P><STRONG><a name="[59]"></a>spi_flash_fill</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, spi_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_bitmode
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_page_fill
</UL>

<P><STRONG><a name="[5a]"></a>spi_flash_enable</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, spi_flash.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_release_from_power_down
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_auto_detect
</UL>

<P><STRONG><a name="[44]"></a>spi_cs_low</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi_cs_low
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetInactive
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_transaction
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_page_fill
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_flash_unique_id
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_flash_memory_man_and_dev_id
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_page_program
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_read_data
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_flash_jedec_id
</UL>

<P><STRONG><a name="[46]"></a>spi_cs_high</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi_cs_high
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetActive
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_transaction
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_page_fill
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_flash_unique_id
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_flash_memory_man_and_dev_id
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_page_program
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_read_data
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_flash_jedec_id
</UL>

<P><STRONG><a name="[5b]"></a>spi_init</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = spi_init &rArr; spi_cs_high
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_cs_high
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_peripheral_init
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_enable
</UL>

<P><STRONG><a name="[40]"></a>spi_set_bitmode</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_fill
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_page_fill
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_release_from_power_down
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_power_down
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_write_data
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_flash_unique_id
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_flash_memory_man_and_dev_id
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_chip_erase
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_block_erase
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_page_program
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_read_data
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_write_status_reg
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_set_write_disable
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_write_enable_volatile
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_set_write_enable
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_flash_jedec_id
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_read_status_reg
</UL>

<P><STRONG><a name="[5e]"></a>spi_release</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetActive
</UL>

<P><STRONG><a name="[99]"></a>spi_disable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[45]"></a>spi_access</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi_access
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_transaction
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_page_fill
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_flash_unique_id
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_flash_memory_man_and_dev_id
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_page_program
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_read_data
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_flash_jedec_id
</UL>

<P><STRONG><a name="[41]"></a>spi_transaction</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spi_transaction &rArr; spi_cs_low
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_cs_low
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_cs_high
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_access
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_release_from_power_down
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_power_down
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_chip_erase
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_block_erase
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_write_status_reg
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_set_write_disable
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_write_enable_volatile
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_set_write_enable
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_read_status_reg
</UL>

<P><STRONG><a name="[9a]"></a>GPIO_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[5f]"></a>GPIO_SetPinFunction</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_SetPinFunction
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ConfigurePin
</UL>

<P><STRONG><a name="[5c]"></a>GPIO_SetInactive</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_cs_low
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ConfigurePin
</UL>

<P><STRONG><a name="[5d]"></a>GPIO_SetActive</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_release
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_cs_high
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ConfigurePin
</UL>

<P><STRONG><a name="[29]"></a>GPIO_ConfigurePin</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_ConfigurePin &rArr; GPIO_SetPinFunction
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPinFunction
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetInactive
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetActive
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pad_eeprom
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pad_spi
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pad_uart
</UL>

<P><STRONG><a name="[9b]"></a>GPIO_ConfigurePinPower</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[9c]"></a>GPIO_GetPinStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[60]"></a>GPIO_EnableIRQ</STRONG> (Thumb, 224 bytes, Stack size 48 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioshift16
</UL>

<P><STRONG><a name="[9d]"></a>GPIO_GetIRQInputLevel</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>GPIO_SetIRQInputLevel</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioshift16
</UL>

<P><STRONG><a name="[63]"></a>GPIO_ResetIRQ</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_ResetIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpioshift16
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOn_Handler
</UL>

<P><STRONG><a name="[9e]"></a>GPIO_RegisterCallback</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>GPIOn_Handler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIOn_Handler &rArr; GPIO_ResetIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO4_Handler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO3_Handler
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO2_Handler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO1_Handler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO0_Handler
</UL>

<P><STRONG><a name="[19]"></a>GPIO0_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO0_Handler &rArr; GPIOn_Handler &rArr; GPIO_ResetIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOn_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm0.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>GPIO1_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO1_Handler &rArr; GPIOn_Handler &rArr; GPIO_ResetIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOn_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm0.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>GPIO2_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO2_Handler &rArr; GPIOn_Handler &rArr; GPIO_ResetIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOn_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm0.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>GPIO3_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO3_Handler &rArr; GPIOn_Handler &rArr; GPIO_ResetIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOn_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm0.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>GPIO4_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO4_Handler &rArr; GPIOn_Handler &rArr; GPIO_ResetIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOn_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_cmsdk_cm0.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>communication_error</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, programmer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;communication_error
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;communication_error
</UL>

<P><STRONG><a name="[9f]"></a>put_uint8</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, programmer.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>put_uint16</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, programmer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_uint32
</UL>

<P><STRONG><a name="[66]"></a>put_uint32</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, programmer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = put_uint32
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_uint16
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;response_id_action_result
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;response_write_action_result
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;response_action_error
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;response_erase_action_result
</UL>

<P><STRONG><a name="[68]"></a>send_byte</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, programmer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putc
</UL>

<P><STRONG><a name="[69]"></a>send_uint16</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, programmer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = send_uint16
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putc
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_uint32
</UL>

<P><STRONG><a name="[6a]"></a>send_str</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, programmer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putc
</UL>

<P><STRONG><a name="[6b]"></a>send_uint32</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, programmer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = send_uint32 &rArr; send_uint16
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_uint16
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
</UL>

<P><STRONG><a name="[6c]"></a>receive_byte</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, programmer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_getc
</UL>

<P><STRONG><a name="[6d]"></a>receive_uint16</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, programmer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = receive_uint16 &rArr; uart_getc
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_getc
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_packet
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_uint32
</UL>

<P><STRONG><a name="[6e]"></a>receive_uint32</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, programmer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = receive_uint32 &rArr; receive_uint16 &rArr; uart_getc
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_uint16
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_packet
</UL>

<P><STRONG><a name="[70]"></a>get_uint16</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, programmer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_size
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uint32
</UL>

<P><STRONG><a name="[6f]"></a>get_uint32</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, programmer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_uint32
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uint16
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_address
</UL>

<P><STRONG><a name="[72]"></a>get_uint16_rev</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, programmer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uint32_rev
</UL>

<P><STRONG><a name="[71]"></a>get_uint32_rev</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, programmer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = get_uint32_rev
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uint16_rev
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[73]"></a>receive_packet</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, programmer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = receive_packet &rArr; receive_uint32 &rArr; receive_uint16 &rArr; uart_getc
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_uint32
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_uint16
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_getc
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_data
</UL>

<P><STRONG><a name="[75]"></a>send_packet</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, programmer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = send_packet &rArr; send_uint32 &rArr; send_uint16
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_uint32
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_uint16
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putc
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;response_id_action_result
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;response_write_action_result
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;response_action_error
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;response_read_action_result
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;response_erase_action_result
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;response_action
</UL>

<P><STRONG><a name="[76]"></a>response_action</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, programmer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = response_action &rArr; uart_pads &rArr; set_pad_uart &rArr; GPIO_ConfigurePin &rArr; GPIO_SetPinFunction
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_pads
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[77]"></a>response_erase_action_result</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, programmer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = response_erase_action_result &rArr; uart_pads &rArr; set_pad_uart &rArr; GPIO_ConfigurePin &rArr; GPIO_SetPinFunction
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_uint32
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_pads
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[78]"></a>response_read_action_result</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, programmer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = response_read_action_result &rArr; uart_pads &rArr; set_pad_uart &rArr; GPIO_ConfigurePin &rArr; GPIO_SetPinFunction
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_pads
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[79]"></a>response_action_error</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, programmer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = response_action_error &rArr; uart_pads &rArr; set_pad_uart &rArr; GPIO_ConfigurePin &rArr; GPIO_SetPinFunction
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_uint32
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_pads
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7a]"></a>response_write_action_result</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, programmer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = response_write_action_result &rArr; uart_pads &rArr; set_pad_uart &rArr; GPIO_ConfigurePin &rArr; GPIO_SetPinFunction
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_uint32
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_pads
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7b]"></a>response_id_action_result</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, programmer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = response_id_action_result &rArr; uart_pads &rArr; set_pad_uart &rArr; GPIO_ConfigurePin &rArr; GPIO_SetPinFunction
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_uint32
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_pads
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a0]"></a>get_write_position</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, programmer.o(.text), UNUSED)

<P><STRONG><a name="[83]"></a>get_read_position</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, programmer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7f]"></a>read_data</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, programmer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = read_data &rArr; receive_packet &rArr; receive_uint32 &rArr; receive_uint16 &rArr; uart_getc
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a1]"></a>get_action</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, programmer.o(.text), UNUSED)

<P><STRONG><a name="[80]"></a>get_address</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, programmer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_address &rArr; get_uint32
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uint32
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[81]"></a>get_size</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, programmer.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uint16
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[82]"></a>erase_flash_region</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, programmer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_flash_sectors
</UL>

<P><STRONG><a name="[1e]"></a>main</STRONG> (Thumb, 1224 bytes, Stack size 16 bytes, programmer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = main &rArr; spi_flash_write_data &rArr; spi_flash_page_program &rArr; spi_flash_set_write_enable &rArr; spi_flash_wait_till_ready &rArr; spi_flash_read_status_reg &rArr; spi_transaction &rArr; spi_cs_low
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_size
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_address
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_data
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_read_position
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;response_id_action_result
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;response_write_action_result
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;response_action_error
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;response_read_action_result
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;response_erase_action_result
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;response_action
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_packet
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uint32_rev
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_flash_sectors
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_peripheral_init
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_write_data
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_chip_erase
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_read_data
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_read_flash_jedec_id
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_eeprom_write_data
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_eeprom_read_data
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_eeprom_init
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_print
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otpc_write_fifo
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otpc_clock_disable
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;otpc_clock_enable
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ConfigurePin
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pad_eeprom
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pad_spi
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_pad_uart
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;periph_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[a2]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[53]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_fill
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_write_data
</UL>

<P><STRONG><a name="[84]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a3]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[a4]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[89]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[a5]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[a6]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[24]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uart_pads
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_spi_pads
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_i2c_pads
</UL>

<P><STRONG><a name="[a7]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[a8]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[8a]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[22]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[a9]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[3a]"></a>read_data_single</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, i2c_eeprom.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = read_data_single &rArr; i2c_send_address
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_send_address
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_eeprom_read_data
</UL>

<P><STRONG><a name="[61]"></a>gpioshift16</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetIRQ
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetIRQInputLevel
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EnableIRQ
</UL>

<P><STRONG><a name="[7c]"></a>spi_flash_peripheral_init</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, programmer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = spi_flash_peripheral_init &rArr; spi_flash_auto_detect &rArr; spi_read_flash_jedec_id &rArr; spi_flash_wait_till_ready &rArr; spi_flash_read_status_reg &rArr; spi_transaction &rArr; spi_cs_low
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_release_from_power_down
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_auto_detect
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7e]"></a>erase_flash_sectors</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, programmer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = erase_flash_sectors &rArr; spi_flash_block_erase &rArr; spi_flash_set_write_enable &rArr; spi_flash_wait_till_ready &rArr; spi_flash_read_status_reg &rArr; spi_transaction &rArr; spi_cs_low
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_flash_block_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_flash_region
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>

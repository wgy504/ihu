<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [PrjIapStm32F2x\PrjIapStm32F2x.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image PrjIapStm32F2x\PrjIapStm32F2x.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060061: Last Updated: Fri Jul 14 01:33:27 2017
<BR><P>
<H3>Maximum Stack Usage =       2184 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
fsm_canvela_l2frame_rcv_handler &rArr; func_canitfleo_l2frame_msg_sw_package_confirm_received_handle &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[47]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[47]">ADC_IRQHandler</a><BR>
 <LI><a href="#[2f]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2f]">BusFault_Handler</a><BR>
 <LI><a href="#[2d]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2d]">HardFault_Handler</a><BR>
 <LI><a href="#[2e]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2e]">MemManage_Handler</a><BR>
 <LI><a href="#[92]">StartDefaultTask</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[92]">StartDefaultTask</a><BR>
 <LI><a href="#[93]">StartTask02</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[93]">StartTask02</a><BR>
 <LI><a href="#[30]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[30]">UsageFault_Handler</a><BR>
 <LI><a href="#[ac]">Error_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[ac]">Error_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[47]">ADC_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[2f]">BusFault_Handler</a> from stm32f2xx_it.o(i.BusFault_Handler) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[49]">CAN1_RX0_IRQHandler</a> from stm32f2xx_it.o(i.CAN1_RX0_IRQHandler) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[4a]">CAN1_RX1_IRQHandler</a> from stm32f2xx_it.o(i.CAN1_RX1_IRQHandler) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[4b]">CAN1_SCE_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[48]">CAN1_TX_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[75]">CAN2_RX0_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[76]">CAN2_RX1_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[77]">CAN2_SCE_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[74]">CAN2_TX_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[91]">Callback01</a> from freertos.o(i.Callback01) referenced from freertos.o(.constdata)
 <LI><a href="#[83]">DCMI_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[40]">DMA1_Stream0_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[41]">DMA1_Stream1_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[42]">DMA1_Stream2_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[43]">DMA1_Stream3_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[44]">DMA1_Stream4_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[45]">DMA1_Stream5_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[46]">DMA1_Stream6_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[64]">DMA1_Stream7_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[6d]">DMA2_Stream0_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[6e]">DMA2_Stream1_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[6f]">DMA2_Stream2_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[70]">DMA2_Stream3_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[71]">DMA2_Stream4_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[79]">DMA2_Stream5_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[7a]">DMA2_Stream6_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[7b]">DMA2_Stream7_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[32]">DebugMon_Handler</a> from stm32f2xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[72]">ETH_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[73]">ETH_WKUP_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[3b]">EXTI0_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[5d]">EXTI15_10_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[3c]">EXTI1_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[3d]">EXTI2_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[3e]">EXTI3_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[3f]">EXTI4_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[4c]">EXTI9_5_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[39]">FLASH_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[65]">FSMC_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[8d]">FsmProcessingLaunch</a> from vmfreeoslayer.o(i.FsmProcessingLaunch) referenced from vmfreeoslayer.o(i.ihu_task_create_and_run)
 <LI><a href="#[84]">HASH_RNG_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[2d]">HardFault_Handler</a> from stm32f2xx_it.o(i.HardFault_Handler) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[55]">I2C1_ER_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[54]">I2C1_EV_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[57]">I2C2_ER_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[56]">I2C2_EV_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[7e]">I2C3_ER_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[7d]">I2C3_EV_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[2e]">MemManage_Handler</a> from stm32f2xx_it.o(i.MemManage_Handler) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[2c]">NMI_Handler</a> from stm32f2xx_it.o(i.NMI_Handler) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[78]">OTG_FS_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[5f]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[80]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[7f]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[82]">OTG_HS_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[81]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[36]">PVD_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[33]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[3a]">RCC_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[5e]">RTC_Alarm_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[38]">RTC_WKUP_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[2b]">Reset_Handler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[66]">SDIO_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[58]">SPI1_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[59]">SPI2_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[68]">SPI3_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[31]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[92]">StartDefaultTask</a> from freertos.o(i.StartDefaultTask) referenced from freertos.o(.constdata)
 <LI><a href="#[93]">StartTask02</a> from freertos.o(i.StartTask02) referenced from freertos.o(.constdata)
 <LI><a href="#[34]">SysTick_Handler</a> from stm32f2xx_it.o(i.SysTick_Handler) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[86]">SystemInit</a> from system_stm32f2xx.o(i.SystemInit) referenced from startup_stm32f207xx.o(.text)
 <LI><a href="#[37]">TAMP_STAMP_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[4d]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[50]">TIM1_CC_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[4f]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[4e]">TIM1_UP_TIM10_IRQHandler</a> from stm32f2xx_it.o(i.TIM1_UP_TIM10_IRQHandler) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[51]">TIM2_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[52]">TIM3_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[53]">TIM4_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[67]">TIM5_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[6b]">TIM6_DAC_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[6c]">TIM7_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[60]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[63]">TIM8_CC_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[62]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[61]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[69]">UART4_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[6a]">UART5_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[88]">UART_DMAAbortOnError</a> from stm32f2xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32f2xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[5a]">USART1_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[5b]">USART2_IRQHandler</a> from stm32f2xx_it.o(i.USART2_IRQHandler) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[5c]">USART3_IRQHandler</a> from stm32f2xx_it.o(i.USART3_IRQHandler) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[7c]">USART6_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[30]">UsageFault_Handler</a> from stm32f2xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[35]">WWDG_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[87]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f207xx.o(.text)
 <LI><a href="#[8a]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0snprintf)
 <LI><a href="#[8a]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[8b]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[89]">fputc</a> from fputc.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[d]">fsm_canvela_init</a> from l2canvela.o(i.fsm_canvela_init) referenced 4 times from l2canvela.o(.data)
 <LI><a href="#[12]">fsm_canvela_l2frame_rcv_handler</a> from l2canvela.o(i.fsm_canvela_l2frame_rcv_handler) referenced 2 times from l2canvela.o(.data)
 <LI><a href="#[13]">fsm_canvela_l3iap_inventory_report</a> from l2canvela.o(i.fsm_canvela_l3iap_inventory_report) referenced 2 times from l2canvela.o(.data)
 <LI><a href="#[14]">fsm_canvela_l3iap_sw_package_report</a> from l2canvela.o(i.fsm_canvela_l3iap_sw_package_report) referenced 2 times from l2canvela.o(.data)
 <LI><a href="#[10]">fsm_canvela_restart</a> from l2canvela.o(i.fsm_canvela_restart) referenced 2 times from l2canvela.o(.data)
 <LI><a href="#[f]">fsm_canvela_stop_rcv</a> from l2canvela.o(i.fsm_canvela_stop_rcv) referenced 2 times from l2canvela.o(.data)
 <LI><a href="#[c]">fsm_canvela_task_entry</a> from l2canvela.o(i.fsm_canvela_task_entry) referenced 2 times from l2canvela.o(.data)
 <LI><a href="#[11]">fsm_canvela_time_out</a> from l2canvela.o(i.fsm_canvela_time_out) referenced 2 times from l2canvela.o(.data)
 <LI><a href="#[3]">fsm_com_do_nothing</a> from vmfreeoslayer.o(i.fsm_com_do_nothing) referenced 36 times from l1timer_freeos.o(.data)
 <LI><a href="#[e]">fsm_com_heart_beat_rcv</a> from vmfreeoslayer.o(i.fsm_com_heart_beat_rcv) referenced 8 times from l2canvela.o(.data)
 <LI><a href="#[23]">fsm_l3iap_init</a> from l3iap.o(i.fsm_l3iap_init) referenced 4 times from l3iap.o(.data)
 <LI><a href="#[25]">fsm_l3iap_restart</a> from l3iap.o(i.fsm_l3iap_restart) referenced 2 times from l3iap.o(.data)
 <LI><a href="#[24]">fsm_l3iap_stop_rcv</a> from l3iap.o(i.fsm_l3iap_stop_rcv) referenced 2 times from l3iap.o(.data)
 <LI><a href="#[27]">fsm_l3iap_sw_inventory_confirm</a> from l3iap.o(i.fsm_l3iap_sw_inventory_confirm) referenced 2 times from l3iap.o(.data)
 <LI><a href="#[28]">fsm_l3iap_sw_inventory_timeout</a> from l3iap.o(i.fsm_l3iap_sw_inventory_timeout) referenced 2 times from l3iap.o(.data)
 <LI><a href="#[29]">fsm_l3iap_sw_package_confirm</a> from l3iap.o(i.fsm_l3iap_sw_package_confirm) referenced 2 times from l3iap.o(.data)
 <LI><a href="#[2a]">fsm_l3iap_sw_package_timeout</a> from l3iap.o(i.fsm_l3iap_sw_package_timeout) referenced 2 times from l3iap.o(.data)
 <LI><a href="#[22]">fsm_l3iap_task_entry</a> from l3iap.o(i.fsm_l3iap_task_entry) referenced 2 times from l3iap.o(.data)
 <LI><a href="#[26]">fsm_l3iap_time_out</a> from l3iap.o(i.fsm_l3iap_time_out) referenced 2 times from l3iap.o(.data)
 <LI><a href="#[16]">fsm_ledpisces_init</a> from l2ledpisces.o(i.fsm_ledpisces_init) referenced 4 times from l2ledpisces.o(.data)
 <LI><a href="#[18]">fsm_ledpisces_restart</a> from l2ledpisces.o(i.fsm_ledpisces_restart) referenced 4 times from l2ledpisces.o(.data)
 <LI><a href="#[17]">fsm_ledpisces_stop_rcv</a> from l2ledpisces.o(i.fsm_ledpisces_stop_rcv) referenced 4 times from l2ledpisces.o(.data)
 <LI><a href="#[15]">fsm_ledpisces_task_entry</a> from l2ledpisces.o(i.fsm_ledpisces_task_entry) referenced 2 times from l2ledpisces.o(.data)
 <LI><a href="#[19]">fsm_ledpisces_time_out</a> from l2ledpisces.o(i.fsm_ledpisces_time_out) referenced 2 times from l2ledpisces.o(.data)
 <LI><a href="#[1d]">fsm_spsvirgo_init</a> from l2spsvirgo.o(i.fsm_spsvirgo_init) referenced 4 times from l2spsvirgo.o(.data)
 <LI><a href="#[21]">fsm_spsvirgo_l2frame_rcv</a> from l2spsvirgo.o(i.fsm_spsvirgo_l2frame_rcv) referenced 2 times from l2spsvirgo.o(.data)
 <LI><a href="#[1f]">fsm_spsvirgo_restart</a> from l2spsvirgo.o(i.fsm_spsvirgo_restart) referenced 4 times from l2spsvirgo.o(.data)
 <LI><a href="#[1e]">fsm_spsvirgo_stop_rcv</a> from l2spsvirgo.o(i.fsm_spsvirgo_stop_rcv) referenced 4 times from l2spsvirgo.o(.data)
 <LI><a href="#[1c]">fsm_spsvirgo_task_entry</a> from l2spsvirgo.o(i.fsm_spsvirgo_task_entry) referenced 2 times from l2spsvirgo.o(.data)
 <LI><a href="#[20]">fsm_spsvirgo_time_out</a> from l2spsvirgo.o(i.fsm_spsvirgo_time_out) referenced 4 times from l2spsvirgo.o(.data)
 <LI><a href="#[1]">fsm_timer_init</a> from l1timer_freeos.o(i.fsm_timer_init) referenced 2 times from l1timer_freeos.o(.data)
 <LI><a href="#[2]">fsm_timer_restart</a> from l1timer_freeos.o(i.fsm_timer_restart) referenced 4 times from l1timer_freeos.o(.data)
 <LI><a href="#[4]">fsm_timer_stop_rcv</a> from l1timer_freeos.o(i.fsm_timer_stop_rcv) referenced 2 times from l1timer_freeos.o(.data)
 <LI><a href="#[0]">fsm_timer_task_entry</a> from l1timer_freeos.o(i.fsm_timer_task_entry) referenced 2 times from l1timer_freeos.o(.data)
 <LI><a href="#[b]">fsm_vmfo_heart_beat</a> from l1vmfo.o(i.fsm_vmfo_heart_beat) referenced 2 times from l1vmfo.o(.data)
 <LI><a href="#[6]">fsm_vmfo_init</a> from l1vmfo.o(i.fsm_vmfo_init) referenced 2 times from l1vmfo.o(.data)
 <LI><a href="#[a]">fsm_vmfo_init_fb</a> from l1vmfo.o(i.fsm_vmfo_init_fb) referenced 2 times from l1vmfo.o(.data)
 <LI><a href="#[7]">fsm_vmfo_restart</a> from l1vmfo.o(i.fsm_vmfo_restart) referenced 6 times from l1vmfo.o(.data)
 <LI><a href="#[8]">fsm_vmfo_stop_rcv</a> from l1vmfo.o(i.fsm_vmfo_stop_rcv) referenced 4 times from l1vmfo.o(.data)
 <LI><a href="#[5]">fsm_vmfo_task_entry</a> from l1vmfo.o(i.fsm_vmfo_task_entry) referenced 2 times from l1vmfo.o(.data)
 <LI><a href="#[9]">fsm_vmfo_time_out</a> from l1vmfo.o(i.fsm_vmfo_time_out) referenced 2 times from l1vmfo.o(.data)
 <LI><a href="#[8c]">func_timer_routine_handler_1s</a> from l1timer_freeos.o(i.func_timer_routine_handler_1s) referenced from l1timer_freeos.o(i.fsm_timer_init)
 <LI><a href="#[1b]">ihu_bsp_stm32_led_f2board_off</a> from bsp_led.o(i.ihu_bsp_stm32_led_f2board_off) referenced 2 times from l2ledpisces.o(.data)
 <LI><a href="#[1a]">ihu_bsp_stm32_led_f2board_on</a> from bsp_led.o(i.ihu_bsp_stm32_led_f2board_on) referenced 2 times from l2ledpisces.o(.data)
 <LI><a href="#[85]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[8f]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[8e]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[90]">prvTimerTask</a> from timers.o(i.prvTimerTask) referenced from timers.o(i.xTimerCreateTimerTask)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[87]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(.text)
</UL>
<P><STRONG><a name="[1a1]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[94]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[a6]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1a2]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1a3]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1a4]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1a5]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1a6]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[31]"></a>SVC_Handler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[196]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[33]"></a>PendSV_Handler</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[16a]"></a>ulPortSetInterruptMask</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStepTick
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskExitError
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
</UL>

<P><STRONG><a name="[184]"></a>vPortClearInterruptMask</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
</UL>

<P><STRONG><a name="[18a]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>

<P><STRONG><a name="[2b]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[138]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_timer_init
</UL>

<P><STRONG><a name="[13e]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_bfsc_hw_init
</UL>

<P><STRONG><a name="[108]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_time_out
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_init_fb
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_heart_beat
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_f2board_equid_get
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_time_out
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_l2frame_rcv
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ledpisces_time_out
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_canitfleo_l2frame_msg_sw_package_confirm_received_handle
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_canvela_time_out
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_canvela_l3iap_sw_package_report
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_canvela_l3iap_inventory_report
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_canvela_l2frame_rcv_handler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_l3iap_time_out
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_l3iap_sw_package_timeout
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_l3iap_sw_package_confirm
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_l3iap_sw_inventory_timeout
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_l3iap_sw_inventory_confirm
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadIhuSysEngElementHwBurnContext
</UL>

<P><STRONG><a name="[10c]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
</UL>

<P><STRONG><a name="[1a7]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1a8]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1a9]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[97]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_timer_init
</UL>

<P><STRONG><a name="[bd]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_l2frame_rcv
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_canitfleo_l2frame_msg_sw_package_confirm_received_handle
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_canvela_l3iap_sw_package_report
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_canvela_l3iap_inventory_report
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_canvela_l2frame_rcv_handler
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vm_system_ctr_table_init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_timerid_to_string
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_msgid_to_string
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmProcessingLaunch
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_l3iap_sw_package_confirm
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_l3iap_init
</UL>

<P><STRONG><a name="[1aa]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[99]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[105]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_timerid_to_string
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_taskid_to_string
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_msgid_to_string
</UL>

<P><STRONG><a name="[14f]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vm_system_ctr_table_init
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_timerid_to_string
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_taskid_to_string
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_msgid_to_string
</UL>

<P><STRONG><a name="[ff]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_sps_print_send_data
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_timerid_to_string
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_taskid_to_string
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_msgid_to_string
</UL>

<P><STRONG><a name="[100]"></a>strncat</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, strncat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncat
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
</UL>

<P><STRONG><a name="[15a]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vm_system_ctr_table_init
</UL>

<P><STRONG><a name="[149]"></a>strerror</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, strerror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_task_create
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_rcv
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_queue_create
</UL>

<P><STRONG><a name="[1ab]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[122]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[9a]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1ac]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[9e]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[9d]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[9f]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>

<P><STRONG><a name="[a1]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[a2]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[a3]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[a4]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[a5]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[11f]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[95]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1ad]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[9c]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[1ae]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, semi.o(.text), UNUSED)

<P><STRONG><a name="[1af]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[9b]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[1b0]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[a0]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1b1]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[1b2]"></a>__I$use$semihosting$fputc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, iusesemip.o(.text), UNUSED)

<P><STRONG><a name="[1b3]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[1b4]"></a>__decompress2</STRONG> (Thumb, 94 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[2f]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.CAN1_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CAN1_RX0_IRQHandler &rArr; HAL_CAN_IRQHandler &rArr; CAN_Transmit_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.CAN1_RX1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CAN1_RX1_IRQHandler &rArr; HAL_CAN_IRQHandler &rArr; CAN_Transmit_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>Callback01</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, freertos.o(i.Callback01))
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[32]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[ac]"></a>Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN1_Init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[ad]"></a>FLASH_Erase_Sector</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, stm32f2xx_hal_flash_ex.o(i.FLASH_Erase_Sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_Erase_Sector
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_iap_erase_flash_block
</UL>

<P><STRONG><a name="[b3]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32f2xx_hal_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetErrorCode
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[b6]"></a>FsmAddNew</STRONG> (Thumb, 534 bytes, Stack size 48 bytes, vmfreeoslayer.o(i.FsmAddNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = FsmAddNew &rArr; FsmSetState &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_task_create_and_run
</UL>

<P><STRONG><a name="[bb]"></a>FsmGetState</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, vmfreeoslayer.o(i.FsmGetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = FsmGetState &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_time_out
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_time_out
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ledpisces_time_out
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_canvela_time_out
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmRunEngine
</UL>

<P><STRONG><a name="[bc]"></a>FsmInit</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, vmfreeoslayer.o(i.FsmInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = FsmInit &rArr; IhuDebugPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vm_system_ctr_table_init
</UL>

<P><STRONG><a name="[8d]"></a>FsmProcessingLaunch</STRONG> (Thumb, 212 bytes, Stack size 592 bytes, vmfreeoslayer.o(i.FsmProcessingLaunch))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = FsmProcessingLaunch &rArr; FsmRunEngine &rArr; FsmGetState &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_sleep
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_rcv
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmRunEngine
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vmfreeoslayer.o(i.ihu_task_create_and_run)
</UL>
<P><STRONG><a name="[bf]"></a>FsmRunEngine</STRONG> (Thumb, 530 bytes, Stack size 80 bytes, vmfreeoslayer.o(i.FsmRunEngine))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = FsmRunEngine &rArr; FsmGetState &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmGetState
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmProcessingLaunch
</UL>

<P><STRONG><a name="[ba]"></a>FsmSetState</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, vmfreeoslayer.o(i.FsmSetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = FsmSetState &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_time_out
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_task_entry
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_stop_rcv
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_init
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_timer_task_entry
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_timer_stop_rcv
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_timer_init
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_time_out
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_task_entry
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_stop_rcv
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_init
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ledpisces_time_out
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ledpisces_task_entry
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ledpisces_stop_rcv
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ledpisces_init
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_canvela_time_out
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_canvela_task_entry
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_canvela_stop_rcv
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_canvela_init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmAddNew
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_l3iap_task_entry
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_l3iap_sw_inventory_confirm
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_l3iap_stop_rcv
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_l3iap_init
</UL>

<P><STRONG><a name="[c1]"></a>GetWmcId</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, l3iap.o(i.GetWmcId))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetWmcId &rArr; HAL_GPIO_ReadPin
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_bfsc_hw_init
</UL>

<P><STRONG><a name="[c3]"></a>HAL_CAN_ConfigFilter</STRONG> (Thumb, 328 bytes, Stack size 24 bytes, stm32f2xx_hal_can.o(i.HAL_CAN_ConfigFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_CAN_ConfigFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_can_config_filter
</UL>

<P><STRONG><a name="[c4]"></a>HAL_CAN_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_hal_can.o(i.HAL_CAN_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[a7]"></a>HAL_CAN_IRQHandler</STRONG> (Thumb, 370 bytes, Stack size 8 bytes, stm32f2xx_hal_can.o(i.HAL_CAN_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_CAN_IRQHandler &rArr; CAN_Transmit_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_ErrorCallback
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmit_IT
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX1_IRQHandler
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[c5]"></a>HAL_CAN_Init</STRONG> (Thumb, 556 bytes, Stack size 24 bytes, stm32f2xx_hal_can.o(i.HAL_CAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_CAN_Init &rArr; HAL_CAN_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN1_Init
</UL>

<P><STRONG><a name="[c6]"></a>HAL_CAN_MspInit</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, can.o(i.HAL_CAN_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_CAN_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
</UL>

<P><STRONG><a name="[ca]"></a>HAL_CAN_Receive_IT</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, stm32f2xx_hal_can.o(i.HAL_CAN_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_CAN_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a9]"></a>HAL_CAN_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_hal_can.o(i.HAL_CAN_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Receive_IT
</UL>

<P><STRONG><a name="[ab]"></a>HAL_CAN_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_hal_can.o(i.HAL_CAN_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmit_IT
</UL>

<P><STRONG><a name="[f2]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f2xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[144]"></a>HAL_FLASH_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f2xx_hal_flash.o(i.HAL_FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_iap_write_flash
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_iap_sw_jump_to_factory_load
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_iap_erase_flash_block
</UL>

<P><STRONG><a name="[cb]"></a>HAL_FLASH_Program</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, stm32f2xx_hal_flash.o(i.HAL_FLASH_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_FLASH_Program &rArr; FLASH_Program_Word
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_Word
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_HalfWord
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_DoubleWord
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_Byte
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_iap_write_flash
</UL>

<P><STRONG><a name="[143]"></a>HAL_FLASH_Unlock</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f2xx_hal_flash.o(i.HAL_FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_iap_write_flash
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_iap_erase_flash_block
</UL>

<P><STRONG><a name="[c7]"></a>HAL_GPIO_Init</STRONG> (Thumb, 652 bytes, Stack size 40 bytes, stm32f2xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[c2]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, stm32f2xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_GPIO_ReadPin
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWmcId
</UL>

<P><STRONG><a name="[cc]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32f2xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_led_work_state_f2board_on
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_led_commu_f2board_on
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_led_f2board_on
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_led_f2board_off
</UL>

<P><STRONG><a name="[b4]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[ee]"></a>HAL_IncTick</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[cd]"></a>HAL_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f2xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cf]"></a>HAL_InitTick</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, stm32f2xx_hal_timebase_tim.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetClockConfig
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[d0]"></a>HAL_MspInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32f2xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[c9]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f2xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[c8]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32f2xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[ce]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32f2xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[d6]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 576 bytes, Stack size 32 bytes, stm32f2xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[d7]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 534 bytes, Stack size 32 bytes, stm32f2xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[d1]"></a>HAL_RCC_GetClockConfig</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f2xx_hal_rcc.o(i.HAL_RCC_GetClockConfig))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[117]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[118]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[d2]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[d8]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 104 bytes, Stack size 12 bytes, stm32f2xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[d9]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 966 bytes, Stack size 40 bytes, stm32f2xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[da]"></a>HAL_RTC_Init</STRONG> (Thumb, 262 bytes, Stack size 16 bytes, stm32f2xx_hal_rtc.o(i.HAL_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RTC_Init &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[db]"></a>HAL_RTC_MspInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtc.o(i.HAL_RTC_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[dd]"></a>HAL_RTC_SetDate</STRONG> (Thumb, 366 bytes, Stack size 32 bytes, stm32f2xx_hal_rtc.o(i.HAL_RTC_SetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RTC_SetDate &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[e1]"></a>HAL_RTC_SetTime</STRONG> (Thumb, 462 bytes, Stack size 32 bytes, stm32f2xx_hal_rtc.o(i.HAL_RTC_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RTC_SetTime &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[e0]"></a>HAL_RTC_WaitForSynchro</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f2xx_hal_rtc.o(i.HAL_RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
</UL>

<P><STRONG><a name="[e2]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f2xx_hal_cortex.o(i.HAL_SYSTICK_CLKSourceConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_CLKSourceConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[e3]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f2xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[eb]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[ed]"></a>HAL_TIMEx_CommutationCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_hal_tim_ex.o(i.HAL_TIMEx_CommutationCallback))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[d3]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 200 bytes, Stack size 8 bytes, stm32f2xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[e4]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_hal_tim.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[d4]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, stm32f2xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_Base_Start_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[e7]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[e6]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 358 bytes, Stack size 16 bytes, stm32f2xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutationCallback
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_TIM10_IRQHandler
</UL>

<P><STRONG><a name="[e8]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[e9]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[ea]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[ec]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[f3]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[ef]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 266 bytes, Stack size 16 bytes, stm32f2xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_IT
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[f6]"></a>HAL_UART_Init</STRONG> (Thumb, 242 bytes, Stack size 16 bytes, stm32f2xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
</UL>

<P><STRONG><a name="[f7]"></a>HAL_UART_MspInit</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, usart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[fa]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, stm32f2xx_hal_uart.o(i.HAL_UART_Receive_IT))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[f9]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 412 bytes, Stack size 32 bytes, bsp_usart.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_UART_RxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[fb]"></a>HAL_UART_Transmit</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, stm32f2xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_sps_print_send_data
</UL>

<P><STRONG><a name="[f5]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_hal_uart.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[2d]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[145]"></a>IAP_ExecuteApp_fun</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bsp_iap.o(i.IAP_ExecuteApp_fun))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_iap_sw_jump_to_factory_load
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_iap_sw_jump_to_app_load
</UL>

<P><STRONG><a name="[b8]"></a>IhuDebugPrintFo</STRONG> (Thumb, 172 bytes, Stack size 344 bytes, vmfreeoslayer.o(i.IhuDebugPrintFo))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = IhuDebugPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_sps_print_send_data
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncat
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_init_fb
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_init
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_timer_init
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_init
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ledpisces_init
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_canvela_l2frame_rcv_handler
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_canvela_init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vm_system_ctr_table_init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_task_create_and_run
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_task_create
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_system_task_init_call
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmRunEngine
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmProcessingLaunch
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmInit
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmAddNew
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_send_iap_sw_package_report
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_send_iap_sw_inventory_report
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_iap_write_flash
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_iap_sw_save_hw_sw_control_table
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_iap_sw_jump_to_factory_load
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_iap_sw_jump_to_app_load
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_iap_erase_flash_block
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_bfsc_hw_init
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_l3iap_sw_package_timeout
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_l3iap_sw_package_confirm
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_l3iap_sw_inventory_timeout
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_l3iap_sw_inventory_confirm
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_l3iap_init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysEngElementHwBurnFlashContentInit
</UL>

<P><STRONG><a name="[b7]"></a>IhuDebugPrintId</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, vmfreeoslayer.o(i.IhuDebugPrintId))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = IhuDebugPrintId &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_can_config_filter
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmGetState
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_time_out
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_task_entry
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_stop_rcv
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_restart
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_init_fb
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_init
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_heart_beat
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_timer_start
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_timer_routine_handler_1s
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_timer_task_entry
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_timer_stop_rcv
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_timer_restart
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_timer_init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_spsvirgo_time_out_period_scan
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_time_out
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_task_entry
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_stop_rcv
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_restart
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_l2frame_rcv
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_ledpisces_galowag_start
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ledpisces_time_out_period_scan
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ledpisces_time_out
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ledpisces_task_entry
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ledpisces_stop_rcv
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ledpisces_restart
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ledpisces_init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_canvela_time_out_period_scan
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_canitfleo_l2frame_msg_sw_package_confirm_received_handle
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_canitfleo_l2frame_msg_inventory_confirm_received_handle
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_canvela_time_out
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_canvela_task_entry
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_canvela_stop_rcv
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_canvela_restart
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_canvela_l3iap_sw_package_report
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_canvela_l3iap_inventory_report
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_canvela_l2frame_rcv_handler
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_canvela_init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vm_system_ctr_table_init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vm_send_init_msg_to_app_task
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_timerid_to_string
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_taskid_to_string
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_task_create_and_run
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_task_create
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_system_task_init_call
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_msgid_to_string
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_rcv
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_queue_create
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_com_heart_beat_rcv
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmRunEngine
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmProcessingLaunch
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmInit
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmAddNew
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_send_iap_sw_package_report
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_send_iap_sw_inventory_report
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_iap_write_flash
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_iap_sw_save_hw_sw_control_table
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_iap_sw_jump_to_factory_load
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_iap_sw_jump_to_app_load
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_iap_erase_flash_block
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_bfsc_hw_init
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_l3iap_time_out
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_l3iap_task_entry
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_l3iap_sw_package_timeout
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_l3iap_sw_package_confirm
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_l3iap_sw_inventory_timeout
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_l3iap_sw_inventory_confirm
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_l3iap_stop_rcv
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_l3iap_restart
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_l3iap_init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysEngElementHwBurnFlashContentInit
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadIhuSysEngElementHwBurnContext
</UL>

<P><STRONG><a name="[b9]"></a>IhuErrorPrintFo</STRONG> (Thumb, 174 bytes, Stack size 344 bytes, vmfreeoslayer.o(i.IhuErrorPrintFo))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_sps_print_send_data
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncat
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_can_config_filter
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmGetState
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_time_out
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_task_entry
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_stop_rcv
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_restart
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_init_fb
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_init
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_heart_beat
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_timer_start
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_timer_routine_handler_1s
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_timer_task_entry
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_timer_stop_rcv
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_timer_restart
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_timer_init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_spsvirgo_time_out_period_scan
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_time_out
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_task_entry
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_stop_rcv
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_restart
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_l2frame_rcv
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_ledpisces_galowag_start
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ledpisces_time_out_period_scan
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ledpisces_time_out
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ledpisces_task_entry
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ledpisces_stop_rcv
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ledpisces_restart
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ledpisces_init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_canvela_time_out_period_scan
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_canitfleo_l2frame_msg_sw_package_confirm_received_handle
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_canitfleo_l2frame_msg_inventory_confirm_received_handle
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_canvela_time_out
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_canvela_task_entry
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_canvela_stop_rcv
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_canvela_restart
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_canvela_l3iap_sw_package_report
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_canvela_l3iap_inventory_report
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_canvela_l2frame_rcv_handler
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_canvela_init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vm_system_ctr_table_init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vm_send_init_msg_to_app_task
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_timerid_to_string
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_taskid_to_string
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_task_create_and_run
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_task_create
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_system_task_init_call
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_msgid_to_string
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_rcv
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_queue_create
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_com_heart_beat_rcv
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmRunEngine
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmProcessingLaunch
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmAddNew
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_send_iap_sw_package_report
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_send_iap_sw_inventory_report
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_iap_write_flash
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_iap_erase_flash_block
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_bfsc_hw_init
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_l3iap_time_out
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_l3iap_task_entry
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_l3iap_sw_package_timeout
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_l3iap_sw_package_confirm
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_l3iap_sw_inventory_timeout
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_l3iap_sw_inventory_confirm
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_l3iap_stop_rcv
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_l3iap_restart
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_l3iap_init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadIhuSysEngElementHwBurnContext
</UL>

<P><STRONG><a name="[106]"></a>LoadIhuSysEngElementHwBurnContext</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, l3iap.o(i.LoadIhuSysEngElementHwBurnContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = LoadIhuSysEngElementHwBurnContext &rArr; SysEngElementHwBurnFlashContentInit &rArr; ihu_iap_sw_save_hw_sw_control_table &rArr; ihu_iap_write_flash &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysEngElementHwBurnFlashContentInit
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_l3iap_init
</UL>

<P><STRONG><a name="[109]"></a>MX_CAN1_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, can.o(i.MX_CAN1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_CAN1_Init &rArr; HAL_CAN_Init &rArr; HAL_CAN_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10a]"></a>MX_FREERTOS_Init</STRONG> (Thumb, 90 bytes, Stack size 64 bytes, freertos.o(i.MX_FREERTOS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = MX_FREERTOS_Init &rArr; osThreadCreate &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerCreate
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageCreate
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10f]"></a>MX_GPIO_Init</STRONG> (Thumb, 342 bytes, Stack size 64 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[110]"></a>MX_RTC_Init</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, rtc.o(i.MX_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MX_RTC_Init &rArr; HAL_RTC_SetTime &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[111]"></a>MX_USART2_UART_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usart.o(i.MX_USART2_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_USART2_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[112]"></a>MX_USART3_UART_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usart.o(i.MX_USART3_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_USART3_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2e]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[187]"></a>PostSleepProcessing</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, freertos.o(i.PostSleepProcessing))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
</UL>

<P><STRONG><a name="[186]"></a>PreSleepProcessing</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, freertos.o(i.PreSleepProcessing))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
</UL>

<P><STRONG><a name="[de]"></a>RTC_Bcd2ToByte</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_hal_rtc.o(i.RTC_Bcd2ToByte))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
</UL>

<P><STRONG><a name="[df]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_hal_rtc.o(i.RTC_ByteToBcd2))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
</UL>

<P><STRONG><a name="[dc]"></a>RTC_EnterInitMode</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32f2xx_hal_rtc.o(i.RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[92]"></a>StartDefaultTask</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, freertos.o(i.StartDefaultTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + In Cycle
<LI>Call Chain = StartDefaultTask &rArr;  StartDefaultTask (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[93]"></a>StartTask02</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, freertos.o(i.StartTask02))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + In Cycle
<LI>Call Chain = StartTask02 &rArr;  StartTask02 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTask02
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTask02
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[107]"></a>SysEngElementHwBurnFlashContentInit</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, l3iap.o(i.SysEngElementHwBurnFlashContentInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = SysEngElementHwBurnFlashContentInit &rArr; ihu_iap_sw_save_hw_sw_control_table &rArr; ihu_iap_write_flash &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_iap_sw_save_hw_sw_control_table
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadIhuSysEngElementHwBurnContext
</UL>

<P><STRONG><a name="[34]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SysTick_Handler &rArr; osSystickHandler &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSystickHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[116]"></a>SystemClock_Config</STRONG> (Thumb, 134 bytes, Stack size 96 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[86]"></a>SystemInit</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, system_stm32f2xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(.text)
</UL>
<P><STRONG><a name="[4e]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.TIM1_UP_TIM10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM1_UP_TIM10_IRQHandler &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[e5]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 148 bytes, Stack size 20 bytes, stm32f2xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[5b]"></a>USART2_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USART2_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>USART3_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USART3_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[119]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1b5]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[15b]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b6]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[1b7]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[11b]"></a>__0snprintf</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1b8]"></a>__1snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[104]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>

<P><STRONG><a name="[1b9]"></a>__c89snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[1ba]"></a>snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[11c]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1bb]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[fe]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
</UL>

<P><STRONG><a name="[1bc]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[1bd]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[11d]"></a>__0vsnprintf</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1be]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[1bf]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[1c0]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[fd]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
</UL>

<P><STRONG><a name="[148]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_task_create
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_rcv
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_queue_create
</UL>

<P><STRONG><a name="[1c1]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[1c2]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1c3]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1c4]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[ae]"></a>assert_failed</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.assert_failed))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Receive_IT
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_Word
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_HalfWord
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_DoubleWord
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_Byte
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_ConfigFilter
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase_Sector
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[123]"></a>bsp_can_config_filter</STRONG> (Thumb, 98 bytes, Stack size 56 bytes, bsp_can.o(i.bsp_can_config_filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = bsp_can_config_filter &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_ConfigFilter
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_bfsc_hw_init
</UL>

<P><STRONG><a name="[191]"></a>configureTimerForRunTimeStats</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, freertos.o(i.configureTimerForRunTimeStats))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[185]"></a>eTaskConfirmSleepModeStatus</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, tasks.o(i.eTaskConfirmSleepModeStatus))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
</UL>

<P><STRONG><a name="[89]"></a>fputc</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, fputc.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[d]"></a>fsm_canvela_init</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, l2canvela.o(i.fsm_canvela_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352<LI>Call Chain = fsm_canvela_init &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_timer_start
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_usleep
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_canvela_restart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2canvela.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>fsm_canvela_l2frame_rcv_handler</STRONG> (Thumb, 260 bytes, Stack size 584 bytes, l2canvela.o(i.fsm_canvela_l2frame_rcv_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 2184<LI>Call Chain = fsm_canvela_l2frame_rcv_handler &rArr; func_canitfleo_l2frame_msg_sw_package_confirm_received_handle &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_canitfleo_l2frame_msg_sw_package_confirm_received_handle
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_canitfleo_l2frame_msg_inventory_confirm_received_handle
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2canvela.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>fsm_canvela_l3iap_inventory_report</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, l2canvela.o(i.fsm_canvela_l3iap_inventory_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = fsm_canvela_l3iap_inventory_report &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2canvela.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>fsm_canvela_l3iap_sw_package_report</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, l2canvela.o(i.fsm_canvela_l3iap_sw_package_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = fsm_canvela_l3iap_sw_package_report &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2canvela.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>fsm_canvela_restart</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, l2canvela.o(i.fsm_canvela_restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360<LI>Call Chain = fsm_canvela_restart &rArr; fsm_canvela_init &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_canvela_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2canvela.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>fsm_canvela_stop_rcv</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, l2canvela.o(i.fsm_canvela_stop_rcv))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = fsm_canvela_stop_rcv &rArr; FsmSetState &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2canvela.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>fsm_canvela_task_entry</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, l2canvela.o(i.fsm_canvela_task_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = fsm_canvela_task_entry &rArr; FsmSetState &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2canvela.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>fsm_canvela_time_out</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, l2canvela.o(i.fsm_canvela_time_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 1376<LI>Call Chain = fsm_canvela_time_out &rArr; func_canvela_time_out_period_scan &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmGetState
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_canvela_time_out_period_scan
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2canvela.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>fsm_com_do_nothing</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, vmfreeoslayer.o(i.fsm_com_do_nothing))
<BR>[Address Reference Count : 5]<UL><LI> l2canvela.o(.data)
<LI> l2spsvirgo.o(.data)
<LI> l1timer_freeos.o(.data)
<LI> l2ledpisces.o(.data)
<LI> l3iap.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>fsm_com_heart_beat_rcv</STRONG> (Thumb, 220 bytes, Stack size 48 bytes, vmfreeoslayer.o(i.fsm_com_heart_beat_rcv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1376<LI>Call Chain = fsm_com_heart_beat_rcv &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Address Reference Count : 4]<UL><LI> l2canvela.o(.data)
<LI> l2spsvirgo.o(.data)
<LI> l2ledpisces.o(.data)
<LI> l3iap.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>fsm_l3iap_init</STRONG> (Thumb, 466 bytes, Stack size 32 bytes, l3iap.o(i.fsm_l3iap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1384<LI>Call Chain = fsm_l3iap_init &rArr; ihu_send_iap_sw_inventory_report &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_timer_start
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_usleep
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_ledpisces_galowag_start
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_send_iap_sw_inventory_report
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_iap_sw_jump_to_factory_load
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_iap_sw_jump_to_app_load
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_bfsc_hw_init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadIhuSysEngElementHwBurnContext
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_l3iap_restart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l3iap.o(.data)
</UL>
<P><STRONG><a name="[25]"></a>fsm_l3iap_restart</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, l3iap.o(i.fsm_l3iap_restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 1392<LI>Call Chain = fsm_l3iap_restart &rArr; fsm_l3iap_init &rArr; ihu_send_iap_sw_inventory_report &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_l3iap_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l3iap.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>fsm_l3iap_stop_rcv</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, l3iap.o(i.fsm_l3iap_stop_rcv))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = fsm_l3iap_stop_rcv &rArr; FsmSetState &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l3iap.o(.data)
</UL>
<P><STRONG><a name="[27]"></a>fsm_l3iap_sw_inventory_confirm</STRONG> (Thumb, 444 bytes, Stack size 48 bytes, l3iap.o(i.fsm_l3iap_sw_inventory_confirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 1408<LI>Call Chain = fsm_l3iap_sw_inventory_confirm &rArr; ihu_send_iap_sw_package_report &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_send_iap_sw_package_report
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_iap_sw_jump_to_factory_load
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_iap_sw_jump_to_app_load
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_iap_erase_flash_block
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l3iap.o(.data)
</UL>
<P><STRONG><a name="[28]"></a>fsm_l3iap_sw_inventory_timeout</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, l3iap.o(i.fsm_l3iap_sw_inventory_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368<LI>Call Chain = fsm_l3iap_sw_inventory_timeout &rArr; ihu_send_iap_sw_inventory_report &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_send_iap_sw_inventory_report
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_iap_sw_jump_to_factory_load
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_iap_sw_jump_to_app_load
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l3iap.o(.data)
</UL>
<P><STRONG><a name="[29]"></a>fsm_l3iap_sw_package_confirm</STRONG> (Thumb, 1556 bytes, Stack size 288 bytes, l3iap.o(i.fsm_l3iap_sw_package_confirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 1648<LI>Call Chain = fsm_l3iap_sw_package_confirm &rArr; ihu_send_iap_sw_package_report &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_send_iap_sw_package_report
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_iap_write_flash
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_iap_sw_save_hw_sw_control_table
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_iap_sw_jump_to_factory_load
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_iap_sw_jump_to_app_load
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l3iap.o(.data)
</UL>
<P><STRONG><a name="[2a]"></a>fsm_l3iap_sw_package_timeout</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, l3iap.o(i.fsm_l3iap_sw_package_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 1376<LI>Call Chain = fsm_l3iap_sw_package_timeout &rArr; ihu_send_iap_sw_package_report &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_send_iap_sw_package_report
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_iap_sw_jump_to_factory_load
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_iap_sw_jump_to_app_load
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l3iap.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>fsm_l3iap_task_entry</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, l3iap.o(i.fsm_l3iap_task_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = fsm_l3iap_task_entry &rArr; FsmSetState &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l3iap.o(.data)
</UL>
<P><STRONG><a name="[26]"></a>fsm_l3iap_time_out</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, l3iap.o(i.fsm_l3iap_time_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360<LI>Call Chain = fsm_l3iap_time_out &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l3iap.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>fsm_ledpisces_init</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, l2ledpisces.o(i.fsm_ledpisces_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352<LI>Call Chain = fsm_ledpisces_init &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_timer_start
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_usleep
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ledpisces_hw_init
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ledpisces_restart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2ledpisces.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>fsm_ledpisces_restart</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, l2ledpisces.o(i.fsm_ledpisces_restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360<LI>Call Chain = fsm_ledpisces_restart &rArr; fsm_ledpisces_init &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ledpisces_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2ledpisces.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>fsm_ledpisces_stop_rcv</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, l2ledpisces.o(i.fsm_ledpisces_stop_rcv))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = fsm_ledpisces_stop_rcv &rArr; FsmSetState &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2ledpisces.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>fsm_ledpisces_task_entry</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, l2ledpisces.o(i.fsm_ledpisces_task_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = fsm_ledpisces_task_entry &rArr; FsmSetState &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2ledpisces.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>fsm_ledpisces_time_out</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, l2ledpisces.o(i.fsm_ledpisces_time_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 1376<LI>Call Chain = fsm_ledpisces_time_out &rArr; func_ledpisces_time_out_period_scan &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmGetState
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ledpisces_time_out_period_scan
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ledpisces_time_out_galowag_scan
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2ledpisces.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>fsm_spsvirgo_init</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, l2spsvirgo.o(i.fsm_spsvirgo_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352<LI>Call Chain = fsm_spsvirgo_init &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_sps_slave_hw_init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_usleep
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_restart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2spsvirgo.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>fsm_spsvirgo_l2frame_rcv</STRONG> (Thumb, 78 bytes, Stack size 576 bytes, l2spsvirgo.o(i.fsm_spsvirgo_l2frame_rcv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040<LI>Call Chain = fsm_spsvirgo_l2frame_rcv &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2spsvirgo.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>fsm_spsvirgo_restart</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, l2spsvirgo.o(i.fsm_spsvirgo_restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360<LI>Call Chain = fsm_spsvirgo_restart &rArr; fsm_spsvirgo_init &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2spsvirgo.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>fsm_spsvirgo_stop_rcv</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, l2spsvirgo.o(i.fsm_spsvirgo_stop_rcv))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = fsm_spsvirgo_stop_rcv &rArr; FsmSetState &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2spsvirgo.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>fsm_spsvirgo_task_entry</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, l2spsvirgo.o(i.fsm_spsvirgo_task_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = fsm_spsvirgo_task_entry &rArr; FsmSetState &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2spsvirgo.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>fsm_spsvirgo_time_out</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, l2spsvirgo.o(i.fsm_spsvirgo_time_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 1376<LI>Call Chain = fsm_spsvirgo_time_out &rArr; func_spsvirgo_time_out_period_scan &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmGetState
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_spsvirgo_time_out_period_scan
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2spsvirgo.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>fsm_timer_init</STRONG> (Thumb, 294 bytes, Stack size 32 bytes, l1timer_freeos.o(i.fsm_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360<LI>Call Chain = fsm_timer_init &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_usleep
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_timer_restart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l1timer_freeos.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>fsm_timer_restart</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, l1timer_freeos.o(i.fsm_timer_restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368<LI>Call Chain = fsm_timer_restart &rArr; fsm_timer_init &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_timer_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l1timer_freeos.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>fsm_timer_stop_rcv</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, l1timer_freeos.o(i.fsm_timer_stop_rcv))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = fsm_timer_stop_rcv &rArr; FsmSetState &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l1timer_freeos.o(.data)
</UL>
<P><STRONG><a name="[0]"></a>fsm_timer_task_entry</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, l1timer_freeos.o(i.fsm_timer_task_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = fsm_timer_task_entry &rArr; FsmSetState &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l1timer_freeos.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>fsm_vmfo_heart_beat</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, l1vmfo.o(i.fsm_vmfo_heart_beat))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = fsm_vmfo_heart_beat &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l1vmfo.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>fsm_vmfo_init</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, l1vmfo.o(i.fsm_vmfo_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = fsm_vmfo_init &rArr; ihu_timer_start &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_timer_start
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_restart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l1vmfo.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>fsm_vmfo_init_fb</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, l1vmfo.o(i.fsm_vmfo_init_fb))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = fsm_vmfo_init_fb &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_vmfo_init_caculate_all_fb
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l1vmfo.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>fsm_vmfo_restart</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, l1vmfo.o(i.fsm_vmfo_restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = fsm_vmfo_restart &rArr; fsm_vmfo_init &rArr; ihu_timer_start &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l1vmfo.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>fsm_vmfo_stop_rcv</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, l1vmfo.o(i.fsm_vmfo_stop_rcv))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = fsm_vmfo_stop_rcv &rArr; FsmSetState &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l1vmfo.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>fsm_vmfo_task_entry</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, l1vmfo.o(i.fsm_vmfo_task_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = fsm_vmfo_task_entry &rArr; FsmSetState &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l1vmfo.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>fsm_vmfo_time_out</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, l1vmfo.o(i.fsm_vmfo_time_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360<LI>Call Chain = fsm_vmfo_time_out &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmGetState
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_vmfo_heart_caculate_all_received
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l1vmfo.o(.data)
</UL>
<P><STRONG><a name="[12a]"></a>func_bfsc_hw_init</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, l3iap.o(i.func_bfsc_hw_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = func_bfsc_hw_init &rArr; bsp_can_config_filter &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_get_cpuid_f2board
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_can_config_filter
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetWmcId
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_l3iap_init
</UL>

<P><STRONG><a name="[127]"></a>func_canitfleo_l2frame_msg_inventory_confirm_received_handle</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, l2canvela.o(i.func_canitfleo_l2frame_msg_inventory_confirm_received_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352<LI>Call Chain = func_canitfleo_l2frame_msg_inventory_confirm_received_handle &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_canvela_l2frame_rcv_handler
</UL>

<P><STRONG><a name="[128]"></a>func_canitfleo_l2frame_msg_sw_package_confirm_received_handle</STRONG> (Thumb, 168 bytes, Stack size 272 bytes, l2canvela.o(i.func_canitfleo_l2frame_msg_sw_package_confirm_received_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 1600<LI>Call Chain = func_canitfleo_l2frame_msg_sw_package_confirm_received_handle &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_canvela_l2frame_rcv_handler
</UL>

<P><STRONG><a name="[129]"></a>func_canvela_time_out_period_scan</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, l2canvela.o(i.func_canvela_time_out_period_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344<LI>Call Chain = func_canvela_time_out_period_scan &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_canvela_time_out
</UL>

<P><STRONG><a name="[132]"></a>func_ledpisces_hw_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, l2ledpisces.o(i.func_ledpisces_hw_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = func_ledpisces_hw_init &rArr; ihu_ledpisces_galowag_start &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_ledpisces_galowag_start
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ledpisces_init
</UL>

<P><STRONG><a name="[134]"></a>func_ledpisces_time_out_galowag_scan</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, l2ledpisces.o(i.func_ledpisces_time_out_galowag_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = func_ledpisces_time_out_galowag_scan
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ledpisces_time_out
</UL>

<P><STRONG><a name="[133]"></a>func_ledpisces_time_out_period_scan</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, l2ledpisces.o(i.func_ledpisces_time_out_period_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344<LI>Call Chain = func_ledpisces_time_out_period_scan &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ledpisces_time_out
</UL>

<P><STRONG><a name="[136]"></a>func_spsvirgo_time_out_period_scan</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, l2spsvirgo.o(i.func_spsvirgo_time_out_period_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344<LI>Call Chain = func_spsvirgo_time_out_period_scan &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_time_out
</UL>

<P><STRONG><a name="[8c]"></a>func_timer_routine_handler_1s</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, l1timer_freeos.o(i.func_timer_routine_handler_1s))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368<LI>Call Chain = func_timer_routine_handler_1s &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l1timer_freeos.o(i.fsm_timer_init)
</UL>
<P><STRONG><a name="[13c]"></a>func_vmfo_heart_caculate_all_received</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, l1vmfo.o(i.func_vmfo_heart_caculate_all_received))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_time_out
</UL>

<P><STRONG><a name="[13b]"></a>func_vmfo_init_caculate_all_fb</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, l1vmfo.o(i.func_vmfo_init_caculate_all_fb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = func_vmfo_init_caculate_all_fb
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_init_fb
</UL>

<P><STRONG><a name="[193]"></a>getRunTimeCounterValue</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, freertos.o(i.getRunTimeCounterValue))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[13f]"></a>ihu_bsp_stm32_f2board_equid_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_stmflash.o(i.ihu_bsp_stm32_f2board_equid_get))
<BR><BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vm_system_ctr_table_init
</UL>

<P><STRONG><a name="[13d]"></a>ihu_bsp_stm32_get_cpuid_f2board</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, bsp_cpuid.o(i.ihu_bsp_stm32_get_cpuid_f2board))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_bfsc_hw_init
</UL>

<P><STRONG><a name="[140]"></a>ihu_bsp_stm32_led_commu_f2board_on</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bsp_led.o(i.ihu_bsp_stm32_led_commu_f2board_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ihu_bsp_stm32_led_commu_f2board_on &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b]"></a>ihu_bsp_stm32_led_f2board_off</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp_led.o(i.ihu_bsp_stm32_led_f2board_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ihu_bsp_stm32_led_f2board_off &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2ledpisces.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>ihu_bsp_stm32_led_f2board_on</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp_led.o(i.ihu_bsp_stm32_led_f2board_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ihu_bsp_stm32_led_f2board_on &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2ledpisces.o(.data)
</UL>
<P><STRONG><a name="[141]"></a>ihu_bsp_stm32_led_work_state_f2board_on</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp_led.o(i.ihu_bsp_stm32_led_work_state_f2board_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ihu_bsp_stm32_led_work_state_f2board_on &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[102]"></a>ihu_bsp_stm32_sps_print_send_data</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bsp_usart.o(i.ihu_bsp_stm32_sps_print_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ihu_bsp_stm32_sps_print_send_data &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
</UL>

<P><STRONG><a name="[135]"></a>ihu_bsp_stm32_sps_slave_hw_init</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, bsp_usart.o(i.ihu_bsp_stm32_sps_slave_hw_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ihu_bsp_stm32_sps_slave_hw_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_init
</UL>

<P><STRONG><a name="[12f]"></a>ihu_iap_erase_flash_block</STRONG> (Thumb, 366 bytes, Stack size 32 bytes, l3iap.o(i.ihu_iap_erase_flash_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = ihu_iap_erase_flash_block &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase_Sector
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_iap_sw_save_hw_sw_control_table
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_l3iap_sw_inventory_confirm
</UL>

<P><STRONG><a name="[12c]"></a>ihu_iap_sw_jump_to_app_load</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, l3iap.o(i.ihu_iap_sw_jump_to_app_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = ihu_iap_sw_jump_to_app_load &rArr; IhuDebugPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_ExecuteApp_fun
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_l3iap_sw_package_timeout
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_l3iap_sw_package_confirm
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_l3iap_sw_inventory_timeout
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_l3iap_sw_inventory_confirm
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_l3iap_init
</UL>

<P><STRONG><a name="[12d]"></a>ihu_iap_sw_jump_to_factory_load</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, l3iap.o(i.ihu_iap_sw_jump_to_factory_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = ihu_iap_sw_jump_to_factory_load &rArr; IhuDebugPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_ExecuteApp_fun
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_l3iap_sw_package_timeout
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_l3iap_sw_package_confirm
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_l3iap_sw_inventory_timeout
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_l3iap_sw_inventory_confirm
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_l3iap_init
</UL>

<P><STRONG><a name="[114]"></a>ihu_iap_sw_save_hw_sw_control_table</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, l3iap.o(i.ihu_iap_sw_save_hw_sw_control_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = ihu_iap_sw_save_hw_sw_control_table &rArr; ihu_iap_write_flash &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_iap_write_flash
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_iap_erase_flash_block
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_l3iap_sw_package_confirm
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysEngElementHwBurnFlashContentInit
</UL>

<P><STRONG><a name="[131]"></a>ihu_iap_write_flash</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, l3iap.o(i.ihu_iap_write_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = ihu_iap_write_flash &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_iap_sw_save_hw_sw_control_table
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_l3iap_sw_package_confirm
</UL>

<P><STRONG><a name="[12b]"></a>ihu_ledpisces_galowag_start</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, l2ledpisces.o(i.ihu_ledpisces_galowag_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = ihu_ledpisces_galowag_start &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ledpisces_hw_init
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_l3iap_init
</UL>

<P><STRONG><a name="[146]"></a>ihu_message_queue_create</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, vmfreeoslayer.o(i.ihu_message_queue_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = ihu_message_queue_create &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strerror
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_task_create_and_run
</UL>

<P><STRONG><a name="[be]"></a>ihu_message_rcv</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, vmfreeoslayer.o(i.ihu_message_rcv))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = ihu_message_rcv &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_usleep
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strerror
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmProcessingLaunch
</UL>

<P><STRONG><a name="[125]"></a>ihu_message_send</STRONG> (Thumb, 2056 bytes, Stack size 784 bytes, vmfreeoslayer.o(i.ihu_message_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328<LI>Call Chain = ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_timerid_to_string
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_taskid_to_string
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_msgid_to_string
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strerror
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_time_out
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_timer_routine_handler_1s
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_timer_init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_spsvirgo_time_out_period_scan
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_time_out
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ledpisces_time_out_period_scan
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ledpisces_time_out
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ledpisces_init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_canvela_time_out_period_scan
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_canitfleo_l2frame_msg_sw_package_confirm_received_handle
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_canitfleo_l2frame_msg_inventory_confirm_received_handle
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_canvela_time_out
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_canvela_init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vm_send_init_msg_to_app_task
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_com_heart_beat_rcv
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_send_iap_sw_package_report
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_send_iap_sw_inventory_report
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_l3iap_time_out
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_l3iap_init
</UL>

<P><STRONG><a name="[14d]"></a>ihu_msgid_to_string</STRONG> (Thumb, 122 bytes, Stack size 80 bytes, vmfreeoslayer.o(i.ihu_msgid_to_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
</UL>

<P><STRONG><a name="[12e]"></a>ihu_send_iap_sw_inventory_report</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, l3iap.o(i.ihu_send_iap_sw_inventory_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352<LI>Call Chain = ihu_send_iap_sw_inventory_report &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_l3iap_sw_inventory_timeout
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_l3iap_init
</UL>

<P><STRONG><a name="[130]"></a>ihu_send_iap_sw_package_report</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, l3iap.o(i.ihu_send_iap_sw_package_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360<LI>Call Chain = ihu_send_iap_sw_package_report &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_l3iap_sw_package_timeout
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_l3iap_sw_package_confirm
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_l3iap_sw_inventory_confirm
</UL>

<P><STRONG><a name="[c0]"></a>ihu_sleep</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, vmfreeoslayer.o(i.ihu_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ihu_sleep &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmProcessingLaunch
</UL>

<P><STRONG><a name="[151]"></a>ihu_system_task_init_call</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, vmfreeoslayer.o(i.ihu_system_task_init_call))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = ihu_system_task_init_call &rArr; ihu_task_create_and_run &rArr; FsmAddNew &rArr; FsmSetState &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_task_create_and_run
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_task_create_all
</UL>

<P><STRONG><a name="[153]"></a>ihu_task_create</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, vmfreeoslayer.o(i.ihu_task_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = ihu_task_create &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strerror
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_task_create_and_run
</UL>

<P><STRONG><a name="[155]"></a>ihu_task_create_all</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, vmfreeoslayer.o(i.ihu_task_create_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368<LI>Call Chain = ihu_task_create_all &rArr; ihu_vm_send_init_msg_to_app_task &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vm_send_init_msg_to_app_task
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_system_task_init_call
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vm_main
</UL>

<P><STRONG><a name="[152]"></a>ihu_task_create_and_run</STRONG> (Thumb, 306 bytes, Stack size 32 bytes, vmfreeoslayer.o(i.ihu_task_create_and_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = ihu_task_create_and_run &rArr; FsmAddNew &rArr; FsmSetState &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_task_create
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_queue_create
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmAddNew
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_system_task_init_call
</UL>

<P><STRONG><a name="[14c]"></a>ihu_taskid_to_string</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, vmfreeoslayer.o(i.ihu_taskid_to_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = ihu_taskid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
</UL>

<P><STRONG><a name="[126]"></a>ihu_timer_start</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, l1timer_freeos.o(i.ihu_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = ihu_timer_start &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_init
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ledpisces_init
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_canvela_init
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_l3iap_init
</UL>

<P><STRONG><a name="[14e]"></a>ihu_timerid_to_string</STRONG> (Thumb, 114 bytes, Stack size 56 bytes, vmfreeoslayer.o(i.ihu_timerid_to_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = ihu_timerid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
</UL>

<P><STRONG><a name="[124]"></a>ihu_usleep</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, vmfreeoslayer.o(i.ihu_usleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ihu_usleep &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_timer_init
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_init
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ledpisces_init
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_canvela_init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_rcv
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_l3iap_init
</UL>

<P><STRONG><a name="[157]"></a>ihu_vm_main</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, vmfreeoslayer.o(i.ihu_vm_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1376<LI>Call Chain = ihu_vm_main &rArr; ihu_task_create_all &rArr; ihu_vm_send_init_msg_to_app_task &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vm_system_ctr_table_init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_task_create_all
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[156]"></a>ihu_vm_send_init_msg_to_app_task</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, vmfreeoslayer.o(i.ihu_vm_send_init_msg_to_app_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352<LI>Call Chain = ihu_vm_send_init_msg_to_app_task &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_task_create_all
</UL>

<P><STRONG><a name="[158]"></a>ihu_vm_system_ctr_table_init</STRONG> (Thumb, 1480 bytes, Stack size 56 bytes, vmfreeoslayer.o(i.ihu_vm_system_ctr_table_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = ihu_vm_system_ctr_table_init &rArr; FsmInit &rArr; IhuDebugPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_f2board_equid_get
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmInit
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vm_main
</UL>

<P><STRONG><a name="[85]"></a>main</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1376<LI>Call Chain = main &rArr; ihu_vm_main &rArr; ihu_task_create_all &rArr; ihu_vm_send_init_msg_to_app_task &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vm_main
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_led_work_state_f2board_on
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_led_commu_f2board_on
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN1_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Receive_IT
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[113]"></a>osDelay</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cmsis_os.o(i.osDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTask02
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
</UL>

<P><STRONG><a name="[15c]"></a>osKernelStart</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmsis_os.o(i.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = osKernelStart &rArr; vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[142]"></a>osKernelSysTick</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cmsis_os.o(i.osKernelSysTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osKernelSysTick &rArr; xTaskGetTickCountFromISR &rArr; vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_iap_write_flash
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_iap_erase_flash_block
</UL>

<P><STRONG><a name="[10e]"></a>osMessageCreate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cmsis_os.o(i.osMessageCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = osMessageCreate &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
</UL>

<P><STRONG><a name="[115]"></a>osSystickHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cmsis_os.o(i.osSystickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osSystickHandler &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[10d]"></a>osThreadCreate</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, cmsis_os.o(i.osThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = osThreadCreate &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeFreeRtosPriority
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
</UL>

<P><STRONG><a name="[10b]"></a>osTimerCreate</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, cmsis_os.o(i.osTimerCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = osTimerCreate &rArr; xTimerCreate &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
</UL>

<P><STRONG><a name="[180]"></a>pvPortMalloc</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationMallocFailedHook
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
</UL>

<P><STRONG><a name="[199]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tasks.o(i.pvTaskIncrementMutexHeldCount))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[19e]"></a>pxPortInitialiseStack</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[16e]"></a>uxListRemove</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[174]"></a>vApplicationIdleHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, freertos.o(i.vApplicationIdleHook))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[183]"></a>vApplicationMallocFailedHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, freertos.o(i.vApplicationMallocFailedHook))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[194]"></a>vApplicationStackOverflowHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, freertos.o(i.vApplicationStackOverflowHook))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[1a0]"></a>vApplicationTickHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, freertos.o(i.vApplicationTickHook))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[167]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[19d]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
</UL>

<P><STRONG><a name="[164]"></a>vListInsert</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>

<P><STRONG><a name="[18d]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[166]"></a>vPortEnterCritical</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[169]"></a>vPortExitCritical</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortClearInterruptMask
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[16f]"></a>vPortFree</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[195]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortSetupTimerInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[176]"></a>vPortSuppressTicksAndSleep</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, port.o(i.vPortSuppressTicksAndSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vPortSuppressTicksAndSleep &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreSleepProcessing
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostSleepProcessing
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStepTick
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskConfirmSleepModeStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[189]"></a>vPortValidateInterruptPriority</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, port.o(i.vPortValidateInterruptPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortGetIPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
</UL>

<P><STRONG><a name="[173]"></a>vPortYield</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, port.o(i.vPortYield))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[168]"></a>vQueueAddToRegistry</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, queue.o(i.vQueueAddToRegistry))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vQueueAddToRegistry
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[17b]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, queue.o(i.vQueueWaitForMessageRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[150]"></a>vTaskDelay</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_usleep
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_sleep
</UL>

<P><STRONG><a name="[17f]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[18c]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[18b]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventListRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[18e]"></a>vTaskPriorityInherit</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, tasks.o(i.vTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[18f]"></a>vTaskSetTimeOutState</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tasks.o(i.vTaskSetTimeOutState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vTaskSetTimeOutState
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
</UL>

<P><STRONG><a name="[15d]"></a>vTaskStartScheduler</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureTimerForRunTimeStats
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[188]"></a>vTaskStepTick</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tasks.o(i.vTaskStepTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vTaskStepTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
</UL>

<P><STRONG><a name="[16c]"></a>vTaskSuspendAll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[96]"></a>vTaskSwitchContext</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRunTimeCounterValue
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[192]"></a>xPortStartScheduler</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xPortStartScheduler &rArr; vPortSetupTimerInterrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[161]"></a>xPortSysTickHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, port.o(i.xPortSysTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortClearInterruptMask
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSystickHandler
</UL>

<P><STRONG><a name="[159]"></a>xQueueCreateMutex</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, queue.o(i.xQueueCreateMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vm_system_ctr_table_init
</UL>

<P><STRONG><a name="[147]"></a>xQueueGenericCreate</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageCreate
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_queue_create
</UL>

<P><STRONG><a name="[14a]"></a>xQueueGenericReceive</STRONG> (Thumb, 302 bytes, Stack size 48 bytes, queue.o(i.xQueueGenericReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_rcv
</UL>

<P><STRONG><a name="[198]"></a>xQueueGenericReset</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[14b]"></a>xQueueGenericSend</STRONG> (Thumb, 276 bytes, Stack size 48 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[19b]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, queue.o(i.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortClearInterruptMask
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[103]"></a>xQueueGiveMutexRecursive</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, queue.o(i.xQueueGiveMutexRecursive))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
</UL>

<P><STRONG><a name="[101]"></a>xQueueTakeMutexRecursive</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, queue.o(i.xQueueTakeMutexRecursive))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
</UL>

<P><STRONG><a name="[19a]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskCheckForTimeOut &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[154]"></a>xTaskGenericCreate</STRONG> (Thumb, 388 bytes, Stack size 56 bytes, tasks.o(i.xTaskGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_task_create
</UL>

<P><STRONG><a name="[19c]"></a>xTaskGetCurrentTaskHandle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetCurrentTaskHandle))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
</UL>

<P><STRONG><a name="[160]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSystickHandler
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[139]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_timer_init
</UL>

<P><STRONG><a name="[15f]"></a>xTaskGetTickCountFromISR</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tasks.o(i.xTaskGetTickCountFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskGetTickCountFromISR &rArr; vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
</UL>

<P><STRONG><a name="[197]"></a>xTaskIncrementTick</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationTickHook
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[172]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[17e]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[16d]"></a>xTaskResumeAll</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[137]"></a>xTimerCreate</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, timers.o(i.xTimerCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = xTimerCreate &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerCreate
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_timer_init
</UL>

<P><STRONG><a name="[190]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, timers.o(i.xTimerCreateTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = xTimerCreateTimerTask &rArr; xTaskGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[13a]"></a>xTimerGenericCommand</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, timers.o(i.xTimerGenericCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_timer_init
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[af]"></a>FLASH_Program_Byte</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f2xx_hal_flash.o(i.FLASH_Program_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_Program_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[b0]"></a>FLASH_Program_DoubleWord</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f2xx_hal_flash.o(i.FLASH_Program_DoubleWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_Program_DoubleWord
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[b1]"></a>FLASH_Program_HalfWord</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f2xx_hal_flash.o(i.FLASH_Program_HalfWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_Program_HalfWord
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[b2]"></a>FLASH_Program_Word</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f2xx_hal_flash.o(i.FLASH_Program_Word))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_Program_Word
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[b5]"></a>FLASH_SetErrorCode</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, stm32f2xx_hal_flash.o(i.FLASH_SetErrorCode))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[a8]"></a>CAN_Receive_IT</STRONG> (Thumb, 296 bytes, Stack size 8 bytes, stm32f2xx_hal_can.o(i.CAN_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[aa]"></a>CAN_Transmit_IT</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, stm32f2xx_hal_can.o(i.CAN_Transmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_Transmit_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[88]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f2xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f2xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[f1]"></a>UART_EndRxTransfer</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f2xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[f0]"></a>UART_Receive_IT</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, stm32f2xx_hal_uart.o(i.UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_Receive_IT &rArr; HAL_UART_RxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[f8]"></a>UART_SetConfig</STRONG> (Thumb, 762 bytes, Stack size 24 bytes, stm32f2xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[f4]"></a>UART_Transmit_IT</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, stm32f2xx_hal_uart.o(i.UART_Transmit_IT))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[fc]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, stm32f2xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[d5]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f2xx_hal_cortex.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[163]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[16b]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[175]"></a>prvGetExpectedIdleTime</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tasks.o(i.prvGetExpectedIdleTime))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[8f]"></a>prvIdleTask</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationIdleHook
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetExpectedIdleTime
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[19f]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[15e]"></a>inHandlerMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cmsis_os.o(i.inHandlerMode))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
</UL>

<P><STRONG><a name="[162]"></a>makeFreeRtosPriority</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cmsis_os.o(i.makeFreeRtosPriority))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>

<P><STRONG><a name="[165]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, timers.o(i.prvCheckForValidListAndQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
</UL>

<P><STRONG><a name="[177]"></a>prvInsertTimerInActiveList</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, timers.o(i.prvInsertTimerInActiveList))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[178]"></a>prvProcessReceivedCommands</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, timers.o(i.prvProcessReceivedCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[17a]"></a>prvProcessTimerOrBlockTask</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, timers.o(i.prvProcessTimerOrBlockTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = prvProcessTimerOrBlockTask &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[179]"></a>prvSampleTimeNow</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, timers.o(i.prvSampleTimeNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[17c]"></a>prvSwitchTimerLists</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, timers.o(i.prvSwitchTimerLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[90]"></a>prvTimerTask</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, timers.o(i.prvTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = prvTimerTask &rArr; prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(i.xTimerCreateTimerTask)
</UL>
<P><STRONG><a name="[8e]"></a>prvTaskExitError</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[181]"></a>prvHeapInit</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[182]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[170]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvCopyDataFromQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[171]"></a>prvCopyDataToQueue</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[17d]"></a>prvUnlockQueue</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[11e]"></a>_fp_digits</STRONG> (Thumb, 334 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[11a]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[121]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[120]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[8a]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0snprintf)
<LI> printfa.o(i.__0vsnprintf)
</UL>
<P><STRONG><a name="[8b]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>

<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [PrjCclFo@207VG\PrjCclFo@207VG.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image PrjCclFo@207VG\PrjCclFo@207VG.axf</H1><HR>
<<<<<<< HEAD
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060061: Last Updated: Thu Jul 06 20:41:49 2017
=======
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060061: Last Updated: Wed Jul 05 01:07:15 2017
>>>>>>> a8d5d2f373703188dfcdbe8ff96d3912fad5680a
<BR><P>
<H3>Maximum Stack Usage =       2816 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
fsm_spsvirgo_ccl_event_report_send &rArr; func_cloud_standard_xml_unpack &rArr; func_cloud_spsvirgo_ccl_msg_ccl_state_confirm_received_handle &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[89]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[89]">ADC_IRQHandler</a><BR>
 <LI><a href="#[71]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[71]">BusFault_Handler</a><BR>
 <LI><a href="#[6f]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6f]">HardFault_Handler</a><BR>
 <LI><a href="#[70]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[70]">MemManage_Handler</a><BR>
 <LI><a href="#[110]">Error_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[110]">Error_Handler</a><BR>
 <LI><a href="#[dd]">StartTask02</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[dd]">StartTask02</a><BR>
 <LI><a href="#[72]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[72]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[89]">ADC_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[71]">BusFault_Handler</a> from stm32f2xx_it.o(i.BusFault_Handler) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[8b]">CAN1_RX0_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[8c]">CAN1_RX1_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[8d]">CAN1_SCE_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[8a]">CAN1_TX_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[b7]">CAN2_RX0_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[b8]">CAN2_RX1_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[b9]">CAN2_SCE_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[b6]">CAN2_TX_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[db]">Callback01</a> from freertos.o(i.Callback01) referenced from freertos.o(.constdata)
 <LI><a href="#[c5]">DCMI_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[82]">DMA1_Stream0_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[83]">DMA1_Stream1_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[84]">DMA1_Stream2_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[85]">DMA1_Stream3_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[86]">DMA1_Stream4_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[87]">DMA1_Stream5_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[88]">DMA1_Stream6_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[a6]">DMA1_Stream7_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[af]">DMA2_Stream0_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[b0]">DMA2_Stream1_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[b1]">DMA2_Stream2_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[b2]">DMA2_Stream3_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[b3]">DMA2_Stream4_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[bb]">DMA2_Stream5_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[bc]">DMA2_Stream6_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[bd]">DMA2_Stream7_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[74]">DebugMon_Handler</a> from stm32f2xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[b4]">ETH_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[b5]">ETH_WKUP_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[7d]">EXTI0_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[9f]">EXTI15_10_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[7e]">EXTI1_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[7f]">EXTI2_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[80]">EXTI3_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[81]">EXTI4_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[8e]">EXTI9_5_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[7b]">FLASH_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[a7]">FSMC_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[d7]">FsmProcessingLaunch</a> from vmfreeoslayer.o(i.FsmProcessingLaunch) referenced from vmfreeoslayer.o(i.ihu_task_create_and_run)
 <LI><a href="#[c6]">HASH_RNG_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[6f]">HardFault_Handler</a> from stm32f2xx_it.o(i.HardFault_Handler) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[97]">I2C1_ER_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[96]">I2C1_EV_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[99]">I2C2_ER_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[98]">I2C2_EV_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[c0]">I2C3_ER_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[bf]">I2C3_EV_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[70]">MemManage_Handler</a> from stm32f2xx_it.o(i.MemManage_Handler) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[6e]">NMI_Handler</a> from stm32f2xx_it.o(i.NMI_Handler) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[ba]">OTG_FS_IRQHandler</a> from stm32f2xx_it.o(i.OTG_FS_IRQHandler) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[a1]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[c2]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[c1]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[c4]">OTG_HS_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[c3]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[78]">PVD_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[75]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[7c]">RCC_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[a0]">RTC_Alarm_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[7a]">RTC_WKUP_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[6d]">Reset_Handler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[a8]">SDIO_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[9a]">SPI1_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[9b]">SPI2_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[aa]">SPI3_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[cc]">SPI_2linesRxISR_16BIT</a> from stm32f2xx_hal_spi.o(i.SPI_2linesRxISR_16BIT) referenced from stm32f2xx_hal_spi.o(i.HAL_SPI_TransmitReceive_IT)
 <LI><a href="#[ce]">SPI_2linesRxISR_8BIT</a> from stm32f2xx_hal_spi.o(i.SPI_2linesRxISR_8BIT) referenced from stm32f2xx_hal_spi.o(i.HAL_SPI_TransmitReceive_IT)
 <LI><a href="#[cd]">SPI_2linesTxISR_16BIT</a> from stm32f2xx_hal_spi.o(i.SPI_2linesTxISR_16BIT) referenced from stm32f2xx_hal_spi.o(i.HAL_SPI_TransmitReceive_IT)
 <LI><a href="#[cf]">SPI_2linesTxISR_8BIT</a> from stm32f2xx_hal_spi.o(i.SPI_2linesTxISR_8BIT) referenced from stm32f2xx_hal_spi.o(i.HAL_SPI_TransmitReceive_IT)
 <LI><a href="#[ca]">SPI_RxISR_16BIT</a> from stm32f2xx_hal_spi.o(i.SPI_RxISR_16BIT) referenced from stm32f2xx_hal_spi.o(i.HAL_SPI_Receive_IT)
 <LI><a href="#[cb]">SPI_RxISR_8BIT</a> from stm32f2xx_hal_spi.o(i.SPI_RxISR_8BIT) referenced from stm32f2xx_hal_spi.o(i.HAL_SPI_Receive_IT)
 <LI><a href="#[73]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[dc]">StartDefaultTask</a> from freertos.o(i.StartDefaultTask) referenced from freertos.o(.constdata)
 <LI><a href="#[dd]">StartTask02</a> from freertos.o(i.StartTask02) referenced from freertos.o(.constdata)
 <LI><a href="#[76]">SysTick_Handler</a> from stm32f2xx_it.o(i.SysTick_Handler) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[c8]">SystemInit</a> from system_stm32f2xx.o(i.SystemInit) referenced from startup_stm32f207xx.o(.text)
 <LI><a href="#[79]">TAMP_STAMP_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[8f]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[92]">TIM1_CC_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[91]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[90]">TIM1_UP_TIM10_IRQHandler</a> from stm32f2xx_it.o(i.TIM1_UP_TIM10_IRQHandler) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[93]">TIM2_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[94]">TIM3_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[95]">TIM4_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[a9]">TIM5_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[ad]">TIM6_DAC_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[ae]">TIM7_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[a2]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[a5]">TIM8_CC_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[a4]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[a3]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[ab]">UART4_IRQHandler</a> from stm32f2xx_it.o(i.UART4_IRQHandler) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[ac]">UART5_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[d0]">UART_DMAAbortOnError</a> from stm32f2xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32f2xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[9c]">USART1_IRQHandler</a> from stm32f2xx_it.o(i.USART1_IRQHandler) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[9d]">USART2_IRQHandler</a> from stm32f2xx_it.o(i.USART2_IRQHandler) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[9e]">USART3_IRQHandler</a> from stm32f2xx_it.o(i.USART3_IRQHandler) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[be]">USART6_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[56]">USBH_AUDIO_ClassRequest</a> from usbh_audio.o(i.USBH_AUDIO_ClassRequest) referenced 2 times from usbh_audio.o(.data)
 <LI><a href="#[55]">USBH_AUDIO_InterfaceDeInit</a> from usbh_audio.o(i.USBH_AUDIO_InterfaceDeInit) referenced 2 times from usbh_audio.o(.data)
 <LI><a href="#[54]">USBH_AUDIO_InterfaceInit</a> from usbh_audio.o(i.USBH_AUDIO_InterfaceInit) referenced 2 times from usbh_audio.o(.data)
 <LI><a href="#[57]">USBH_AUDIO_Process</a> from usbh_audio.o(i.USBH_AUDIO_Process) referenced 2 times from usbh_audio.o(.data)
 <LI><a href="#[58]">USBH_AUDIO_SOFProcess</a> from usbh_audio.o(i.USBH_AUDIO_SOFProcess) referenced 2 times from usbh_audio.o(.data)
 <LI><a href="#[5b]">USBH_CDC_ClassRequest</a> from usbh_cdc.o(i.USBH_CDC_ClassRequest) referenced 2 times from usbh_cdc.o(.data)
 <LI><a href="#[5a]">USBH_CDC_InterfaceDeInit</a> from usbh_cdc.o(i.USBH_CDC_InterfaceDeInit) referenced 2 times from usbh_cdc.o(.data)
 <LI><a href="#[59]">USBH_CDC_InterfaceInit</a> from usbh_cdc.o(i.USBH_CDC_InterfaceInit) referenced 2 times from usbh_cdc.o(.data)
 <LI><a href="#[5c]">USBH_CDC_Process</a> from usbh_cdc.o(i.USBH_CDC_Process) referenced 2 times from usbh_cdc.o(.data)
 <LI><a href="#[5d]">USBH_CDC_SOFProcess</a> from usbh_cdc.o(i.USBH_CDC_SOFProcess) referenced 2 times from usbh_cdc.o(.data)
 <LI><a href="#[6a]">USBH_HID_ClassRequest</a> from usbh_hid.o(i.USBH_HID_ClassRequest) referenced 2 times from usbh_hid.o(.data)
 <LI><a href="#[69]">USBH_HID_InterfaceDeInit</a> from usbh_hid.o(i.USBH_HID_InterfaceDeInit) referenced 2 times from usbh_hid.o(.data)
 <LI><a href="#[68]">USBH_HID_InterfaceInit</a> from usbh_hid.o(i.USBH_HID_InterfaceInit) referenced 2 times from usbh_hid.o(.data)
 <LI><a href="#[d2]">USBH_HID_KeybdInit</a> from usbh_hid_keybd.o(i.USBH_HID_KeybdInit) referenced from usbh_hid.o(i.USBH_HID_InterfaceInit)
 <LI><a href="#[d3]">USBH_HID_MouseInit</a> from usbh_hid_mouse.o(i.USBH_HID_MouseInit) referenced from usbh_hid.o(i.USBH_HID_InterfaceInit)
 <LI><a href="#[6b]">USBH_HID_Process</a> from usbh_hid.o(i.USBH_HID_Process) referenced 2 times from usbh_hid.o(.data)
 <LI><a href="#[6c]">USBH_HID_SOFProcess</a> from usbh_hid.o(i.USBH_HID_SOFProcess) referenced 2 times from usbh_hid.o(.data)
 <LI><a href="#[65]">USBH_MSC_ClassRequest</a> from usbh_msc.o(i.USBH_MSC_ClassRequest) referenced 2 times from usbh_msc.o(.data)
 <LI><a href="#[64]">USBH_MSC_InterfaceDeInit</a> from usbh_msc.o(i.USBH_MSC_InterfaceDeInit) referenced 2 times from usbh_msc.o(.data)
 <LI><a href="#[63]">USBH_MSC_InterfaceInit</a> from usbh_msc.o(i.USBH_MSC_InterfaceInit) referenced 2 times from usbh_msc.o(.data)
 <LI><a href="#[66]">USBH_MSC_Process</a> from usbh_msc.o(i.USBH_MSC_Process) referenced 2 times from usbh_msc.o(.data)
 <LI><a href="#[67]">USBH_MSC_SOFProcess</a> from usbh_msc.o(i.USBH_MSC_SOFProcess) referenced 2 times from usbh_msc.o(.data)
 <LI><a href="#[60]">USBH_MTP_ClassRequest</a> from usbh_mtp.o(i.USBH_MTP_ClassRequest) referenced 2 times from usbh_mtp.o(.data)
 <LI><a href="#[5f]">USBH_MTP_InterfaceDeInit</a> from usbh_mtp.o(i.USBH_MTP_InterfaceDeInit) referenced 2 times from usbh_mtp.o(.data)
 <LI><a href="#[5e]">USBH_MTP_InterfaceInit</a> from usbh_mtp.o(i.USBH_MTP_InterfaceInit) referenced 2 times from usbh_mtp.o(.data)
 <LI><a href="#[61]">USBH_MTP_Process</a> from usbh_mtp.o(i.USBH_MTP_Process) referenced 2 times from usbh_mtp.o(.data)
 <LI><a href="#[62]">USBH_MTP_SOFProcess</a> from usbh_mtp.o(i.USBH_MTP_SOFProcess) referenced 2 times from usbh_mtp.o(.data)
 <LI><a href="#[de]">USBH_Process_OS</a> from usbh_core.o(i.USBH_Process_OS) referenced from usbh_core.o(.constdata)
 <LI><a href="#[d1]">USBH_UserProcess</a> from usb_host.o(i.USBH_UserProcess) referenced from usb_host.o(i.MX_USB_HOST_Init)
 <LI><a href="#[72]">UsageFault_Handler</a> from stm32f2xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[77]">WWDG_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[c9]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f207xx.o(.text)
 <LI><a href="#[d4]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0snprintf)
 <LI><a href="#[d4]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[d5]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[d]">fsm_adclibra_init</a> from l2adclibra.o(i.fsm_adclibra_init) referenced 4 times from l2adclibra.o(.data)
 <LI><a href="#[10]">fsm_adclibra_restart</a> from l2adclibra.o(i.fsm_adclibra_restart) referenced 2 times from l2adclibra.o(.data)
 <LI><a href="#[f]">fsm_adclibra_stop_rcv</a> from l2adclibra.o(i.fsm_adclibra_stop_rcv) referenced 2 times from l2adclibra.o(.data)
 <LI><a href="#[c]">fsm_adclibra_task_entry</a> from l2adclibra.o(i.fsm_adclibra_task_entry) referenced 2 times from l2adclibra.o(.data)
 <LI><a href="#[11]">fsm_adclibra_time_out</a> from l2adclibra.o(i.fsm_adclibra_time_out) referenced 2 times from l2adclibra.o(.data)
 <LI><a href="#[4b]">fsm_ccl_dcmi_sensor_status_resp</a> from l3ccl.o(i.fsm_ccl_dcmi_sensor_status_resp) referenced 2 times from l3ccl.o(.data)
 <LI><a href="#[4f]">fsm_ccl_dido_door_open_event</a> from l3ccl.o(i.fsm_ccl_dido_door_open_event) referenced 2 times from l3ccl.o(.data)
 <LI><a href="#[48]">fsm_ccl_dido_sensor_status_resp</a> from l3ccl.o(i.fsm_ccl_dido_sensor_status_resp) referenced 2 times from l3ccl.o(.data)
 <LI><a href="#[51]">fsm_ccl_door_close_event</a> from l3ccl.o(i.fsm_ccl_door_close_event) referenced 2 times from l3ccl.o(.data)
 <LI><a href="#[52]">fsm_ccl_fault_state_trigger</a> from l3ccl.o(i.fsm_ccl_fault_state_trigger) referenced 2 times from l3ccl.o(.data)
 <LI><a href="#[4d]">fsm_ccl_hand_active_trigger_to_work</a> from l3ccl.o(i.fsm_ccl_hand_active_trigger_to_work) referenced 2 times from l3ccl.o(.data)
 <LI><a href="#[4a]">fsm_ccl_i2c_sensor_status_resp</a> from l3ccl.o(i.fsm_ccl_i2c_sensor_status_resp) referenced 2 times from l3ccl.o(.data)
 <LI><a href="#[43]">fsm_ccl_init</a> from l3ccl.o(i.fsm_ccl_init) referenced 4 times from l3ccl.o(.data)
 <LI><a href="#[47]">fsm_ccl_period_report_trigger</a> from l3ccl.o(i.fsm_ccl_period_report_trigger) referenced 2 times from l3ccl.o(.data)
 <LI><a href="#[45]">fsm_ccl_restart</a> from l3ccl.o(i.fsm_ccl_restart) referenced 2 times from l3ccl.o(.data)
 <LI><a href="#[50]">fsm_ccl_sps_close_door_report_cfm</a> from l3ccl.o(i.fsm_ccl_sps_close_door_report_cfm) referenced 4 times from l3ccl.o(.data)
 <LI><a href="#[4e]">fsm_ccl_sps_cloud_fb</a> from l3ccl.o(i.fsm_ccl_sps_cloud_fb) referenced 2 times from l3ccl.o(.data)
 <LI><a href="#[4c]">fsm_ccl_sps_event_report_cfm</a> from l3ccl.o(i.fsm_ccl_sps_event_report_cfm) referenced 2 times from l3ccl.o(.data)
 <LI><a href="#[53]">fsm_ccl_sps_fault_report_cfm</a> from l3ccl.o(i.fsm_ccl_sps_fault_report_cfm) referenced 2 times from l3ccl.o(.data)
 <LI><a href="#[49]">fsm_ccl_sps_sensor_status_resp</a> from l3ccl.o(i.fsm_ccl_sps_sensor_status_resp) referenced 2 times from l3ccl.o(.data)
 <LI><a href="#[44]">fsm_ccl_stop_rcv</a> from l3ccl.o(i.fsm_ccl_stop_rcv) referenced 2 times from l3ccl.o(.data)
 <LI><a href="#[42]">fsm_ccl_task_entry</a> from l3ccl.o(i.fsm_ccl_task_entry) referenced 2 times from l3ccl.o(.data)
 <LI><a href="#[46]">fsm_ccl_time_out</a> from l3ccl.o(i.fsm_ccl_time_out) referenced 2 times from l3ccl.o(.data)
 <LI><a href="#[3]">fsm_com_do_nothing</a> from vmfreeoslayer.o(i.fsm_com_do_nothing) referenced 60 times from l1timer_freeos.o(.data)
 <LI><a href="#[e]">fsm_com_heart_beat_rcv</a> from vmfreeoslayer.o(i.fsm_com_heart_beat_rcv) referenced 14 times from l2adclibra.o(.data)
 <LI><a href="#[41]">fsm_dcmiaris_ccl_sensor_status_req</a> from l2dcmiaris.o(i.fsm_dcmiaris_ccl_sensor_status_req) referenced 2 times from l2dcmiaris.o(.data)
 <LI><a href="#[3d]">fsm_dcmiaris_init</a> from l2dcmiaris.o(i.fsm_dcmiaris_init) referenced 4 times from l2dcmiaris.o(.data)
 <LI><a href="#[3f]">fsm_dcmiaris_restart</a> from l2dcmiaris.o(i.fsm_dcmiaris_restart) referenced 2 times from l2dcmiaris.o(.data)
 <LI><a href="#[3e]">fsm_dcmiaris_stop_rcv</a> from l2dcmiaris.o(i.fsm_dcmiaris_stop_rcv) referenced 2 times from l2dcmiaris.o(.data)
 <LI><a href="#[3c]">fsm_dcmiaris_task_entry</a> from l2dcmiaris.o(i.fsm_dcmiaris_task_entry) referenced 2 times from l2dcmiaris.o(.data)
 <LI><a href="#[40]">fsm_dcmiaris_time_out</a> from l2dcmiaris.o(i.fsm_dcmiaris_time_out) referenced 2 times from l2dcmiaris.o(.data)
 <LI><a href="#[19]">fsm_didocap_ccl_door_close_req</a> from l2didocap.o(i.fsm_didocap_ccl_door_close_req) referenced 2 times from l2didocap.o(.data)
 <LI><a href="#[18]">fsm_didocap_ccl_door_open_req</a> from l2didocap.o(i.fsm_didocap_ccl_door_open_req) referenced 2 times from l2didocap.o(.data)
 <LI><a href="#[17]">fsm_didocap_ccl_sensor_status_req</a> from l2didocap.o(i.fsm_didocap_ccl_sensor_status_req) referenced 2 times from l2didocap.o(.data)
 <LI><a href="#[13]">fsm_didocap_init</a> from l2didocap.o(i.fsm_didocap_init) referenced 4 times from l2didocap.o(.data)
 <LI><a href="#[15]">fsm_didocap_restart</a> from l2didocap.o(i.fsm_didocap_restart) referenced 2 times from l2didocap.o(.data)
 <LI><a href="#[14]">fsm_didocap_stop_rcv</a> from l2didocap.o(i.fsm_didocap_stop_rcv) referenced 2 times from l2didocap.o(.data)
 <LI><a href="#[12]">fsm_didocap_task_entry</a> from l2didocap.o(i.fsm_didocap_task_entry) referenced 2 times from l2didocap.o(.data)
 <LI><a href="#[16]">fsm_didocap_time_out</a> from l2didocap.o(i.fsm_didocap_time_out) referenced 2 times from l2didocap.o(.data)
 <LI><a href="#[1f]">fsm_i2caries_ccl_sensor_status_req</a> from l2i2caries.o(i.fsm_i2caries_ccl_sensor_status_req) referenced 2 times from l2i2caries.o(.data)
 <LI><a href="#[1b]">fsm_i2caries_init</a> from l2i2caries.o(i.fsm_i2caries_init) referenced 4 times from l2i2caries.o(.data)
 <LI><a href="#[1d]">fsm_i2caries_restart</a> from l2i2caries.o(i.fsm_i2caries_restart) referenced 2 times from l2i2caries.o(.data)
 <LI><a href="#[1c]">fsm_i2caries_stop_rcv</a> from l2i2caries.o(i.fsm_i2caries_stop_rcv) referenced 2 times from l2i2caries.o(.data)
 <LI><a href="#[1a]">fsm_i2caries_task_entry</a> from l2i2caries.o(i.fsm_i2caries_task_entry) referenced 2 times from l2i2caries.o(.data)
 <LI><a href="#[1e]">fsm_i2caries_time_out</a> from l2i2caries.o(i.fsm_i2caries_time_out) referenced 2 times from l2i2caries.o(.data)
 <LI><a href="#[21]">fsm_ledpisces_init</a> from l2ledpisces.o(i.fsm_ledpisces_init) referenced 4 times from l2ledpisces.o(.data)
 <LI><a href="#[23]">fsm_ledpisces_restart</a> from l2ledpisces.o(i.fsm_ledpisces_restart) referenced 4 times from l2ledpisces.o(.data)
 <LI><a href="#[22]">fsm_ledpisces_stop_rcv</a> from l2ledpisces.o(i.fsm_ledpisces_stop_rcv) referenced 4 times from l2ledpisces.o(.data)
 <LI><a href="#[20]">fsm_ledpisces_task_entry</a> from l2ledpisces.o(i.fsm_ledpisces_task_entry) referenced 2 times from l2ledpisces.o(.data)
 <LI><a href="#[24]">fsm_ledpisces_time_out</a> from l2ledpisces.o(i.fsm_ledpisces_time_out) referenced 2 times from l2ledpisces.o(.data)
 <LI><a href="#[3b]">fsm_spsvirgo_ccl_close_door_report_send</a> from l2spsvirgo.o(i.fsm_spsvirgo_ccl_close_door_report_send) referenced 2 times from l2spsvirgo.o(.data)
 <LI><a href="#[39]">fsm_spsvirgo_ccl_event_report_send</a> from l2spsvirgo.o(i.fsm_spsvirgo_ccl_event_report_send) referenced 2 times from l2spsvirgo.o(.data)
 <LI><a href="#[3a]">fsm_spsvirgo_ccl_fault_report_send</a> from l2spsvirgo.o(i.fsm_spsvirgo_ccl_fault_report_send) referenced 2 times from l2spsvirgo.o(.data)
 <LI><a href="#[37]">fsm_spsvirgo_ccl_open_auth_inq</a> from l2spsvirgo.o(i.fsm_spsvirgo_ccl_open_auth_inq) referenced 2 times from l2spsvirgo.o(.data)
 <LI><a href="#[38]">fsm_spsvirgo_ccl_sensor_status_req</a> from l2spsvirgo.o(i.fsm_spsvirgo_ccl_sensor_status_req) referenced 2 times from l2spsvirgo.o(.data)
 <LI><a href="#[32]">fsm_spsvirgo_init</a> from l2spsvirgo.o(i.fsm_spsvirgo_init) referenced 4 times from l2spsvirgo.o(.data)
 <LI><a href="#[36]">fsm_spsvirgo_l2frame_rcv</a> from l2spsvirgo.o(i.fsm_spsvirgo_l2frame_rcv) referenced 2 times from l2spsvirgo.o(.data)
 <LI><a href="#[34]">fsm_spsvirgo_restart</a> from l2spsvirgo.o(i.fsm_spsvirgo_restart) referenced 4 times from l2spsvirgo.o(.data)
 <LI><a href="#[33]">fsm_spsvirgo_stop_rcv</a> from l2spsvirgo.o(i.fsm_spsvirgo_stop_rcv) referenced 4 times from l2spsvirgo.o(.data)
 <LI><a href="#[31]">fsm_spsvirgo_task_entry</a> from l2spsvirgo.o(i.fsm_spsvirgo_task_entry) referenced 2 times from l2spsvirgo.o(.data)
 <LI><a href="#[35]">fsm_spsvirgo_time_out</a> from l2spsvirgo.o(i.fsm_spsvirgo_time_out) referenced 4 times from l2spsvirgo.o(.data)
 <LI><a href="#[1]">fsm_timer_init</a> from l1timer_freeos.o(i.fsm_timer_init) referenced 2 times from l1timer_freeos.o(.data)
 <LI><a href="#[2]">fsm_timer_restart</a> from l1timer_freeos.o(i.fsm_timer_restart) referenced 4 times from l1timer_freeos.o(.data)
 <LI><a href="#[4]">fsm_timer_stop_rcv</a> from l1timer_freeos.o(i.fsm_timer_stop_rcv) referenced 2 times from l1timer_freeos.o(.data)
 <LI><a href="#[0]">fsm_timer_task_entry</a> from l1timer_freeos.o(i.fsm_timer_task_entry) referenced 2 times from l1timer_freeos.o(.data)
 <LI><a href="#[b]">fsm_vmfo_heart_beat</a> from l1vmfo.o(i.fsm_vmfo_heart_beat) referenced 2 times from l1vmfo.o(.data)
 <LI><a href="#[6]">fsm_vmfo_init</a> from l1vmfo.o(i.fsm_vmfo_init) referenced 2 times from l1vmfo.o(.data)
 <LI><a href="#[a]">fsm_vmfo_init_fb</a> from l1vmfo.o(i.fsm_vmfo_init_fb) referenced 2 times from l1vmfo.o(.data)
 <LI><a href="#[7]">fsm_vmfo_restart</a> from l1vmfo.o(i.fsm_vmfo_restart) referenced 6 times from l1vmfo.o(.data)
 <LI><a href="#[8]">fsm_vmfo_stop_rcv</a> from l1vmfo.o(i.fsm_vmfo_stop_rcv) referenced 4 times from l1vmfo.o(.data)
 <LI><a href="#[5]">fsm_vmfo_task_entry</a> from l1vmfo.o(i.fsm_vmfo_task_entry) referenced 2 times from l1vmfo.o(.data)
 <LI><a href="#[9]">fsm_vmfo_time_out</a> from l1vmfo.o(i.fsm_vmfo_time_out) referenced 2 times from l1vmfo.o(.data)
 <LI><a href="#[d6]">func_timer_routine_handler_1s</a> from l1timer_freeos.o(i.func_timer_routine_handler_1s) referenced from l1timer_freeos.o(i.fsm_timer_init)
 <LI><a href="#[30]">ihu_bsp_stm32_beep_f2board_off</a> from bsp_led.o(i.ihu_bsp_stm32_beep_f2board_off) referenced 14 times from l2ledpisces.o(.data)
 <LI><a href="#[2f]">ihu_bsp_stm32_beep_f2board_on</a> from bsp_led.o(i.ihu_bsp_stm32_beep_f2board_on) referenced 14 times from l2ledpisces.o(.data)
 <LI><a href="#[28]">ihu_bsp_stm32_dido_f2board_lock1_do1_off</a> from bsp_dido.o(i.ihu_bsp_stm32_dido_f2board_lock1_do1_off) referenced 2 times from l2ledpisces.o(.data)
 <LI><a href="#[27]">ihu_bsp_stm32_dido_f2board_lock1_do1_on</a> from bsp_dido.o(i.ihu_bsp_stm32_dido_f2board_lock1_do1_on) referenced 2 times from l2ledpisces.o(.data)
 <LI><a href="#[2a]">ihu_bsp_stm32_dido_f2board_lock2_do1_off</a> from bsp_dido.o(i.ihu_bsp_stm32_dido_f2board_lock2_do1_off) referenced 2 times from l2ledpisces.o(.data)
 <LI><a href="#[29]">ihu_bsp_stm32_dido_f2board_lock2_do1_on</a> from bsp_dido.o(i.ihu_bsp_stm32_dido_f2board_lock2_do1_on) referenced 2 times from l2ledpisces.o(.data)
 <LI><a href="#[2c]">ihu_bsp_stm32_dido_f2board_lock3_do1_off</a> from bsp_dido.o(i.ihu_bsp_stm32_dido_f2board_lock3_do1_off) referenced 2 times from l2ledpisces.o(.data)
 <LI><a href="#[2b]">ihu_bsp_stm32_dido_f2board_lock3_do1_on</a> from bsp_dido.o(i.ihu_bsp_stm32_dido_f2board_lock3_do1_on) referenced 2 times from l2ledpisces.o(.data)
 <LI><a href="#[2e]">ihu_bsp_stm32_dido_f2board_lock4_do1_off</a> from bsp_dido.o(i.ihu_bsp_stm32_dido_f2board_lock4_do1_off) referenced 2 times from l2ledpisces.o(.data)
 <LI><a href="#[2d]">ihu_bsp_stm32_dido_f2board_lock4_do1_on</a> from bsp_dido.o(i.ihu_bsp_stm32_dido_f2board_lock4_do1_on) referenced 2 times from l2ledpisces.o(.data)
 <LI><a href="#[26]">ihu_bsp_stm32_led_f2board_off</a> from bsp_led.o(i.ihu_bsp_stm32_led_f2board_off) referenced 2 times from l2ledpisces.o(.data)
 <LI><a href="#[25]">ihu_bsp_stm32_led_f2board_on</a> from bsp_led.o(i.ihu_bsp_stm32_led_f2board_on) referenced 2 times from l2ledpisces.o(.data)
 <LI><a href="#[c7]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[d9]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[d8]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[da]">prvTimerTask</a> from timers.o(i.prvTimerTask) referenced from timers.o(i.xTimerCreateTimerTask)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[c9]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(.text)
</UL>
<P><STRONG><a name="[39e]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[df]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[102]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[39f]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[3a0]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[3a1]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[3a2]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[3a3]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[73]"></a>SVC_Handler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[395]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[75]"></a>PendSV_Handler</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[362]"></a>ulPortSetInterruptMask</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskExitError
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStepTick
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[383]"></a>vPortClearInterruptMask</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
</UL>

<P><STRONG><a name="[389]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>

<P><STRONG><a name="[6d]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[b7]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[b8]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[b9]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[b6]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[c5]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[a6]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[af]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[b0]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[b1]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[b2]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[b3]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[bb]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[bc]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[bd]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[b4]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[b5]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[a7]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[c6]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[c0]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[bf]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[a1]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[c2]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[c1]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[c4]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[c3]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[a0]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[a8]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[9a]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[aa]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[a9]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[ad]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[ae]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[a2]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[a5]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[a4]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[a3]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[ac]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[be]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[273]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_timer_init
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_blemod_hc05_uart_fetch_mac_addr_in_AT_cmd_mode
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_rsv2_value
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_rsv1_value
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_dcmiaris_ccl_sleep_and_fault_mode_ul_scan_illegal_dcmi_value
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_dcmiaris_ccl_sensor_status_req
</UL>

<P><STRONG><a name="[345]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_blemod_hc05_uart_fetch_mac_addr_in_AT_cmd_mode
</UL>

<P><STRONG><a name="[19c]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_f2board_equid_get
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_rfidmod_mf522_spi_read_id
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_gprsmod_tcp_u8_data_transmit_with_receive
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_gprsmod_http_data_transmit_with_receive
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_time_out
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_init_fb
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_heart_beat
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ledpisces_time_out
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_i2caries_time_out
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_i2caries_ccl_sensor_status_req
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_time_out
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_ccl_sensor_status_req
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_ccl_door_open_req
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_ccl_door_close_req
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_adclibra_time_out
<<<<<<< HEAD
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_cam_ulcdsc03_uart_get_picture
=======
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_cam_ulcdsc03_uart_get_picture
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTP_BufferFullCallback
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_Inquiry
>>>>>>> a8d5d2f373703188dfcdbe8ff96d3912fad5680a
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_time_out
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_sps_sensor_status_resp
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_sps_fault_report_cfm
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_sps_event_report_cfm
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_sps_cloud_fb
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_sps_close_door_report_cfm
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_i2c_sensor_status_resp
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_hand_active_trigger_to_work
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_fault_state_trigger
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_door_close_event
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_dido_sensor_status_resp
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_dido_door_open_event
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_dcmi_sensor_status_resp
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_dcmiaris_time_out
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_dcmiaris_ccl_sensor_status_req
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_time_out
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_l2frame_rcv
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_sensor_status_req
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_open_auth_inq
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_fault_report_send
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_event_report_send
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_close_door_report_send
</UL>

<P><STRONG><a name="[146]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Init
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Init
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_gprsmod_http_data_transmit_with_receive
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_open_auth_inq
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_fault_report_send
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_event_report_send
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_close_door_report_send
</UL>

<P><STRONG><a name="[3a4]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[e3]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAllocateTCBAndStack
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[3a5]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[3a6]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[e2]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_send_AT_command
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_init
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_i2caries_init
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_init
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_adclibra_init
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_pack
<<<<<<< HEAD
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_cam_ulcdsc03_uart_get_picture
=======
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_cam_ulcdsc03_uart_get_picture
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_TestUnitReady
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_RequestSense
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_ReadCapacity
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_Inquiry
>>>>>>> a8d5d2f373703188dfcdbe8ff96d3912fad5680a
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_dcmiaris_init
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_l2frame_rcv
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_init
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_open_auth_inq
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_fault_report_send
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_event_report_send
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_close_door_report_send
</UL>

<P><STRONG><a name="[11a]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vm_system_ctr_table_init
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_timerid_to_string
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_msgid_to_string
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmProcessingLaunch
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_timer_init
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_gprsmod_tcp_u8_data_transmit_with_receive
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_gprsmod_http_data_transmit_with_receive
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_blemod_hc05_uart_fetch_mac_addr_in_AT_cmd_mode
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_i2caries_ccl_sensor_status_req
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_ccl_sensor_status_req
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_pack
<<<<<<< HEAD
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_cam_ulcdsc03_uart_get_picture
=======
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_cam_ulcdsc03_uart_get_picture
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PTP_SendRequest
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_InterfaceInit
>>>>>>> a8d5d2f373703188dfcdbe8ff96d3912fad5680a
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AUDIO_InterfaceInit
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_time_out_lock_work_active
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_sps_sensor_status_resp
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_period_report_trigger
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_init
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_i2c_sensor_status_resp
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_hand_active_trigger_to_work
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_fault_state_trigger
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_dido_sensor_status_resp
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_dcmi_sensor_status_resp
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_dcmiaris_ccl_sensor_status_req
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_l2frame_rcv
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_sensor_status_req
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_open_auth_inq
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_fault_report_send
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_event_report_send
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_close_door_report_send
</UL>

<P><STRONG><a name="[3a7]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[e4]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1ac]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_timerid_to_string
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_taskid_to_string
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_msgid_to_string
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_gprsmod_tcp_u8_data_transmit_with_receive
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_gprsmod_http_data_transmit_with_receive
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_pack
</UL>

<P><STRONG><a name="[2a1]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_gprsmod_http_data_transmit_with_receive
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_gprsmod_get_rssi_value
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_wait_AT_command_fb
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_setup_gprs_session_connection
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_send_AT_command
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_module_info_retrieve
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_gsm_info_retrieve
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_blemod_hc05_uart_fetch_mac_addr_in_AT_cmd_mode
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_blemod_uart_send_AT_command
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
</UL>

<P><STRONG><a name="[2da]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vm_system_ctr_table_init
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_timerid_to_string
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_taskid_to_string
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_msgid_to_string
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_gprsmod_get_rssi_value
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_module_info_retrieve
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_gsm_info_retrieve
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_blemod_hc05_uart_fetch_mac_addr_in_AT_cmd_mode
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
</UL>

<P><STRONG><a name="[1a6]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_sps_print_send_data
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_timerid_to_string
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_taskid_to_string
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_msgid_to_string
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_gprsmod_tcp_u8_data_transmit_with_receive
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_send_AT_command
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_blemod_uart_send_AT_command
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_pack
</UL>

<P><STRONG><a name="[2db]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
</UL>

<P><STRONG><a name="[34d]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_rfidmod_mf522_spi_read_id
</UL>

<P><STRONG><a name="[1a7]"></a>strncat</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, strncat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncat
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
</UL>

<P><STRONG><a name="[344]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vm_system_ctr_table_init
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_gprsmod_tcp_u8_data_transmit_with_receive
</UL>

<P><STRONG><a name="[334]"></a>strerror</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, strerror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_task_create
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_rcv
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_queue_create
</UL>

<P><STRONG><a name="[e5]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_gprsmod_get_rssi_value
</UL>

<P><STRONG><a name="[e9]"></a>strtoul</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_blemod_hc05_uart_fetch_mac_addr_in_AT_cmd_mode
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
</UL>

<P><STRONG><a name="[ea]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_navig_mpu6050_angle_caculate_by_acc_xyz
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_gprsmod_get_rssi_value
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>

<P><STRONG><a name="[ed]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[ee]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[265]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_adc1_ccl_get_battery_value
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_dht11_temp_read
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_dht11_humid_read
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_navig_mpu6050_angle_caculate_by_acc_xyz
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_gprsmod_get_rssi_value
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_i2caries_ccl_sensor_status_req
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_hand_active_trigger_to_work
</UL>

<P><STRONG><a name="[ef]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_adc1_ccl_get_battery_value
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_bsp_stm32_dido_dht11_read_temp_and_humidity
</UL>

<P><STRONG><a name="[f0]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_wmmw_navig_mpu6050_axis_z_angle_caculate_by_static_method
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[f5]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[f6]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[f7]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[f8]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_wmmw_navig_mpu6050_axis_z_angle_caculate_by_static_method
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_navig_mpu6050_angle_caculate_by_acc_xyz
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_i2caries_ccl_sensor_status_req
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_hand_active_trigger_to_work
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[250]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>

<P><STRONG><a name="[3a8]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[f9]"></a>__aeabi_i2f</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_gprsmod_get_rssi_value
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_hand_active_trigger_to_work
</UL>

<P><STRONG><a name="[fa]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_adc1_ccl_get_battery_value
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_bsp_stm32_dido_dht11_read_temp_and_humidity
</UL>

<P><STRONG><a name="[fb]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_wmmw_navig_mpu6050_axis_z_angle_caculate_by_static_method
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_i2caries_ccl_sensor_status_req
</UL>

<P><STRONG><a name="[324]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_adc1_ccl_get_battery_value
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_dht11_temp_read
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_dht11_humid_read
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_gprsmod_get_rssi_value
</UL>

<P><STRONG><a name="[266]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_i2caries_ccl_sensor_status_req
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_hand_active_trigger_to_work
</UL>

<P><STRONG><a name="[267]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_dht11_temp_read
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_dht11_humid_read
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_wmmw_navig_mpu6050_axis_z_angle_caculate_by_static_method
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_navig_mpu6050_angle_caculate_by_acc_xyz
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_hand_active_trigger_to_work
</UL>

<P><STRONG><a name="[34b]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_navig_mpu6050_angle_caculate_by_acc_xyz
</UL>

<P><STRONG><a name="[3a9]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[fc]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_wmmw_navig_mpu6050_axis_z_angle_caculate_by_static_method
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_navig_mpu6050_angle_caculate_by_acc_xyz
</UL>

<P><STRONG><a name="[3aa]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[256]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[fd]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[f1]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[3ab]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[fe]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[3ac]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[f2]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[3ad]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[e6]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[e7]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[3ae]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[ec]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[eb]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[f4]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[f3]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[100]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[101]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[253]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[e0]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[3af]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[ff]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[3b0]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[3b1]"></a>__decompress2</STRONG> (Thumb, 94 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[db]"></a>Callback01</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, freertos.o(i.Callback01))
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[2e8]"></a>CopyReplaceCrLf</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, vmmw_gprs.o(i.CopyReplaceCrLf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CopyReplaceCrLf
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_send_AT_command
</UL>

<P><STRONG><a name="[74]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[110]"></a>Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Init
</UL>

<P><STRONG><a name="[111]"></a>FsmAddNew</STRONG> (Thumb, 560 bytes, Stack size 48 bytes, vmfreeoslayer.o(i.FsmAddNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = FsmAddNew &rArr; FsmSetState &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_task_create_and_run
</UL>

<P><STRONG><a name="[116]"></a>FsmGetState</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, vmfreeoslayer.o(i.FsmGetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = FsmGetState &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmRunEngine
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_time_out
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ledpisces_time_out
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_i2caries_time_out
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_time_out
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_adclibra_time_out
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_time_out_lock_work_active
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_dcmiaris_time_out
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_time_out
</UL>

<P><STRONG><a name="[117]"></a>FsmInit</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, vmfreeoslayer.o(i.FsmInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = FsmInit &rArr; IhuDebugPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vm_system_ctr_table_init
</UL>

<P><STRONG><a name="[d7]"></a>FsmProcessingLaunch</STRONG> (Thumb, 218 bytes, Stack size 592 bytes, vmfreeoslayer.o(i.FsmProcessingLaunch))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = FsmProcessingLaunch &rArr; FsmRunEngine &rArr; FsmGetState &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_sleep
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_rcv
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmRunEngine
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vmfreeoslayer.o(i.ihu_task_create_and_run)
</UL>
<P><STRONG><a name="[118]"></a>FsmRunEngine</STRONG> (Thumb, 594 bytes, Stack size 80 bytes, vmfreeoslayer.o(i.FsmRunEngine))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = FsmRunEngine &rArr; FsmGetState &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmGetState
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmProcessingLaunch
</UL>

<P><STRONG><a name="[115]"></a>FsmSetState</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, vmfreeoslayer.o(i.FsmSetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = FsmSetState &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmAddNew
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_timer_task_entry
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_timer_stop_rcv
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_timer_init
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_time_out
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_task_entry
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_stop_rcv
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_init
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ledpisces_time_out
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ledpisces_task_entry
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ledpisces_stop_rcv
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ledpisces_init
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_i2caries_time_out
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_i2caries_task_entry
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_i2caries_stop_rcv
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_i2caries_init
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_time_out
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_task_entry
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_stop_rcv
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_init
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_adclibra_time_out
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_adclibra_task_entry
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_adclibra_stop_rcv
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_adclibra_init
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_time_out_lock_work_active
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_task_entry
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_stop_rcv
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_sps_cloud_fb
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_init
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_hand_active_trigger_to_work
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_dido_door_open_event
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_dcmiaris_time_out
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_dcmiaris_task_entry
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_dcmiaris_stop_rcv
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_dcmiaris_init
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_time_out
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_task_entry
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_stop_rcv
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_init
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_open_auth_inq
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_fault_report_send
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_event_report_send
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_close_door_report_send
</UL>

<P><STRONG><a name="[11e]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 412 bytes, Stack size 24 bytes, stm32f2xx_hal_adc.o(i.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ADC_ConfigChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[322]"></a>HAL_ADC_GetValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_hal_adc.o(i.HAL_ADC_GetValue))
<BR><BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_adc1_ccl_get_battery_value
</UL>

<P><STRONG><a name="[11f]"></a>HAL_ADC_Init</STRONG> (Thumb, 466 bytes, Stack size 32 bytes, stm32f2xx_hal_adc.o(i.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[120]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, adc.o(i.HAL_ADC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[122]"></a>HAL_ADC_Start</STRONG> (Thumb, 252 bytes, Stack size 16 bytes, stm32f2xx_hal_adc.o(i.HAL_ADC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_ADC_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_adc1_start
</UL>

<P><STRONG><a name="[123]"></a>HAL_ADC_Stop</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, stm32f2xx_hal_adc.o(i.HAL_ADC_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_ADC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_adc1_stop
</UL>

<P><STRONG><a name="[191]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f2xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[124]"></a>HAL_Delay</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, stm32f2xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetCurrentMode
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetPort
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostInit
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_DriverVBUS
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Delay
</UL>

<P><STRONG><a name="[126]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 350 bytes, Stack size 48 bytes, stm32f2xx_hal_gpio.o(i.HAL_GPIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspDeInit
</UL>

<P><STRONG><a name="[121]"></a>HAL_GPIO_Init</STRONG> (Thumb, 658 bytes, Stack size 40 bytes, stm32f2xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_MspInit
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_bsp_stm32_dido_ds18b20_set_mode_out_PP
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_bsp_stm32_dido_ds18b20_set_mode_IPU
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_bsp_stm32_dido_dht11_mode_out_PP
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_bsp_stm32_dido_dht11_mode_IPU
</UL>

<P><STRONG><a name="[127]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, stm32f2xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_GPIO_ReadPin
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_water_read
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_smoke_read
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_shake_read
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_lock_act_flag_read
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_door4_restriction_read
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_door3_restriction_read
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_door2_restriction_read
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_door1_restriction_read
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_bsp_stm32_dido_dht11_read_temp_and_humidity
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_bsp_stm32_dido_ds18b20_presence
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_bsp_stm32_dido_dht11_read_byte
</UL>

<P><STRONG><a name="[128]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, stm32f2xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_sensor_power_ctrl_on
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_sensor_power_ctrl_off
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_mq2_cam_power_ctrl_on
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_mq2_cam_power_ctrl_off
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_lock4_do1_on
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_lock4_do1_off
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_lock3_do1_on
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_lock3_do1_off
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_lock2_do1_on
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_lock2_do1_off
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_lock1_do1_on
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_lock1_do1_off
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_gprsmod_power_supply_on
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_gprsmod_power_supply_off
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_gprsmod_power_key_on
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_gprsmod_power_key_off
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_dht11_init
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_cpu_power_ctrl_off
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_ble_atcmd_mode_ctrl_on
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_ble_atcmd_mode_ctrl_off
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_ds18b20_init
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_bsp_stm32_dido_dht11_read_temp_and_humidity
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_bsp_stm32_dido_ds18b20_reset
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_led_f2board_on
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_led_f2board_off
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_beep_f2board_on
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_beep_f2board_off
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_spi_nrf24l01_cs_enable
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_spi_nrf24l01_cs_disable
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_spi_nrf24l01_ce_low
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_spi_nrf24l01_ce_high
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_spi_mf522_reset_enable
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_spi_mf522_reset_disable
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_spi_mf522_cs_enable
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_spi_mf522_cs_disable
</UL>

<P><STRONG><a name="[125]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRxTx_ISR
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnBTFFlagUntilTimeout
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[129]"></a>HAL_HCD_Connect_Callback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbh_conf.o(i.HAL_HCD_Connect_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_HCD_Connect_Callback &rArr; USBH_LL_Connect &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Connect
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Port_IRQHandler
</UL>

<P><STRONG><a name="[12b]"></a>HAL_HCD_Disconnect_Callback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbh_conf.o(i.HAL_HCD_Disconnect_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_HCD_Disconnect_Callback &rArr; USBH_LL_Disconnect &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>

<P><STRONG><a name="[12d]"></a>HAL_HCD_GetCurrentFrame</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_hal_hcd.o(i.HAL_HCD_GetCurrentFrame))
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetCurrentFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Init
</UL>

<P><STRONG><a name="[12f]"></a>HAL_HCD_GetCurrentSpeed</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_hal_hcd.o(i.HAL_HCD_GetCurrentSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_HCD_GetCurrentSpeed &rArr; USB_GetHostSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetHostSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_GetSpeed
</UL>

<P><STRONG><a name="[224]"></a>HAL_HCD_HC_GetURBState</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f2xx_hal_hcd.o(i.HAL_HCD_HC_GetURBState))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_GetURBState
</UL>

<P><STRONG><a name="[222]"></a>HAL_HCD_HC_GetXferCount</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_hal_hcd.o(i.HAL_HCD_HC_GetXferCount))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_GetLastXferSize
</UL>

<P><STRONG><a name="[131]"></a>HAL_HCD_HC_Halt</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f2xx_hal_hcd.o(i.HAL_HCD_HC_Halt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_HCD_HC_Halt &rArr; USB_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HC_Halt
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_ClosePipe
</UL>

<P><STRONG><a name="[133]"></a>HAL_HCD_HC_Init</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, stm32f2xx_hal_hcd.o(i.HAL_HCD_HC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_HCD_HC_Init &rArr; USB_HC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_OpenPipe
</UL>

<P><STRONG><a name="[135]"></a>HAL_HCD_HC_NotifyURBChange_Callback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbh_conf.o(i.HAL_HCD_HC_NotifyURBChange_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_HCD_HC_NotifyURBChange_Callback &rArr; USBH_LL_NotifyURBChange &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_NotifyURBChange
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_HC_OUT_IRQHandler
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_HC_IN_IRQHandler
</UL>

<P><STRONG><a name="[137]"></a>HAL_HCD_HC_SubmitRequest</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, stm32f2xx_hal_hcd.o(i.HAL_HCD_HC_SubmitRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HC_StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_SubmitURB
</UL>

<P><STRONG><a name="[139]"></a>HAL_HCD_IRQHandler</STRONG> (Thumb, 304 bytes, Stack size 24 bytes, stm32f2xx_hal_hcd.o(i.HAL_HCD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = HAL_HCD_IRQHandler &rArr; HCD_HC_IN_IRQHandler &rArr; HAL_HCD_HC_NotifyURBChange_Callback &rArr; USBH_LL_NotifyURBChange &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadInterrupts
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_InitFSLSPClkSel
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HC_ReadInterrupt
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetMode
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_RXQLVL_IRQHandler
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Port_IRQHandler
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_HC_OUT_IRQHandler
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_HC_IN_IRQHandler
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_SOF_Callback
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Disconnect_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
</UL>

<P><STRONG><a name="[143]"></a>HAL_HCD_Init</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, stm32f2xx_hal_hcd.o(i.HAL_HCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_HCD_Init &rArr; HAL_HCD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetCurrentMode
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostInit
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisableGlobalInt
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CoreInit
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_MspInit
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Init
</UL>

<P><STRONG><a name="[144]"></a>HAL_HCD_MspInit</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, usbh_conf.o(i.HAL_HCD_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_HCD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Init
</UL>

<P><STRONG><a name="[14c]"></a>HAL_HCD_ResetPort</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_hal_hcd.o(i.HAL_HCD_ResetPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_HCD_ResetPort &rArr; USB_ResetPort &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetPort
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_ResetPort
</UL>

<P><STRONG><a name="[13e]"></a>HAL_HCD_SOF_Callback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbh_conf.o(i.HAL_HCD_SOF_Callback))
<BR><BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_IncTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>

<P><STRONG><a name="[14f]"></a>HAL_HCD_Start</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f2xx_hal_hcd.o(i.HAL_HCD_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_HCD_Start &rArr; USB_DriveVbus
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableGlobalInt
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DriveVbus
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Start
</UL>

<P><STRONG><a name="[152]"></a>HAL_HCD_Stop</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f2xx_hal_hcd.o(i.HAL_HCD_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_HCD_Stop &rArr; USB_StopHost
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StopHost
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Stop
</UL>

<P><STRONG><a name="[154]"></a>HAL_I2C_DeInit</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, stm32f2xx_hal_i2c.o(i.HAL_I2C_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_I2C_DeInit &rArr; HAL_I2C_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BSP_STM32_PCF8563_Error
</UL>

<P><STRONG><a name="[156]"></a>HAL_I2C_Init</STRONG> (Thumb, 442 bytes, Stack size 16 bytes, stm32f2xx_hal_i2c.o(i.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[159]"></a>HAL_I2C_Mem_Read</STRONG> (Thumb, 692 bytes, Stack size 64 bytes, stm32f2xx_hal_i2c.o(i.HAL_I2C_Mem_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_i2c_pcf8563_read_data
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_i2c_pcf8563_read_buffer
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_i2c_mpu6050_read_buffer
</UL>

<P><STRONG><a name="[15d]"></a>HAL_I2C_Mem_Write</STRONG> (Thumb, 364 bytes, Stack size 64 bytes, stm32f2xx_hal_i2c.o(i.HAL_I2C_Mem_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnBTFFlagUntilTimeout
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_i2c_pcf8563_write_data
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_i2c_pcf8563_write_buffer
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_i2c_mpu6050_write_data
</UL>

<P><STRONG><a name="[155]"></a>HAL_I2C_MspDeInit</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, i2c.o(i.HAL_I2C_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_I2C_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
</UL>

<P><STRONG><a name="[157]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, i2c.o(i.HAL_I2C_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[34e]"></a>HAL_I2C_Slave_Receive_IT</STRONG> (Thumb, 176 bytes, Stack size 20 bytes, stm32f2xx_hal_i2c.o(i.HAL_I2C_Slave_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_I2C_Slave_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18d]"></a>HAL_IncTick</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[161]"></a>HAL_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f2xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[163]"></a>HAL_InitTick</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, stm32f2xx_hal_timebase_tim.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetClockConfig
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[164]"></a>HAL_MspInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32f2xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[14b]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f2xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_NVIC_Init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_MspInit
</UL>

<P><STRONG><a name="[14a]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, stm32f2xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_NVIC_Init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_MspInit
</UL>

<P><STRONG><a name="[162]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32f2xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[16a]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 586 bytes, Stack size 32 bytes, stm32f2xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[16b]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 540 bytes, Stack size 32 bytes, stm32f2xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[165]"></a>HAL_RCC_GetClockConfig</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, stm32f2xx_hal_rcc.o(i.HAL_RCC_GetClockConfig))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[16d]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[158]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, stm32f2xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[166]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, stm32f2xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[16c]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, stm32f2xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[16e]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1080 bytes, Stack size 40 bytes, stm32f2xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[16f]"></a>HAL_RTC_GetDate</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f2xx_hal_rtc.o(i.HAL_RTC_GetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_GetDate
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_rtc_get_current_unix_time
</UL>

<P><STRONG><a name="[171]"></a>HAL_RTC_GetTime</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32f2xx_hal_rtc.o(i.HAL_RTC_GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_rtc_get_current_unix_time
</UL>

<P><STRONG><a name="[172]"></a>HAL_RTC_Init</STRONG> (Thumb, 266 bytes, Stack size 16 bytes, stm32f2xx_hal_rtc.o(i.HAL_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RTC_Init &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[173]"></a>HAL_RTC_MspInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtc.o(i.HAL_RTC_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[175]"></a>HAL_RTC_SetDate</STRONG> (Thumb, 384 bytes, Stack size 32 bytes, stm32f2xx_hal_rtc.o(i.HAL_RTC_SetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RTC_SetDate &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[178]"></a>HAL_RTC_SetTime</STRONG> (Thumb, 494 bytes, Stack size 32 bytes, stm32f2xx_hal_rtc.o(i.HAL_RTC_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RTC_SetTime &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[177]"></a>HAL_RTC_WaitForSynchro</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f2xx_hal_rtc.o(i.HAL_RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
</UL>

<P><STRONG><a name="[179]"></a>HAL_SPI_ErrorCallback</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bsp_spi.o(i.HAL_SPI_ErrorCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = HAL_SPI_ErrorCallback &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRx_ISR
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRxTx_ISR
</UL>

<P><STRONG><a name="[17a]"></a>HAL_SPI_Init</STRONG> (Thumb, 370 bytes, Stack size 16 bytes, stm32f2xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[17b]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, spi.o(i.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[17c]"></a>HAL_SPI_Receive_IT</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, stm32f2xx_hal_spi.o(i.HAL_SPI_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_SPI_Receive_IT &rArr; HAL_SPI_TransmitReceive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d6]"></a>HAL_SPI_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_spi.o(i.HAL_SPI_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRx_ISR
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRxTx_ISR
</UL>

<P><STRONG><a name="[17e]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 490 bytes, Stack size 40 bytes, stm32f2xx_hal_spi.o(i.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CheckFlag_BSY
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_spi_nrf24l01_read_write_byte
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_spi_flash_send_byte
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_spi_flash_read_byte
</UL>

<P><STRONG><a name="[17d]"></a>HAL_SPI_TransmitReceive_IT</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, stm32f2xx_hal_spi.o(i.HAL_SPI_TransmitReceive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SPI_TransmitReceive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive_IT
</UL>

<P><STRONG><a name="[1d5]"></a>HAL_SPI_TxRxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_hal_spi.o(i.HAL_SPI_TxRxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRxTx_ISR
</UL>

<P><STRONG><a name="[181]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f2xx_hal_cortex.o(i.HAL_SYSTICK_CLKSourceConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_CLKSourceConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[182]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f2xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[18a]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[18c]"></a>HAL_TIMEx_CommutationCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_hal_tim_ex.o(i.HAL_TIMEx_CommutationCallback))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[167]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 202 bytes, Stack size 8 bytes, stm32f2xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[183]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_hal_tim.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[168]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, stm32f2xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_Base_Start_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[186]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[185]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 366 bytes, Stack size 16 bytes, stm32f2xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutationCallback
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_TIM10_IRQHandler
</UL>

<P><STRONG><a name="[187]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[188]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[189]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[18b]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[192]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[18e]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 270 bytes, Stack size 16 bytes, stm32f2xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1936<LI>Call Chain = HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_IT
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[195]"></a>HAL_UART_Init</STRONG> (Thumb, 252 bytes, Stack size 16 bytes, stm32f2xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
</UL>

<P><STRONG><a name="[196]"></a>HAL_UART_MspInit</STRONG> (Thumb, 236 bytes, Stack size 48 bytes, usart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[198]"></a>HAL_UART_Receive</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, stm32f2xx_hal_uart.o(i.HAL_UART_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_sps_cam_rcv_data_timeout
</UL>

<P><STRONG><a name="[19b]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, stm32f2xx_hal_uart.o(i.HAL_UART_Receive_IT))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[19a]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 506 bytes, Stack size 600 bytes, bsp_usart.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1912<LI>Call Chain = HAL_UART_RxCpltCallback &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[19e]"></a>HAL_UART_Transmit</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, stm32f2xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_sps_print_send_data
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_sps_gprs_send_data
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_sps_cam_send_data
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_sps_ble_send_data
</UL>

<P><STRONG><a name="[1dc]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_hal_uart.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
</UL>

<P><STRONG><a name="[6f]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[1a0]"></a>I2C_BSP_STM32_PCF8563_Error</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(i.I2C_BSP_STM32_PCF8563_Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = I2C_BSP_STM32_PCF8563_Error &rArr; MX_I2C1_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_i2c_pcf8563_write_data
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_i2c_pcf8563_write_buffer
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_i2c_pcf8563_read_data
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_i2c_pcf8563_read_buffer
</UL>

<P><STRONG><a name="[113]"></a>IhuDebugPrintFo</STRONG> (Thumb, 174 bytes, Stack size 344 bytes, vmfreeoslayer.o(i.IhuDebugPrintFo))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = IhuDebugPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_sps_print_send_data
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncat
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_smoke_read
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_shake_read
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_dht11_temp_read
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_dht11_humid_read
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_cpu_power_ctrl_off
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_bsp_stm32_dido_dht11_read_temp_and_humidity
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vm_system_ctr_table_init
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_task_create_and_run
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_task_create
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_system_task_init_call
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmRunEngine
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmProcessingLaunch
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmInit
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmAddNew
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_timer_init
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_wmmw_navig_mpu6050_axis_z_angle_caculate_by_static_method
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_navig_mpu6050_return_id
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_rfidmod_mf522_spi_read_id
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_gprsmod_tcp_u8_data_transmit_with_receive
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_gprsmod_http_data_transmit_with_receive
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_send_AT_command
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_module_session_init
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_module_info_retrieve
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_gsm_info_retrieve
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_blemod_hc05_uart_fetch_mac_addr_in_AT_cmd_mode
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_init_fb
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_init
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ledpisces_init
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_i2caries_init
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_i2caries_ccl_sensor_status_req
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_init
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_adclibra_ccl_scan_battery_warning_level
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_adclibra_init
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_pack
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_vmmw_rtc_pcf8563_set_alarm_process
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_vmmw_rtc_pcf8563_clear_af_and_power_off_cpu
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_SetAlarm
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_period_report_trigger
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_init
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_hand_active_trigger_to_work
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_dcmiaris_init
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_init
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_sensor_status_req
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_open_auth_inq
</UL>

<P><STRONG><a name="[112]"></a>IhuDebugPrintId</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, vmfreeoslayer.o(i.IhuDebugPrintId))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = IhuDebugPrintId &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_smoke_read
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_shake_read
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_dht11_temp_read
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_dht11_humid_read
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_cpu_power_ctrl_off
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_bsp_stm32_dido_dht11_read_temp_and_humidity
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vm_system_ctr_table_init
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vm_send_init_msg_to_app_task
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_timerid_to_string
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_taskid_to_string
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_task_create_and_run
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_task_create
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_system_task_init_call
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_msgid_to_string
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_rcv
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_queue_create
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_com_heart_beat_rcv
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmRunEngine
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmProcessingLaunch
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmInit
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmGetState
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmAddNew
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_timer_stop
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_timer_start
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_timer_routine_handler_1s
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_timer_task_entry
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_timer_stop_rcv
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_timer_restart
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_timer_init
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_wmmw_navig_mpu6050_axis_z_angle_caculate_by_static_method
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_navig_mpu6050_return_id
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_navig_mpu6050_init
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_rfidmod_nrf24l01_spi_read_id
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_rfidmod_mf522_spi_read_id
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_gprsmod_tcp_u8_data_transmit_with_receive
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_gprsmod_http_data_transmit_with_receive
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_setup_gprs_session_connection
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_send_AT_command
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_module_session_init
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_module_info_retrieve
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_gsm_info_retrieve
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_blemod_hc05_uart_fetch_mac_addr_in_AT_cmd_mode
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_time_out
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_task_entry
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_stop_rcv
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_restart
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_init_fb
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_init
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_heart_beat
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_ledpisces_galowag_start
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ledpisces_time_out_period_scan
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ledpisces_time_out
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ledpisces_task_entry
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ledpisces_stop_rcv
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ledpisces_restart
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ledpisces_init
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_i2caries_time_out_period_scan
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_i2caries_time_out
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_i2caries_task_entry
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_i2caries_stop_rcv
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_i2caries_restart
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_i2caries_init
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_i2caries_ccl_sensor_status_req
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_didocap_time_out_period_scan
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_time_out
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_task_entry
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_stop_rcv
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_restart
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_init
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_ccl_sensor_status_req
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_ccl_door_open_req
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_ccl_door_close_req
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_adclibra_ccl_scan_battery_warning_level
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_adclibra_time_out_period_scan
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_adclibra_time_out
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_adclibra_task_entry
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_adclibra_stop_rcv
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_adclibra_restart
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_adclibra_init
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_sw_package_req_received_handle
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_sw_package_confirm_received_handle
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_inventory_req_received_handle
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_inventory_confirm_received_handle
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_heart_beat_req_received_handle
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_heart_beat_confirm_received_handle
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_water_req_received_handle
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_water_confirm_received_handle
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_temp_req_received_handle
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_temp_confirm_received_handle
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_state_req_received_handle
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_state_confirm_received_handle
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_smoke_req_received_handle
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_smoke_confirm_received_handle
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_shake_req_received_handle
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_shake_confirm_received_handle
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_rfid_req_received_handle
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_rfid_confirm_received_handle
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_lock_req_received_handle
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_lock_confirm_received_handle
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_lock_auth_resp_received_handle
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_humid_req_received_handle
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_humid_confirm_received_handle
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_gprs_req_received_handle
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_gprs_confirm_received_handle
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_fall_req_received_handle
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_fall_confirm_received_handle
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_door_req_received_handle
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_door_confirm_received_handle
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_ble_req_received_handle
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_ble_confirm_received_handle
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_battery_req_received_handle
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_battery_confirm_received_handle
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_pack
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_cam_ulcdsc03_uart_get_picture
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_vmmw_rtc_pcf8563_set_alarm_process
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_vmmw_rtc_pcf8563_init
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_vmmw_rtc_pcf8563_clear_af_and_power_off_cpu
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_SetAlarm
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_time_out_period_event_report
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_time_out_lock_work_wait_door_for_open
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_time_out_lock_work_active
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_time_out
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_task_entry
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_stop_rcv
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_sps_sensor_status_resp
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_sps_fault_report_cfm
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_sps_event_report_cfm
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_sps_cloud_fb
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_sps_close_door_report_cfm
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_restart
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_period_report_trigger
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_init
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_i2c_sensor_status_resp
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_hand_active_trigger_to_work
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_fault_state_trigger
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_door_close_event
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_dido_sensor_status_resp
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_dido_door_open_event
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_dcmi_sensor_status_resp
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_dcmiaris_take_picture
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_dcmiaris_time_out_period_scan
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_dcmiaris_time_out
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_dcmiaris_task_entry
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_dcmiaris_stop_rcv
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_dcmiaris_restart
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_dcmiaris_init
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_dcmiaris_ccl_sensor_status_req
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_spsvirgo_time_out_period_scan
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_time_out
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_task_entry
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_stop_rcv
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_restart
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_l2frame_rcv
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_init
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_sensor_status_req
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_open_auth_inq
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_fault_report_send
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_event_report_send
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_close_door_report_send
</UL>

<P><STRONG><a name="[114]"></a>IhuErrorPrintFo</STRONG> (Thumb, 176 bytes, Stack size 344 bytes, vmfreeoslayer.o(i.IhuErrorPrintFo))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_sps_print_send_data
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncat
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vm_system_ctr_table_init
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vm_send_init_msg_to_app_task
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_timerid_to_string
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_taskid_to_string
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_task_create_and_run
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_task_create
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_system_task_init_call
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_msgid_to_string
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_rcv
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_queue_create
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_com_heart_beat_rcv
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmRunEngine
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmProcessingLaunch
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmGetState
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmAddNew
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_timer_stop
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_timer_start
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_timer_routine_handler_1s
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_timer_task_entry
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_timer_stop_rcv
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_timer_restart
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_timer_init
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_navig_mpu6050_init
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_rfidmod_nrf24l01_spi_read_id
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_rfidmod_mf522_spi_read_id
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_gprsmod_tcp_u8_data_transmit_with_receive
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_gprsmod_http_data_transmit_with_receive
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_setup_gprs_session_connection
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_module_session_init
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_module_info_retrieve
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_gsm_info_retrieve
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_blemod_hc05_uart_fetch_mac_addr_in_AT_cmd_mode
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_time_out
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_task_entry
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_stop_rcv
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_restart
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_init_fb
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_init
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_heart_beat
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_ledpisces_galowag_start
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ledpisces_time_out_period_scan
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ledpisces_time_out
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ledpisces_task_entry
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ledpisces_stop_rcv
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ledpisces_restart
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ledpisces_init
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_i2caries_time_out_period_scan
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_i2caries_time_out
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_i2caries_task_entry
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_i2caries_stop_rcv
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_i2caries_restart
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_i2caries_init
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_i2caries_ccl_sensor_status_req
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_didocap_time_out_period_scan
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_time_out
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_task_entry
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_stop_rcv
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_restart
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_init
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_ccl_sensor_status_req
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_ccl_door_open_req
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_ccl_door_close_req
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_adclibra_time_out_period_scan
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_adclibra_time_out
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_adclibra_task_entry
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_adclibra_stop_rcv
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_adclibra_restart
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_adclibra_init
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_sw_package_req_received_handle
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_sw_package_confirm_received_handle
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_inventory_req_received_handle
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_inventory_confirm_received_handle
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_heart_beat_req_received_handle
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_heart_beat_confirm_received_handle
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_water_req_received_handle
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_water_confirm_received_handle
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_temp_req_received_handle
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_temp_confirm_received_handle
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_state_req_received_handle
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_state_confirm_received_handle
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_smoke_req_received_handle
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_smoke_confirm_received_handle
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_shake_req_received_handle
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_shake_confirm_received_handle
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_rfid_req_received_handle
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_rfid_confirm_received_handle
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_lock_req_received_handle
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_lock_confirm_received_handle
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_lock_auth_resp_received_handle
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_humid_req_received_handle
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_humid_confirm_received_handle
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_gprs_req_received_handle
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_gprs_confirm_received_handle
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_fall_req_received_handle
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_fall_confirm_received_handle
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_door_req_received_handle
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_door_confirm_received_handle
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_ble_req_received_handle
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_ble_confirm_received_handle
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_battery_req_received_handle
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_battery_confirm_received_handle
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_pack
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_cam_ulcdsc03_uart_get_picture
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_vmmw_rtc_pcf8563_init
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_time_out_period_event_report
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_time_out_lock_work_wait_door_for_open
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_time_out_lock_work_active
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_time_out
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_task_entry
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_stop_rcv
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_sps_sensor_status_resp
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_sps_fault_report_cfm
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_sps_event_report_cfm
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_sps_cloud_fb
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_sps_close_door_report_cfm
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_restart
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_period_report_trigger
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_init
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_i2c_sensor_status_resp
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_hand_active_trigger_to_work
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_fault_state_trigger
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_door_close_event
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_dido_sensor_status_resp
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_dido_door_open_event
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_dcmi_sensor_status_resp
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_dcmiaris_take_picture
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_dcmiaris_time_out_period_scan
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_dcmiaris_time_out
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_dcmiaris_task_entry
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_dcmiaris_stop_rcv
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_dcmiaris_restart
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_dcmiaris_init
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_dcmiaris_ccl_sensor_status_req
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_spsvirgo_time_out_period_scan
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_time_out
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_task_entry
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_stop_rcv
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_restart
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_l2frame_rcv
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_init
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_sensor_status_req
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_open_auth_inq
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_fault_report_send
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_event_report_send
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_close_door_report_send
</UL>

<P><STRONG><a name="[1af]"></a>MX_ADC1_Init</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, adc.o(i.MX_ADC1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = MX_ADC1_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b0]"></a>MX_FREERTOS_Init</STRONG> (Thumb, 94 bytes, Stack size 64 bytes, freertos.o(i.MX_FREERTOS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1424<LI>Call Chain = MX_FREERTOS_Init &rArr; ihu_vm_main &rArr; ihu_task_create_all &rArr; ihu_vm_send_init_msg_to_app_task &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerCreate
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageCreate
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vm_main
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b5]"></a>MX_GPIO_Init</STRONG> (Thumb, 596 bytes, Stack size 64 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a1]"></a>MX_I2C1_Init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, i2c.o(i.MX_I2C1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_I2C1_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BSP_STM32_PCF8563_Error
</UL>

<P><STRONG><a name="[1b7]"></a>MX_RTC_Init</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, rtc.o(i.MX_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MX_RTC_Init &rArr; HAL_RTC_SetTime &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b8]"></a>MX_SPI1_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, spi.o(i.MX_SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_SPI1_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b9]"></a>MX_UART4_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usart.o(i.MX_UART4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MX_UART4_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ba]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usart.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1bb]"></a>MX_USART2_UART_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usart.o(i.MX_USART2_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MX_USART2_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1bc]"></a>MX_USART3_UART_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usart.o(i.MX_USART3_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MX_USART3_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1bd]"></a>MX_USB_HOST_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, usb_host.o(i.MX_USB_HOST_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = MX_USB_HOST_Init &rArr; USBH_Init &rArr; osThreadCreate &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Start
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_RegisterClass
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
</UL>

<P><STRONG><a name="[70]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[ba]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.OTG_FS_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = OTG_FS_IRQHandler &rArr; HAL_HCD_IRQHandler &rArr; HCD_HC_IN_IRQHandler &rArr; HAL_HCD_HC_NotifyURBChange_Callback &rArr; USBH_LL_NotifyURBChange &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[1c1]"></a>PCF8563_GetAlarm</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, vmmw_pcf8563.o(i.PCF8563_GetAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = PCF8563_GetAlarm &rArr; func_vmmw_rtc_pcf8563_read_data &rArr; ihu_bsp_stm32_i2c_pcf8563_read_buffer &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToBin
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_vmmw_rtc_pcf8563_read_data
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_vmmw_rtc_pcf8563_get_alarm_duration
</UL>

<P><STRONG><a name="[1c4]"></a>PCF8563_GetDate</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, vmmw_pcf8563.o(i.PCF8563_GetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = PCF8563_GetDate &rArr; func_vmmw_rtc_pcf8563_read_data &rArr; ihu_bsp_stm32_i2c_pcf8563_read_buffer &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToBin
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_vmmw_rtc_pcf8563_read_data
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_vmmw_rtc_pcf8563_set_alarm_process
</UL>

<P><STRONG><a name="[1c5]"></a>PCF8563_GetTime</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, vmmw_pcf8563.o(i.PCF8563_GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = PCF8563_GetTime &rArr; func_vmmw_rtc_pcf8563_read_data &rArr; ihu_bsp_stm32_i2c_pcf8563_read_buffer &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToBin
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_vmmw_rtc_pcf8563_read_data
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_vmmw_rtc_pcf8563_set_alarm_process
</UL>

<P><STRONG><a name="[1c6]"></a>PCF8563_SetAlarm</STRONG> (Thumb, 350 bytes, Stack size 16 bytes, vmmw_pcf8563.o(i.PCF8563_SetAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = PCF8563_SetAlarm &rArr; IhuDebugPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_BinToBcd2
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_vmmw_rtc_pcf8563_write_reg
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_vmmw_rtc_pcf8563_write_buffer
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_vmmw_rtc_pcf8563_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_vmmw_rtc_pcf8563_set_alarm_process
</UL>

<P><STRONG><a name="[1cb]"></a>PCF8563_SetDate</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, vmmw_pcf8563.o(i.PCF8563_SetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = PCF8563_SetDate &rArr; func_vmmw_rtc_pcf8563_write_buffer &rArr; ihu_bsp_stm32_i2c_pcf8563_write_buffer &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_BinToBcd2
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_vmmw_rtc_pcf8563_write_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_vmmw_rtc_pcf8563_set_alarm_process
</UL>

<P><STRONG><a name="[1cc]"></a>PCF8563_SetTime</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, vmmw_pcf8563.o(i.PCF8563_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = PCF8563_SetTime &rArr; func_vmmw_rtc_pcf8563_write_buffer &rArr; ihu_bsp_stm32_i2c_pcf8563_write_buffer &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_BinToBcd2
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_vmmw_rtc_pcf8563_write_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_vmmw_rtc_pcf8563_set_alarm_process
</UL>

<P><STRONG><a name="[386]"></a>PostSleepProcessing</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, freertos.o(i.PostSleepProcessing))
<BR><BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
</UL>

<P><STRONG><a name="[385]"></a>PreSleepProcessing</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, freertos.o(i.PreSleepProcessing))
<BR><BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
</UL>

<P><STRONG><a name="[170]"></a>RTC_Bcd2ToByte</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_hal_rtc.o(i.RTC_Bcd2ToByte))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
</UL>

<P><STRONG><a name="[176]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_hal_rtc.o(i.RTC_ByteToBcd2))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
</UL>

<P><STRONG><a name="[174]"></a>RTC_EnterInitMode</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f2xx_hal_rtc.o(i.RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[dc]"></a>StartDefaultTask</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, freertos.o(i.StartDefaultTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = StartDefaultTask &rArr; MX_USB_HOST_Init &rArr; USBH_Init &rArr; osThreadCreate &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_HOST_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[dd]"></a>StartTask02</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, freertos.o(i.StartTask02))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + In Cycle
<LI>Call Chain = StartTask02 &rArr;  StartTask02 (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTask02
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTask02
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos.o(.constdata)
</UL>
<P><STRONG><a name="[76]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SysTick_Handler &rArr; osSystickHandler &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSystickHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[1db]"></a>SystemClock_Config</STRONG> (Thumb, 140 bytes, Stack size 96 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c8]"></a>SystemInit</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, system_stm32f2xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(.text)
</UL>
<P><STRONG><a name="[90]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.TIM1_UP_TIM10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM1_UP_TIM10_IRQHandler &rArr; HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[184]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, stm32f2xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[ab]"></a>UART4_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1936<LI>Call Chain = UART4_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>USART1_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1936<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>USART2_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1936<LI>Call Chain = USART2_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[9e]"></a>USART3_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1936<LI>Call Chain = USART3_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[1ff]"></a>USBH_AUDIO_BufferEmptyCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbh_audio.o(i.USBH_AUDIO_BufferEmptyCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AUDIO_Transmit
</UL>

<P><STRONG><a name="[1f8]"></a>USBH_AUDIO_FrequencySet</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbh_audio.o(i.USBH_AUDIO_FrequencySet))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AUDIO_OutputStream
</UL>

<P><STRONG><a name="[1f3]"></a>USBH_AllocPipe</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, usbh_pipes.o(i.USBH_AllocPipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_AllocPipe
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetFreePipe
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_InterfaceInit
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MTP_InterfaceInit
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CDC_InterfaceInit
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AUDIO_InterfaceInit
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_InterfaceInit
</UL>

<P><STRONG><a name="[10a]"></a>USBH_BulkReceiveData</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, usbh_ioreq.o(i.USBH_BulkReceiveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = USBH_BulkReceiveData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_SubmitURB
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PTP_Process
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Process
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_ProcessReception
</UL>

<P><STRONG><a name="[10e]"></a>USBH_BulkSendData</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, usbh_ioreq.o(i.USBH_BulkSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = USBH_BulkSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_SubmitURB
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PTP_Process
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Process
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_ProcessTransmission
</UL>

<P><STRONG><a name="[203]"></a>USBH_CDC_LineCodingChanged</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbh_cdc.o(i.USBH_CDC_LineCodingChanged))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CDC_Process
</UL>

<P><STRONG><a name="[10b]"></a>USBH_CDC_ReceiveCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbh_cdc.o(i.USBH_CDC_ReceiveCallback))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_ProcessReception
</UL>

<P><STRONG><a name="[10f]"></a>USBH_CDC_TransmitCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbh_cdc.o(i.USBH_CDC_TransmitCallback))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_ProcessTransmission
</UL>

<P><STRONG><a name="[1ec]"></a>USBH_ClosePipe</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbh_pipes.o(i.USBH_ClosePipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBH_ClosePipe &rArr; USBH_LL_ClosePipe &rArr; HAL_HCD_HC_Halt &rArr; USB_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_ClosePipe
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_InterfaceDeInit
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MTP_InterfaceDeInit
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CDC_InterfaceDeInit
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AUDIO_InterfaceDeInit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_InterfaceDeInit
</UL>

<P><STRONG><a name="[204]"></a>USBH_ClrFeature</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, usbh_ctlreq.o(i.USBH_ClrFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = USBH_ClrFeature &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_ClassRequest
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Abort
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CDC_Process
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Process
</UL>

<P><STRONG><a name="[206]"></a>USBH_CtlReceiveData</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, usbh_ioreq.o(i.USBH_CtlReceiveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = USBH_CtlReceiveData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_SubmitURB
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
</UL>

<P><STRONG><a name="[11d]"></a>USBH_CtlReq</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, usbh_ctlreq.o(i.USBH_CtlReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_REQ_Reset
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_REQ_GetMaxLUN
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLineCoding
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLineCoding
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AUDIO_SetEndpointControls
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AC_SetCur
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AC_GetRes
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AC_GetMin
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AC_GetMax
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AC_GetCur
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetInterface
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetCfg
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetAddress
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetDescriptor
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ClrFeature
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_SetProtocol
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_SetIdle
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_GetReport
</UL>

<P><STRONG><a name="[208]"></a>USBH_CtlSendData</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, usbh_ioreq.o(i.USBH_CtlSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_SubmitURB
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
</UL>

<P><STRONG><a name="[209]"></a>USBH_CtlSendSetup</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, usbh_ioreq.o(i.USBH_CtlSendSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_SubmitURB
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
</UL>

<P><STRONG><a name="[20a]"></a>USBH_Delay</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbh_conf.o(i.USBH_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_Delay &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[1eb]"></a>USBH_FindInterface</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, usbh_core.o(i.USBH_FindInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_FindInterface
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_InterfaceInit
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MTP_InterfaceInit
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CDC_InterfaceInit
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AUDIO_InterfaceInit
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AUDIO_FindHIDControl
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_InterfaceInit
</UL>

<P><STRONG><a name="[1fb]"></a>USBH_FindInterfaceIndex</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, usbh_core.o(i.USBH_FindInterfaceIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USBH_FindInterfaceIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AUDIO_ParseCSDescriptors
</UL>

<P><STRONG><a name="[1ed]"></a>USBH_FreePipe</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usbh_pipes.o(i.USBH_FreePipe))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Disconnect
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_InterfaceDeInit
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MTP_InterfaceDeInit
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CDC_InterfaceDeInit
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AUDIO_InterfaceDeInit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_InterfaceDeInit
</UL>

<P><STRONG><a name="[20b]"></a>USBH_GetDescriptor</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usbh_ctlreq.o(i.USBH_GetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_StringDesc
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_DevDesc
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_CfgDesc
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_GetHIDReportDescriptor
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_GetHIDDescriptor
</UL>

<P><STRONG><a name="[1fa]"></a>USBH_GetNextDesc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbh_ctlreq.o(i.USBH_GetNextDesc))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AUDIO_ParseCSDescriptors
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseCfgDesc
</UL>

<P><STRONG><a name="[20c]"></a>USBH_Get_CfgDesc</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, usbh_ctlreq.o(i.USBH_Get_CfgDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = USBH_Get_CfgDesc &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetDescriptor
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseCfgDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[20e]"></a>USBH_Get_DevDesc</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, usbh_ctlreq.o(i.USBH_Get_DevDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = USBH_Get_DevDesc &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetDescriptor
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseDevDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[210]"></a>USBH_Get_StringDesc</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, usbh_ctlreq.o(i.USBH_Get_StringDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = USBH_Get_StringDesc &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetDescriptor
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseStringDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[21a]"></a>USBH_HID_EventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbh_hid.o(i.USBH_HID_EventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Process
</UL>

<P><STRONG><a name="[212]"></a>USBH_HID_GetHIDDescriptor</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usbh_hid.o(i.USBH_HID_GetHIDDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = USBH_HID_GetHIDDescriptor &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetDescriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_ClassRequest
</UL>

<P><STRONG><a name="[214]"></a>USBH_HID_GetHIDReportDescriptor</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usbh_hid.o(i.USBH_HID_GetHIDReportDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = USBH_HID_GetHIDReportDescriptor &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetDescriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_ClassRequest
</UL>

<P><STRONG><a name="[217]"></a>USBH_HID_GetReport</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usbh_hid.o(i.USBH_HID_GetReport))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = USBH_HID_GetReport &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Process
</UL>

<P><STRONG><a name="[d2]"></a>USBH_HID_KeybdInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, usbh_hid_keybd.o(i.USBH_HID_KeybdInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_HID_KeybdInit
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hid.o(i.USBH_HID_InterfaceInit)
</UL>
<P><STRONG><a name="[d3]"></a>USBH_HID_MouseInit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usbh_hid_mouse.o(i.USBH_HID_MouseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_HID_MouseInit
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hid.o(i.USBH_HID_InterfaceInit)
</UL>
<P><STRONG><a name="[215]"></a>USBH_HID_SetIdle</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usbh_hid.o(i.USBH_HID_SetIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = USBH_HID_SetIdle &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_ClassRequest
</UL>

<P><STRONG><a name="[216]"></a>USBH_HID_SetProtocol</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, usbh_hid.o(i.USBH_HID_SetProtocol))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = USBH_HID_SetProtocol &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_ClassRequest
</UL>

<P><STRONG><a name="[1be]"></a>USBH_Init</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, usbh_core.o(i.USBH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = USBH_Init &rArr; osThreadCreate &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageCreate
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Init
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeInitStateMachine
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_HOST_Init
</UL>

<P><STRONG><a name="[1e8]"></a>USBH_InterruptReceiveData</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, usbh_ioreq.o(i.USBH_InterruptReceiveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = USBH_InterruptReceiveData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_SubmitURB
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MTP_Events
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AUDIO_Control
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Process
</UL>

<P><STRONG><a name="[1fe]"></a>USBH_IsocSendData</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, usbh_ioreq.o(i.USBH_IsocSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = USBH_IsocSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_SubmitURB
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AUDIO_Transmit
</UL>

<P><STRONG><a name="[205]"></a>USBH_LL_ClosePipe</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbh_conf.o(i.USBH_LL_ClosePipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBH_LL_ClosePipe &rArr; HAL_HCD_HC_Halt &rArr; USB_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_HC_Halt
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ClosePipe
</UL>

<P><STRONG><a name="[12a]"></a>USBH_LL_Connect</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, usbh_core.o(i.USBH_LL_Connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = USBH_LL_Connect &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Connect_Callback
</UL>

<P><STRONG><a name="[12c]"></a>USBH_LL_Disconnect</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, usbh_core.o(i.USBH_LL_Disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = USBH_LL_Disconnect &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Stop
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Start
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_FreePipe
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Disconnect_Callback
</UL>

<P><STRONG><a name="[221]"></a>USBH_LL_DriverVBUS</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usbh_conf.o(i.USBH_LL_DriverVBUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBH_LL_DriverVBUS &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Start
</UL>

<P><STRONG><a name="[109]"></a>USBH_LL_GetLastXferSize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbh_conf.o(i.USBH_LL_GetLastXferSize))
<BR><BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_HC_GetXferCount
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PTP_Process
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_DecodeCSW
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_ProcessReception
</UL>

<P><STRONG><a name="[223]"></a>USBH_LL_GetSpeed</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usbh_conf.o(i.USBH_LL_GetSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_LL_GetSpeed &rArr; HAL_HCD_GetCurrentSpeed &rArr; USB_GetHostSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_GetCurrentSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[22c]"></a>USBH_LL_GetToggle</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usbh_conf.o(i.USBH_LL_GetToggle))
<BR><BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Process
</UL>

<P><STRONG><a name="[108]"></a>USBH_LL_GetURBState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbh_conf.o(i.USBH_LL_GetURBState))
<BR><BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_HC_GetURBState
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PTP_Process
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Process
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MTP_Events
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_ProcessTransmission
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_ProcessReception
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AUDIO_Transmit
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AUDIO_Control
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Process
</UL>

<P><STRONG><a name="[14e]"></a>USBH_LL_IncTimer</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbh_core.o(i.USBH_LL_IncTimer))
<BR><BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleSof
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_SOF_Callback
</UL>

<P><STRONG><a name="[21f]"></a>USBH_LL_Init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, usbh_conf.o(i.USBH_LL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = USBH_LL_Init &rArr; HAL_HCD_Init &rArr; HAL_HCD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Init
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_GetCurrentFrame
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_SetTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Init
</UL>

<P><STRONG><a name="[136]"></a>USBH_LL_NotifyURBChange</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbh_core.o(i.USBH_LL_NotifyURBChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = USBH_LL_NotifyURBChange &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_HC_NotifyURBChange_Callback
</UL>

<P><STRONG><a name="[227]"></a>USBH_LL_OpenPipe</STRONG> (Thumb, 26 bytes, Stack size 32 bytes, usbh_conf.o(i.USBH_LL_OpenPipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USBH_LL_OpenPipe &rArr; HAL_HCD_HC_Init &rArr; USB_HC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_HC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OpenPipe
</UL>

<P><STRONG><a name="[228]"></a>USBH_LL_ResetPort</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbh_conf.o(i.USBH_LL_ResetPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBH_LL_ResetPort &rArr; HAL_HCD_ResetPort &rArr; USB_ResetPort &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_ResetPort
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[226]"></a>USBH_LL_SetTimer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbh_core.o(i.USBH_LL_SetTimer))
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Init
</UL>

<P><STRONG><a name="[1f5]"></a>USBH_LL_SetToggle</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, usbh_conf.o(i.USBH_LL_SetToggle))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_InterfaceInit
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Process
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MTP_InterfaceInit
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CDC_InterfaceInit
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AUDIO_InterfaceInit
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_InterfaceInit
</UL>

<P><STRONG><a name="[220]"></a>USBH_LL_Start</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbh_conf.o(i.USBH_LL_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBH_LL_Start &rArr; HAL_HCD_Start &rArr; USB_DriveVbus
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Disconnect
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Start
</UL>

<P><STRONG><a name="[21b]"></a>USBH_LL_Stop</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbh_conf.o(i.USBH_LL_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USBH_LL_Stop &rArr; HAL_HCD_Stop &rArr; USB_StopHost
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Disconnect
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
</UL>

<P><STRONG><a name="[201]"></a>USBH_LL_SubmitURB</STRONG> (Thumb, 36 bytes, Stack size 40 bytes, usbh_conf.o(i.USBH_LL_SubmitURB))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_HC_SubmitRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_IsocSendData
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_InterruptReceiveData
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_BulkSendData
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_BulkReceiveData
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlSendSetup
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlSendData
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReceiveData
</UL>

<P><STRONG><a name="[22f]"></a>USBH_MSC_BOT_Init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usbh_msc_bot.o(i.USBH_MSC_BOT_Init))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_InterfaceInit
</UL>

<P><STRONG><a name="[22a]"></a>USBH_MSC_BOT_Process</STRONG> (Thumb, 674 bytes, Stack size 40 bytes, usbh_msc_bot.o(i.USBH_MSC_BOT_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = USBH_MSC_BOT_Process &rArr; USBH_MSC_BOT_REQ_Reset &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_SetToggle
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_GetURBState
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_GetToggle
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_REQ_Reset
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_DecodeCSW
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Abort
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_BulkSendData
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_BulkReceiveData
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_TestUnitReady
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_RequestSense
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_ReadCapacity
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_Inquiry
</UL>

<P><STRONG><a name="[22e]"></a>USBH_MSC_BOT_REQ_GetMaxLUN</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usbh_msc_bot.o(i.USBH_MSC_BOT_REQ_GetMaxLUN))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = USBH_MSC_BOT_REQ_GetMaxLUN &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_ClassRequest
</UL>

<P><STRONG><a name="[22d]"></a>USBH_MSC_BOT_REQ_Reset</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usbh_msc_bot.o(i.USBH_MSC_BOT_REQ_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = USBH_MSC_BOT_REQ_Reset &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Process
</UL>

<P><STRONG><a name="[230]"></a>USBH_MSC_SCSI_Inquiry</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, usbh_msc_scsi.o(i.USBH_MSC_SCSI_Inquiry))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = USBH_MSC_SCSI_Inquiry &rArr; USBH_MSC_BOT_Process &rArr; USBH_MSC_BOT_REQ_Reset &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Process
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Process
</UL>

<P><STRONG><a name="[232]"></a>USBH_MSC_SCSI_ReadCapacity</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, usbh_msc_scsi.o(i.USBH_MSC_SCSI_ReadCapacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = USBH_MSC_SCSI_ReadCapacity &rArr; USBH_MSC_BOT_Process &rArr; USBH_MSC_BOT_REQ_Reset &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Process
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Process
</UL>

<P><STRONG><a name="[233]"></a>USBH_MSC_SCSI_RequestSense</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, usbh_msc_scsi.o(i.USBH_MSC_SCSI_RequestSense))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = USBH_MSC_SCSI_RequestSense &rArr; USBH_MSC_BOT_Process &rArr; USBH_MSC_BOT_REQ_Reset &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Process
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Process
</UL>

<P><STRONG><a name="[231]"></a>USBH_MSC_SCSI_TestUnitReady</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, usbh_msc_scsi.o(i.USBH_MSC_SCSI_TestUnitReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = USBH_MSC_SCSI_TestUnitReady &rArr; USBH_MSC_BOT_Process &rArr; USBH_MSC_BOT_REQ_Reset &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Process
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Process
</UL>

<P><STRONG><a name="[1ae]"></a>USBH_MTP_EventsCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbh_mtp.o(i.USBH_MTP_EventsCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MTP_DecodeEvent
</UL>

<P><STRONG><a name="[1f4]"></a>USBH_OpenPipe</STRONG> (Thumb, 22 bytes, Stack size 32 bytes, usbh_pipes.o(i.USBH_OpenPipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = USBH_OpenPipe &rArr; USBH_LL_OpenPipe &rArr; HAL_HCD_HC_Init &rArr; USB_HC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_OpenPipe
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_InterfaceInit
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MTP_InterfaceInit
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CDC_InterfaceInit
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AUDIO_InterfaceInit
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_InterfaceInit
</UL>

<P><STRONG><a name="[23a]"></a>USBH_PTP_GetDeviceInfo</STRONG> (Thumb, 146 bytes, Stack size 56 bytes, usbh_mtp_ptp.o(i.USBH_PTP_GetDeviceInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = USBH_PTP_GetDeviceInfo &rArr; USBH_PTP_Process &rArr; USBH_BulkSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PTP_SendRequest
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PTP_Process
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTP_DecodeDeviceInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MTP_Process
</UL>

<P><STRONG><a name="[23f]"></a>USBH_PTP_GetResponse</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, usbh_mtp_ptp.o(i.USBH_PTP_GetResponse))
<BR><BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PTP_Process
</UL>

<P><STRONG><a name="[23b]"></a>USBH_PTP_GetStorageIds</STRONG> (Thumb, 146 bytes, Stack size 56 bytes, usbh_mtp_ptp.o(i.USBH_PTP_GetStorageIds))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = USBH_PTP_GetStorageIds &rArr; USBH_PTP_Process &rArr; USBH_BulkSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PTP_SendRequest
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PTP_Process
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTP_GetStorageIDs
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MTP_Process
</UL>

<P><STRONG><a name="[23c]"></a>USBH_PTP_GetStorageInfo</STRONG> (Thumb, 162 bytes, Stack size 64 bytes, usbh_mtp_ptp.o(i.USBH_PTP_GetStorageInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = USBH_PTP_GetStorageInfo &rArr; USBH_PTP_Process &rArr; USBH_BulkSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PTP_SendRequest
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PTP_Process
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTP_GetStorageInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MTP_Process
</UL>

<P><STRONG><a name="[238]"></a>USBH_PTP_Init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usbh_mtp_ptp.o(i.USBH_PTP_Init))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MTP_InterfaceInit
</UL>

<P><STRONG><a name="[239]"></a>USBH_PTP_OpenSession</STRONG> (Thumb, 122 bytes, Stack size 56 bytes, usbh_mtp_ptp.o(i.USBH_PTP_OpenSession))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = USBH_PTP_OpenSession &rArr; USBH_PTP_Process &rArr; USBH_BulkSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PTP_SendRequest
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PTP_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MTP_Process
</UL>

<P><STRONG><a name="[23e]"></a>USBH_PTP_Process</STRONG> (Thumb, 762 bytes, Stack size 80 bytes, usbh_mtp_ptp.o(i.USBH_PTP_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = USBH_PTP_Process &rArr; USBH_BulkSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_GetURBState
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_GetLastXferSize
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PTP_GetResponse
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTP_BufferFullCallback
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_BulkSendData
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_BulkReceiveData
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PTP_OpenSession
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PTP_GetStorageInfo
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PTP_GetStorageIds
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PTP_GetDeviceInfo
</UL>

<P><STRONG><a name="[23d]"></a>USBH_PTP_SendRequest</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, usbh_mtp_ptp.o(i.USBH_PTP_SendRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_PTP_SendRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PTP_OpenSession
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PTP_GetStorageInfo
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PTP_GetStorageIds
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PTP_GetDeviceInfo
</UL>

<P><STRONG><a name="[242]"></a>USBH_Process</STRONG> (Thumb, 440 bytes, Stack size 40 bytes, usbh_core.o(i.USBH_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = USBH_Process &rArr; USBH_HandleEnum &rArr; USBH_Get_StringDesc &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_ResetPort
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_GetSpeed
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Delay
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeInitStateMachine
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OpenPipe
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AllocPipe
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetCfg
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process_OS
</UL>

<P><STRONG><a name="[1bf]"></a>USBH_RegisterClass</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, usbh_core.o(i.USBH_RegisterClass))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_RegisterClass
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_HOST_Init
</UL>

<P><STRONG><a name="[202]"></a>USBH_SelectInterface</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usbh_core.o(i.USBH_SelectInterface))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_InterfaceInit
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MTP_InterfaceInit
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CDC_InterfaceInit
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_InterfaceInit
</UL>

<P><STRONG><a name="[21d]"></a>USBH_SetAddress</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usbh_ctlreq.o(i.USBH_SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = USBH_SetAddress &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[243]"></a>USBH_SetCfg</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usbh_ctlreq.o(i.USBH_SetCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = USBH_SetCfg &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[1e5]"></a>USBH_SetInterface</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usbh_ctlreq.o(i.USBH_SetInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = USBH_SetInterface &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AUDIO_ClassRequest
</UL>

<P><STRONG><a name="[1c0]"></a>USBH_Start</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbh_core.o(i.USBH_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBH_Start &rArr; USBH_LL_Start &rArr; HAL_HCD_Start &rArr; USB_DriveVbus
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Start
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_DriverVBUS
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_HOST_Init
</UL>

<P><STRONG><a name="[147]"></a>USB_CoreInit</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, stm32f2xx_ll_usb.o(i.USB_CoreInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_CoreInit
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CoreReset
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Init
</UL>

<P><STRONG><a name="[145]"></a>USB_DisableGlobalInt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_ll_usb.o(i.USB_DisableGlobalInt))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StopHost
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Init
</UL>

<P><STRONG><a name="[246]"></a>USB_DoPing</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32f2xx_ll_usb.o(i.USB_DoPing))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_DoPing
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HC_StartXfer
</UL>

<P><STRONG><a name="[151]"></a>USB_DriveVbus</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32f2xx_ll_usb.o(i.USB_DriveVbus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_DriveVbus
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostInit
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Start
</UL>

<P><STRONG><a name="[150]"></a>USB_EnableGlobalInt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_ll_usb.o(i.USB_EnableGlobalInt))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StopHost
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Start
</UL>

<P><STRONG><a name="[249]"></a>USB_FlushRxFifo</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f2xx_ll_usb.o(i.USB_FlushRxFifo))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StopHost
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostInit
</UL>

<P><STRONG><a name="[248]"></a>USB_FlushTxFifo</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f2xx_ll_usb.o(i.USB_FlushTxFifo))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StopHost
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostInit
</UL>

<P><STRONG><a name="[12e]"></a>USB_GetCurrentFrame</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_ll_usb.o(i.USB_GetCurrentFrame))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_GetCurrentFrame
</UL>

<P><STRONG><a name="[130]"></a>USB_GetHostSpeed</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f2xx_ll_usb.o(i.USB_GetHostSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_GetHostSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_GetCurrentSpeed
</UL>

<P><STRONG><a name="[13a]"></a>USB_GetMode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_ll_usb.o(i.USB_GetMode))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>

<P><STRONG><a name="[132]"></a>USB_HC_Halt</STRONG> (Thumb, 376 bytes, Stack size 8 bytes, stm32f2xx_ll_usb.o(i.USB_HC_Halt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_HC_Halt
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_HC_Halt
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_HC_OUT_IRQHandler
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_HC_IN_IRQHandler
</UL>

<P><STRONG><a name="[134]"></a>USB_HC_Init</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, stm32f2xx_ll_usb.o(i.USB_HC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_HC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_HC_Init
</UL>

<P><STRONG><a name="[13f]"></a>USB_HC_ReadInterrupt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_ll_usb.o(i.USB_HC_ReadInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>

<P><STRONG><a name="[138]"></a>USB_HC_StartXfer</STRONG> (Thumb, 386 bytes, Stack size 40 bytes, stm32f2xx_ll_usb.o(i.USB_HC_StartXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WritePacket
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DoPing
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_HC_SubmitRequest
</UL>

<P><STRONG><a name="[149]"></a>USB_HostInit</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, stm32f2xx_ll_usb.o(i.USB_HostInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USB_HostInit &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushTxFifo
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushRxFifo
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DriveVbus
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Init
</UL>

<P><STRONG><a name="[13c]"></a>USB_InitFSLSPClkSel</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, stm32f2xx_ll_usb.o(i.USB_InitFSLSPClkSel))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Port_IRQHandler
</UL>

<P><STRONG><a name="[13b]"></a>USB_ReadInterrupts</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_ll_usb.o(i.USB_ReadInterrupts))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>

<P><STRONG><a name="[19f]"></a>USB_ReadPacket</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f2xx_ll_usb.o(i.USB_ReadPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_ReadPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_RXQLVL_IRQHandler
</UL>

<P><STRONG><a name="[14d]"></a>USB_ResetPort</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32f2xx_ll_usb.o(i.USB_ResetPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_ResetPort &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_ResetPort
</UL>

<P><STRONG><a name="[148]"></a>USB_SetCurrentMode</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f2xx_ll_usb.o(i.USB_SetCurrentMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_SetCurrentMode &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Init
</UL>

<P><STRONG><a name="[153]"></a>USB_StopHost</STRONG> (Thumb, 174 bytes, Stack size 20 bytes, stm32f2xx_ll_usb.o(i.USB_StopHost))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_StopHost
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushTxFifo
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushRxFifo
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableGlobalInt
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisableGlobalInt
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Stop
</UL>

<P><STRONG><a name="[247]"></a>USB_WritePacket</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, stm32f2xx_ll_usb.o(i.USB_WritePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HC_StartXfer
</UL>

<P><STRONG><a name="[72]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[24a]"></a>__0snprintf</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3b2]"></a>__1snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[1ab]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>

<P><STRONG><a name="[3b3]"></a>__c89snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[3b4]"></a>snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[24c]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3b5]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[1a5]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_gprsmod_tcp_u8_data_transmit_with_receive
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_gprsmod_http_data_transmit_with_receive
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_blemod_hc05_uart_fetch_mac_addr_in_AT_cmd_mode
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_blemod_uart_hc05_init
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_pack
</UL>

<P><STRONG><a name="[3b6]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[3b7]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[24d]"></a>__0vsnprintf</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3b8]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[3b9]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[3ba]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[1a4]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
</UL>

<P><STRONG><a name="[258]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[e8]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_task_create
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_rcv
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_queue_create
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[3bb]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[24e]"></a>__kernel_poly</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[24f]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_infnan &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[251]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_underflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[3bc]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[3bd]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[3be]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[382]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[104]"></a>assert_failed</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.assert_failed))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive_IT
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Stop
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Init
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
</UL>

<P><STRONG><a name="[257]"></a>atan</STRONG> (Thumb, 474 bytes, Stack size 40 bytes, atan.o(i.atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_navig_mpu6050_angle_caculate_by_acc_xyz
</UL>

<P><STRONG><a name="[390]"></a>configureTimerForRunTimeStats</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, freertos.o(i.configureTimerForRunTimeStats))
<BR><BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[384]"></a>eTaskConfirmSleepModeStatus</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, tasks.o(i.eTaskConfirmSleepModeStatus))
<BR><BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
</UL>

<P><STRONG><a name="[218]"></a>fifo_init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbh_hid.o(i.fifo_init))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_KeybdInit
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_MouseInit
</UL>

<P><STRONG><a name="[219]"></a>fifo_write</STRONG> (Thumb, 84 bytes, Stack size 20 bytes, usbh_hid.o(i.fifo_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fifo_write
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Process
</UL>

<P><STRONG><a name="[1ee]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_InterfaceDeInit
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MTP_InterfaceDeInit
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CDC_InterfaceDeInit
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AUDIO_InterfaceDeInit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_InterfaceDeInit
</UL>

<P><STRONG><a name="[d]"></a>fsm_adclibra_init</STRONG> (Thumb, 268 bytes, Stack size 24 bytes, l2adclibra.o(i.fsm_adclibra_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1336<LI>Call Chain = fsm_adclibra_init &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_usleep
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_timer_start
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_adclibra_hw_init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_adclibra_restart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2adclibra.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>fsm_adclibra_restart</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, l2adclibra.o(i.fsm_adclibra_restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344<LI>Call Chain = fsm_adclibra_restart &rArr; fsm_adclibra_init &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_adclibra_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2adclibra.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>fsm_adclibra_stop_rcv</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, l2adclibra.o(i.fsm_adclibra_stop_rcv))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = fsm_adclibra_stop_rcv &rArr; FsmSetState &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2adclibra.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>fsm_adclibra_task_entry</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, l2adclibra.o(i.fsm_adclibra_task_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = fsm_adclibra_task_entry &rArr; FsmSetState &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2adclibra.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>fsm_adclibra_time_out</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, l2adclibra.o(i.fsm_adclibra_time_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360<LI>Call Chain = fsm_adclibra_time_out &rArr; func_adclibra_time_out_period_scan &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmGetState
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_adclibra_time_out_period_scan
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2adclibra.o(.data)
</UL>
<P><STRONG><a name="[4b]"></a>fsm_ccl_dcmi_sensor_status_resp</STRONG> (Thumb, 222 bytes, Stack size 88 bytes, l3ccl.o(i.fsm_ccl_dcmi_sensor_status_resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 1400<LI>Call Chain = fsm_ccl_dcmi_sensor_status_resp &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_stm_main_recovery_from_fault
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l3ccl.o(.data)
</UL>
<P><STRONG><a name="[4f]"></a>fsm_ccl_dido_door_open_event</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, l3ccl.o(i.fsm_ccl_dido_door_open_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344<LI>Call Chain = fsm_ccl_dido_door_open_event &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_lock2_do1_off
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_lock1_do1_off
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_usleep
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_timer_stop
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_stm_main_recovery_from_fault
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_dcmiaris_take_picture
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l3ccl.o(.data)
</UL>
<P><STRONG><a name="[48]"></a>fsm_ccl_dido_sensor_status_resp</STRONG> (Thumb, 228 bytes, Stack size 64 bytes, l3ccl.o(i.fsm_ccl_dido_sensor_status_resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 1376<LI>Call Chain = fsm_ccl_dido_sensor_status_resp &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_stm_main_recovery_from_fault
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l3ccl.o(.data)
</UL>
<P><STRONG><a name="[51]"></a>fsm_ccl_door_close_event</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, l3ccl.o(i.fsm_ccl_door_close_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344<LI>Call Chain = fsm_ccl_door_close_event &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_stm_main_recovery_from_fault
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l3ccl.o(.data)
</UL>
<P><STRONG><a name="[52]"></a>fsm_ccl_fault_state_trigger</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, l3ccl.o(i.fsm_ccl_fault_state_trigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360<LI>Call Chain = fsm_ccl_fault_state_trigger &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_ledpisces_galowag_start
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_stm_main_recovery_from_fault
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_open_all_sensor_power
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l3ccl.o(.data)
</UL>
<P><STRONG><a name="[4d]"></a>fsm_ccl_hand_active_trigger_to_work</STRONG> (Thumb, 396 bytes, Stack size 56 bytes, l3ccl.o(i.fsm_ccl_hand_active_trigger_to_work))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368<LI>Call Chain = fsm_ccl_hand_active_trigger_to_work &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_usleep
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_timer_start
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_wmmw_navig_mpu6050_axis_z_angle_caculate_by_static_method
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_navig_mpu6050_init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_stm_main_recovery_from_fault
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_open_all_sensor_power
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_dcmiaris_take_picture
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l3ccl.o(.data)
</UL>
<P><STRONG><a name="[4a]"></a>fsm_ccl_i2c_sensor_status_resp</STRONG> (Thumb, 196 bytes, Stack size 56 bytes, l3ccl.o(i.fsm_ccl_i2c_sensor_status_resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368<LI>Call Chain = fsm_ccl_i2c_sensor_status_resp &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_stm_main_recovery_from_fault
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l3ccl.o(.data)
</UL>
<P><STRONG><a name="[43]"></a>fsm_ccl_init</STRONG> (Thumb, 882 bytes, Stack size 40 bytes, l3ccl.o(i.fsm_ccl_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352<LI>Call Chain = fsm_ccl_init &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_lock_act_flag_read
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_usleep
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_sleep
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_timer_start
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_ledpisces_galowag_start
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_door_open_state
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_vmmw_rtc_pcf8563_set_alarm_process
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_vmmw_rtc_pcf8563_init
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_vmmw_rtc_pcf8563_get_alarm_duration
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_stm_main_recovery_from_fault
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_hw_init
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_close_all_sensor_power
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_restart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l3ccl.o(.data)
</UL>
<P><STRONG><a name="[47]"></a>fsm_ccl_period_report_trigger</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, l3ccl.o(i.fsm_ccl_period_report_trigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328<LI>Call Chain = fsm_ccl_period_report_trigger &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_stm_main_recovery_from_fault
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_open_all_sensor_power
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l3ccl.o(.data)
</UL>
<P><STRONG><a name="[45]"></a>fsm_ccl_restart</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, l3ccl.o(i.fsm_ccl_restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360<LI>Call Chain = fsm_ccl_restart &rArr; fsm_ccl_init &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l3ccl.o(.data)
</UL>
<P><STRONG><a name="[50]"></a>fsm_ccl_sps_close_door_report_cfm</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, l3ccl.o(i.fsm_ccl_sps_close_door_report_cfm))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = fsm_ccl_sps_close_door_report_cfm &rArr; ihu_timer_stop &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_sleep
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_timer_stop
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_stm_main_recovery_from_fault
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_close_all_sensor_power
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cccl_cpu_power_off
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l3ccl.o(.data)
</UL>
<P><STRONG><a name="[4e]"></a>fsm_ccl_sps_cloud_fb</STRONG> (Thumb, 400 bytes, Stack size 32 bytes, l3ccl.o(i.fsm_ccl_sps_cloud_fb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344<LI>Call Chain = fsm_ccl_sps_cloud_fb &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_lock2_do1_on
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_lock2_do1_off
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_lock1_do1_on
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_lock1_do1_off
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_usleep
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_sleep
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_timer_stop
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_timer_start
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_ledpisces_galowag_start
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_stm_main_recovery_from_fault
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_close_all_sensor_power
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cccl_cpu_power_off
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l3ccl.o(.data)
</UL>
<P><STRONG><a name="[4c]"></a>fsm_ccl_sps_event_report_cfm</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, l3ccl.o(i.fsm_ccl_sps_event_report_cfm))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = fsm_ccl_sps_event_report_cfm &rArr; func_ccl_stm_main_recovery_from_fault &rArr; func_cccl_cpu_power_off &rArr; ihu_bsp_stm32_dido_f2board_cpu_power_ctrl_off &rArr; IhuDebugPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_sleep
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_stm_main_recovery_from_fault
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_close_all_sensor_power
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cccl_cpu_power_off
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l3ccl.o(.data)
</UL>
<P><STRONG><a name="[53]"></a>fsm_ccl_sps_fault_report_cfm</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, l3ccl.o(i.fsm_ccl_sps_fault_report_cfm))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = fsm_ccl_sps_fault_report_cfm &rArr; func_ccl_stm_main_recovery_from_fault &rArr; func_cccl_cpu_power_off &rArr; ihu_bsp_stm32_dido_f2board_cpu_power_ctrl_off &rArr; IhuDebugPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_sleep
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_stm_main_recovery_from_fault
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_close_all_sensor_power
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cccl_cpu_power_off
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l3ccl.o(.data)
</UL>
<P><STRONG><a name="[49]"></a>fsm_ccl_sps_sensor_status_resp</STRONG> (Thumb, 190 bytes, Stack size 56 bytes, l3ccl.o(i.fsm_ccl_sps_sensor_status_resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368<LI>Call Chain = fsm_ccl_sps_sensor_status_resp &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_stm_main_recovery_from_fault
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l3ccl.o(.data)
</UL>
<P><STRONG><a name="[44]"></a>fsm_ccl_stop_rcv</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, l3ccl.o(i.fsm_ccl_stop_rcv))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = fsm_ccl_stop_rcv &rArr; FsmSetState &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l3ccl.o(.data)
</UL>
<P><STRONG><a name="[42]"></a>fsm_ccl_task_entry</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, l3ccl.o(i.fsm_ccl_task_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = fsm_ccl_task_entry &rArr; FsmSetState &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l3ccl.o(.data)
</UL>
<P><STRONG><a name="[46]"></a>fsm_ccl_time_out</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, l3ccl.o(i.fsm_ccl_time_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 1408<LI>Call Chain = fsm_ccl_time_out &rArr; func_ccl_time_out_lock_work_active &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_time_out_period_event_report
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_time_out_lock_work_wait_door_for_open
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_time_out_lock_work_active
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l3ccl.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>fsm_com_do_nothing</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, vmfreeoslayer.o(i.fsm_com_do_nothing))
<BR>[Address Reference Count : 8]<UL><LI> l2adclibra.o(.data)
<LI> l1timer_freeos.o(.data)
<LI> l2i2caries.o(.data)
<LI> l2didocap.o(.data)
<LI> l2ledpisces.o(.data)
<LI> l2dcmiaris.o(.data)
<LI> l2spsvirgo.o(.data)
<LI> l3ccl.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>fsm_com_heart_beat_rcv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, vmfreeoslayer.o(i.fsm_com_heart_beat_rcv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360<LI>Call Chain = fsm_com_heart_beat_rcv &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
</UL>
<BR>[Address Reference Count : 7]<UL><LI> l2adclibra.o(.data)
<LI> l2i2caries.o(.data)
<LI> l2didocap.o(.data)
<LI> l2ledpisces.o(.data)
<LI> l2dcmiaris.o(.data)
<LI> l2spsvirgo.o(.data)
<LI> l3ccl.o(.data)
</UL>
<P><STRONG><a name="[41]"></a>fsm_dcmiaris_ccl_sensor_status_req</STRONG> (Thumb, 192 bytes, Stack size 56 bytes, l2dcmiaris.o(i.fsm_dcmiaris_ccl_sensor_status_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368<LI>Call Chain = fsm_dcmiaris_ccl_sensor_status_req &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2dcmiaris.o(.data)
</UL>
<P><STRONG><a name="[3d]"></a>fsm_dcmiaris_init</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, l2dcmiaris.o(i.fsm_dcmiaris_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1336<LI>Call Chain = fsm_dcmiaris_init &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_usleep
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_dcmiaris_hw_init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_dcmiaris_restart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2dcmiaris.o(.data)
</UL>
<P><STRONG><a name="[3f]"></a>fsm_dcmiaris_restart</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, l2dcmiaris.o(i.fsm_dcmiaris_restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344<LI>Call Chain = fsm_dcmiaris_restart &rArr; fsm_dcmiaris_init &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_dcmiaris_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2dcmiaris.o(.data)
</UL>
<P><STRONG><a name="[3e]"></a>fsm_dcmiaris_stop_rcv</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, l2dcmiaris.o(i.fsm_dcmiaris_stop_rcv))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = fsm_dcmiaris_stop_rcv &rArr; FsmSetState &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2dcmiaris.o(.data)
</UL>
<P><STRONG><a name="[3c]"></a>fsm_dcmiaris_task_entry</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, l2dcmiaris.o(i.fsm_dcmiaris_task_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = fsm_dcmiaris_task_entry &rArr; FsmSetState &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2dcmiaris.o(.data)
</UL>
<P><STRONG><a name="[40]"></a>fsm_dcmiaris_time_out</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, l2dcmiaris.o(i.fsm_dcmiaris_time_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360<LI>Call Chain = fsm_dcmiaris_time_out &rArr; func_dcmiaris_time_out_period_scan &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmGetState
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_dcmiaris_time_out_period_scan
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2dcmiaris.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>fsm_didocap_ccl_door_close_req</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, l2didocap.o(i.fsm_didocap_ccl_door_close_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352<LI>Call Chain = fsm_didocap_ccl_door_close_req &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_sleep
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_didocap_ccl_work_mode_ul_scan_all_door_close
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2didocap.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>fsm_didocap_ccl_door_open_req</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, l2didocap.o(i.fsm_didocap_ccl_door_open_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352<LI>Call Chain = fsm_didocap_ccl_door_open_req &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_sleep
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_didocap_ccl_work_mode_ul_scan_any_door_open
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2didocap.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>fsm_didocap_ccl_sensor_status_req</STRONG> (Thumb, 258 bytes, Stack size 48 bytes, l2didocap.o(i.fsm_didocap_ccl_sensor_status_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360<LI>Call Chain = fsm_didocap_ccl_sensor_status_req &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_adclibra_ccl_scan_battery_warning_level
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_water_state
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_temp_value
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_smoke_state
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_humid_value
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_fall_state
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_bat_value
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2didocap.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>fsm_didocap_init</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, l2didocap.o(i.fsm_didocap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1336<LI>Call Chain = fsm_didocap_init &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_usleep
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_didocap_hw_init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_restart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2didocap.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>fsm_didocap_restart</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, l2didocap.o(i.fsm_didocap_restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344<LI>Call Chain = fsm_didocap_restart &rArr; fsm_didocap_init &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2didocap.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>fsm_didocap_stop_rcv</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, l2didocap.o(i.fsm_didocap_stop_rcv))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = fsm_didocap_stop_rcv &rArr; FsmSetState &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2didocap.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>fsm_didocap_task_entry</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, l2didocap.o(i.fsm_didocap_task_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = fsm_didocap_task_entry &rArr; FsmSetState &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2didocap.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>fsm_didocap_time_out</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, l2didocap.o(i.fsm_didocap_time_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360<LI>Call Chain = fsm_didocap_time_out &rArr; func_didocap_time_out_period_scan &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmGetState
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_didocap_time_out_period_scan
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2didocap.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>fsm_i2caries_ccl_sensor_status_req</STRONG> (Thumb, 260 bytes, Stack size 56 bytes, l2i2caries.o(i.fsm_i2caries_ccl_sensor_status_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368<LI>Call Chain = fsm_i2caries_ccl_sensor_status_req &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_wmmw_navig_mpu6050_axis_z_angle_caculate_by_static_method
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_navig_mpu6050_init
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2i2caries.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>fsm_i2caries_init</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, l2i2caries.o(i.fsm_i2caries_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1336<LI>Call Chain = fsm_i2caries_init &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_usleep
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_i2caries_hw_init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_i2caries_restart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2i2caries.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>fsm_i2caries_restart</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, l2i2caries.o(i.fsm_i2caries_restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344<LI>Call Chain = fsm_i2caries_restart &rArr; fsm_i2caries_init &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_i2caries_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2i2caries.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>fsm_i2caries_stop_rcv</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, l2i2caries.o(i.fsm_i2caries_stop_rcv))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = fsm_i2caries_stop_rcv &rArr; FsmSetState &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2i2caries.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>fsm_i2caries_task_entry</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, l2i2caries.o(i.fsm_i2caries_task_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = fsm_i2caries_task_entry &rArr; FsmSetState &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2i2caries.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>fsm_i2caries_time_out</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, l2i2caries.o(i.fsm_i2caries_time_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360<LI>Call Chain = fsm_i2caries_time_out &rArr; func_i2caries_time_out_period_scan &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmGetState
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_i2caries_time_out_period_scan
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2i2caries.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>fsm_ledpisces_init</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, l2ledpisces.o(i.fsm_ledpisces_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1336<LI>Call Chain = fsm_ledpisces_init &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_usleep
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_timer_start
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ledpisces_hw_init
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ledpisces_restart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2ledpisces.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>fsm_ledpisces_restart</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, l2ledpisces.o(i.fsm_ledpisces_restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344<LI>Call Chain = fsm_ledpisces_restart &rArr; fsm_ledpisces_init &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ledpisces_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2ledpisces.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>fsm_ledpisces_stop_rcv</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, l2ledpisces.o(i.fsm_ledpisces_stop_rcv))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = fsm_ledpisces_stop_rcv &rArr; FsmSetState &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2ledpisces.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>fsm_ledpisces_task_entry</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, l2ledpisces.o(i.fsm_ledpisces_task_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = fsm_ledpisces_task_entry &rArr; FsmSetState &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2ledpisces.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>fsm_ledpisces_time_out</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, l2ledpisces.o(i.fsm_ledpisces_time_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360<LI>Call Chain = fsm_ledpisces_time_out &rArr; func_ledpisces_time_out_period_scan &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmGetState
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ledpisces_time_out_period_scan
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ledpisces_time_out_galowag_scan
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2ledpisces.o(.data)
</UL>
<P><STRONG><a name="[3b]"></a>fsm_spsvirgo_ccl_close_door_report_send</STRONG> (Thumb, 978 bytes, Stack size 872 bytes, l2spsvirgo.o(i.fsm_spsvirgo_ccl_close_door_report_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 2808<LI>Call Chain = fsm_spsvirgo_ccl_close_door_report_send &rArr; func_cloud_standard_xml_unpack &rArr; func_cloud_spsvirgo_ccl_msg_ccl_state_confirm_received_handle &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_gprsmod_tcp_u8_data_transmit_with_receive
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_gprsmod_http_data_transmit_with_receive
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_spsvirgo_ccl_fetch_rssi_value
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_water_state
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_temp_value
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_smoke_state
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_shake_state
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_rsv2_value
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_rsv1_value
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_humid_value
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_fall_state
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_door_open_state
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_bat_value
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_bat_state
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_dcmiaris_ccl_sleep_and_fault_mode_ul_scan_illegal_dcmi_value
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_pack
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2spsvirgo.o(.data)
</UL>
<P><STRONG><a name="[39]"></a>fsm_spsvirgo_ccl_event_report_send</STRONG> (Thumb, 950 bytes, Stack size 880 bytes, l2spsvirgo.o(i.fsm_spsvirgo_ccl_event_report_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 2816<LI>Call Chain = fsm_spsvirgo_ccl_event_report_send &rArr; func_cloud_standard_xml_unpack &rArr; func_cloud_spsvirgo_ccl_msg_ccl_state_confirm_received_handle &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_gprsmod_http_data_transmit_with_receive
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_spsvirgo_ccl_fetch_rssi_value
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_water_state
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_temp_value
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_smoke_state
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_shake_state
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_rsv2_value
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_rsv1_value
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_humid_value
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_fall_state
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_door_open_state
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_bat_value
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_bat_state
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_dcmiaris_ccl_sleep_and_fault_mode_ul_scan_illegal_dcmi_value
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_pack
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2spsvirgo.o(.data)
</UL>
<P><STRONG><a name="[3a]"></a>fsm_spsvirgo_ccl_fault_report_send</STRONG> (Thumb, 914 bytes, Stack size 880 bytes, l2spsvirgo.o(i.fsm_spsvirgo_ccl_fault_report_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 2816<LI>Call Chain = fsm_spsvirgo_ccl_fault_report_send &rArr; func_cloud_standard_xml_unpack &rArr; func_cloud_spsvirgo_ccl_msg_ccl_state_confirm_received_handle &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_gprsmod_http_data_transmit_with_receive
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_spsvirgo_ccl_fetch_rssi_value
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_water_state
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_temp_value
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_smoke_state
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_shake_state
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_rsv2_value
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_rsv1_value
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_humid_value
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_fall_state
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_door_open_state
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_bat_value
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_bat_state
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_dcmiaris_ccl_sleep_and_fault_mode_ul_scan_illegal_dcmi_value
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_pack
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2spsvirgo.o(.data)
</UL>
<P><STRONG><a name="[37]"></a>fsm_spsvirgo_ccl_open_auth_inq</STRONG> (Thumb, 616 bytes, Stack size 840 bytes, l2spsvirgo.o(i.fsm_spsvirgo_ccl_open_auth_inq))
<BR><BR>[Stack]<UL><LI>Max Depth = 2776<LI>Call Chain = fsm_spsvirgo_ccl_open_auth_inq &rArr; func_cloud_standard_xml_unpack &rArr; func_cloud_spsvirgo_ccl_msg_ccl_state_confirm_received_handle &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_rfidmod_nrf24l01_spi_read_id
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_rfidmod_mf522_spi_read_id
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_gprsmod_http_data_transmit_with_receive
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_blemod_hc05_uart_fetch_mac_addr_in_AT_cmd_mode
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_pack
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2spsvirgo.o(.data)
</UL>
<P><STRONG><a name="[38]"></a>fsm_spsvirgo_ccl_sensor_status_req</STRONG> (Thumb, 242 bytes, Stack size 64 bytes, l2spsvirgo.o(i.fsm_spsvirgo_ccl_sensor_status_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 1376<LI>Call Chain = fsm_spsvirgo_ccl_sensor_status_req &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_usleep
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_spsvirgo_ccl_fetch_rssi_value
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2spsvirgo.o(.data)
</UL>
<P><STRONG><a name="[32]"></a>fsm_spsvirgo_init</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, l2spsvirgo.o(i.fsm_spsvirgo_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1336<LI>Call Chain = fsm_spsvirgo_init &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_usleep
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_spsvirgo_hw_init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_restart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2spsvirgo.o(.data)
</UL>
<P><STRONG><a name="[36]"></a>fsm_spsvirgo_l2frame_rcv</STRONG> (Thumb, 132 bytes, Stack size 584 bytes, l2spsvirgo.o(i.fsm_spsvirgo_l2frame_rcv))
<BR><BR>[Stack]<UL><LI>Max Depth = 2520<LI>Call Chain = fsm_spsvirgo_l2frame_rcv &rArr; func_cloud_standard_xml_unpack &rArr; func_cloud_spsvirgo_ccl_msg_ccl_state_confirm_received_handle &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2spsvirgo.o(.data)
</UL>
<P><STRONG><a name="[34]"></a>fsm_spsvirgo_restart</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, l2spsvirgo.o(i.fsm_spsvirgo_restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344<LI>Call Chain = fsm_spsvirgo_restart &rArr; fsm_spsvirgo_init &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2spsvirgo.o(.data)
</UL>
<P><STRONG><a name="[33]"></a>fsm_spsvirgo_stop_rcv</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, l2spsvirgo.o(i.fsm_spsvirgo_stop_rcv))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = fsm_spsvirgo_stop_rcv &rArr; FsmSetState &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2spsvirgo.o(.data)
</UL>
<P><STRONG><a name="[31]"></a>fsm_spsvirgo_task_entry</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, l2spsvirgo.o(i.fsm_spsvirgo_task_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = fsm_spsvirgo_task_entry &rArr; FsmSetState &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2spsvirgo.o(.data)
</UL>
<P><STRONG><a name="[35]"></a>fsm_spsvirgo_time_out</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, l2spsvirgo.o(i.fsm_spsvirgo_time_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360<LI>Call Chain = fsm_spsvirgo_time_out &rArr; func_spsvirgo_time_out_period_scan &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmGetState
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_spsvirgo_time_out_period_scan
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2spsvirgo.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>fsm_timer_init</STRONG> (Thumb, 348 bytes, Stack size 32 bytes, l1timer_freeos.o(i.fsm_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344<LI>Call Chain = fsm_timer_init &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_usleep
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_timer_hw_init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_timer_restart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l1timer_freeos.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>fsm_timer_restart</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, l1timer_freeos.o(i.fsm_timer_restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352<LI>Call Chain = fsm_timer_restart &rArr; fsm_timer_init &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_timer_init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l1timer_freeos.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>fsm_timer_stop_rcv</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, l1timer_freeos.o(i.fsm_timer_stop_rcv))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = fsm_timer_stop_rcv &rArr; FsmSetState &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l1timer_freeos.o(.data)
</UL>
<P><STRONG><a name="[0]"></a>fsm_timer_task_entry</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, l1timer_freeos.o(i.fsm_timer_task_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = fsm_timer_task_entry &rArr; FsmSetState &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l1timer_freeos.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>fsm_vmfo_heart_beat</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, l1vmfo.o(i.fsm_vmfo_heart_beat))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = fsm_vmfo_heart_beat &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l1vmfo.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>fsm_vmfo_init</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, l1vmfo.o(i.fsm_vmfo_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = fsm_vmfo_init &rArr; ihu_timer_start &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_timer_start
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_vmfo_hw_init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_restart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l1vmfo.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>fsm_vmfo_init_fb</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, l1vmfo.o(i.fsm_vmfo_init_fb))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = fsm_vmfo_init_fb &rArr; IhuDebugPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_vmfo_init_caculate_all_fb
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l1vmfo.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>fsm_vmfo_restart</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, l1vmfo.o(i.fsm_vmfo_restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = fsm_vmfo_restart &rArr; fsm_vmfo_init &rArr; ihu_timer_start &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l1vmfo.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>fsm_vmfo_stop_rcv</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, l1vmfo.o(i.fsm_vmfo_stop_rcv))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = fsm_vmfo_stop_rcv &rArr; FsmSetState &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l1vmfo.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>fsm_vmfo_task_entry</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, l1vmfo.o(i.fsm_vmfo_task_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = fsm_vmfo_task_entry &rArr; FsmSetState &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l1vmfo.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>fsm_vmfo_time_out</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, l1vmfo.o(i.fsm_vmfo_time_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 1344<LI>Call Chain = fsm_vmfo_time_out &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmGetState
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_vmfo_time_out_period_scan
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l1vmfo.o(.data)
</UL>
<P><STRONG><a name="[25a]"></a>func_adclibra_hw_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, l2adclibra.o(i.func_adclibra_hw_init))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_adclibra_init
</UL>

<P><STRONG><a name="[25c]"></a>func_adclibra_time_out_period_scan</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, l2adclibra.o(i.func_adclibra_time_out_period_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328<LI>Call Chain = func_adclibra_time_out_period_scan &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_adclibra_time_out
</UL>

<P><STRONG><a name="[29e]"></a>func_blemod_uart_clear_receive_buffer</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, vmmw_ble.o(i.func_blemod_uart_clear_receive_buffer))
<BR><BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_blemod_hc05_uart_fetch_mac_addr_in_AT_cmd_mode
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_blemod_uart_send_AT_command
</UL>

<P><STRONG><a name="[29c]"></a>func_blemod_uart_hc05_init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, vmmw_ble.o(i.func_blemod_uart_hc05_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = func_blemod_uart_hc05_init &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_blemod_hc05_uart_fetch_mac_addr_in_AT_cmd_mode
</UL>

<P><STRONG><a name="[29d]"></a>func_blemod_uart_send_AT_command</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, vmmw_ble.o(i.func_blemod_uart_send_AT_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = func_blemod_uart_send_AT_command &rArr; func_blemod_uart_send_string &rArr; ihu_bsp_stm32_sps_ble_send_data &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_sps_ble_send_data
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_usleep
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_blemod_uart_send_string
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_blemod_uart_clear_receive_buffer
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_blemod_hc05_uart_fetch_mac_addr_in_AT_cmd_mode
</UL>

<P><STRONG><a name="[2a0]"></a>func_blemod_uart_send_string</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, vmmw_ble.o(i.func_blemod_uart_send_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = func_blemod_uart_send_string &rArr; ihu_bsp_stm32_sps_ble_send_data &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_sps_ble_send_data
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_blemod_uart_send_AT_command
</UL>

<P><STRONG><a name="[2a6]"></a>func_bsp_stm32_dido_dht11_read_temp_and_humidity</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, bsp_dido.o(i.func_bsp_stm32_dido_dht11_read_temp_and_humidity))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = func_bsp_stm32_dido_dht11_read_temp_and_humidity &rArr; IhuDebugPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_bsp_stm32_dido_dht11_read_byte
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_bsp_stm32_dido_dht11_mode_out_PP
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_bsp_stm32_dido_dht11_mode_IPU
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Delay
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_usleep
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_dht11_temp_read
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_dht11_humid_read
</UL>

<P><STRONG><a name="[26f]"></a>func_cccl_cpu_power_off</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, l3ccl.o(i.func_cccl_cpu_power_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = func_cccl_cpu_power_off &rArr; ihu_bsp_stm32_dido_f2board_cpu_power_ctrl_off &rArr; IhuDebugPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_cpu_power_ctrl_off
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_vmmw_rtc_pcf8563_clear_af_and_power_off_cpu
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_time_out_lock_work_active
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_stm_main_recovery_from_fault
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_sps_fault_report_cfm
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_sps_event_report_cfm
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_sps_cloud_fb
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_sps_close_door_report_cfm
</UL>

<P><STRONG><a name="[26a]"></a>func_ccl_close_all_sensor_power</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, l3ccl.o(i.func_ccl_close_all_sensor_power))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = func_ccl_close_all_sensor_power &rArr; ihu_usleep &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_sensor_power_ctrl_off
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_mq2_cam_power_ctrl_off
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_gprsmod_power_supply_off
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_gprsmod_power_key_on
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_gprsmod_power_key_off
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_usleep
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_time_out_lock_work_active
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_stm_main_recovery_from_fault
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_sps_fault_report_cfm
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_sps_event_report_cfm
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_sps_cloud_fb
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_sps_close_door_report_cfm
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_init
</UL>

<P><STRONG><a name="[268]"></a>func_ccl_hw_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, l3ccl.o(i.func_ccl_hw_init))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_init
</UL>

<P><STRONG><a name="[260]"></a>func_ccl_open_all_sensor_power</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, l3ccl.o(i.func_ccl_open_all_sensor_power))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = func_ccl_open_all_sensor_power &rArr; ihu_bsp_stm32_dido_f2board_dht11_init &rArr; func_bsp_stm32_dido_dht11_mode_out_PP &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_adc1_start
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_sensor_power_ctrl_on
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_mq2_cam_power_ctrl_on
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_gprsmod_power_supply_on
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_gprsmod_power_key_on
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_gprsmod_power_key_off
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_dht11_init
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_usleep
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_period_report_trigger
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_hand_active_trigger_to_work
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_fault_state_trigger
</UL>

<P><STRONG><a name="[25d]"></a>func_ccl_stm_main_recovery_from_fault</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, l3ccl.o(i.func_ccl_stm_main_recovery_from_fault))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = func_ccl_stm_main_recovery_from_fault &rArr; func_cccl_cpu_power_off &rArr; ihu_bsp_stm32_dido_f2board_cpu_power_ctrl_off &rArr; IhuDebugPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_sleep
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_close_all_sensor_power
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cccl_cpu_power_off
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_time_out_lock_work_wait_door_for_open
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_time_out_lock_work_active
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_sps_sensor_status_resp
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_sps_fault_report_cfm
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_sps_event_report_cfm
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_sps_cloud_fb
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_sps_close_door_report_cfm
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_period_report_trigger
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_init
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_i2c_sensor_status_resp
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_hand_active_trigger_to_work
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_fault_state_trigger
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_door_close_event
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_dido_sensor_status_resp
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_dido_door_open_event
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_dcmi_sensor_status_resp
</UL>

<P><STRONG><a name="[271]"></a>func_ccl_time_out_lock_work_active</STRONG> (Thumb, 412 bytes, Stack size 64 bytes, l3ccl.o(i.func_ccl_time_out_lock_work_active))
<BR><BR>[Stack]<UL><LI>Max Depth = 1376<LI>Call Chain = func_ccl_time_out_lock_work_active &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_lock2_do1_off
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_lock1_do1_off
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_usleep
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_sleep
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmGetState
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_timer_stop
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_ledpisces_galowag_start
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_vmmw_rtc_pcf8563_set_alarm_process
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_vmmw_rtc_pcf8563_init
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_stm_main_recovery_from_fault
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_close_all_sensor_power
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cccl_cpu_power_off
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_time_out
</UL>

<P><STRONG><a name="[272]"></a>func_ccl_time_out_lock_work_wait_door_for_open</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, l3ccl.o(i.func_ccl_time_out_lock_work_wait_door_for_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328<LI>Call Chain = func_ccl_time_out_lock_work_wait_door_for_open &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_lock2_do1_off
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_lock1_do1_off
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_usleep
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_stm_main_recovery_from_fault
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_time_out
</UL>

<P><STRONG><a name="[270]"></a>func_ccl_time_out_period_event_report</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, l3ccl.o(i.func_ccl_time_out_period_event_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328<LI>Call Chain = func_ccl_time_out_period_event_report &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_time_out
</UL>

<P><STRONG><a name="[2b8]"></a>func_cloud_spsvirgo_ccl_msg_ccl_battery_confirm_received_handle</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, l2spsvirgo.o(i.func_cloud_spsvirgo_ccl_msg_ccl_battery_confirm_received_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = func_cloud_spsvirgo_ccl_msg_ccl_battery_confirm_received_handle &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
</UL>

<P><STRONG><a name="[2b9]"></a>func_cloud_spsvirgo_ccl_msg_ccl_battery_req_received_handle</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, l2spsvirgo.o(i.func_cloud_spsvirgo_ccl_msg_ccl_battery_req_received_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = func_cloud_spsvirgo_ccl_msg_ccl_battery_req_received_handle &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
</UL>

<P><STRONG><a name="[2ba]"></a>func_cloud_spsvirgo_ccl_msg_ccl_ble_confirm_received_handle</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, l2spsvirgo.o(i.func_cloud_spsvirgo_ccl_msg_ccl_ble_confirm_received_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = func_cloud_spsvirgo_ccl_msg_ccl_ble_confirm_received_handle &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
</UL>

<P><STRONG><a name="[2bb]"></a>func_cloud_spsvirgo_ccl_msg_ccl_ble_req_received_handle</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, l2spsvirgo.o(i.func_cloud_spsvirgo_ccl_msg_ccl_ble_req_received_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = func_cloud_spsvirgo_ccl_msg_ccl_ble_req_received_handle &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
</UL>

<P><STRONG><a name="[2bc]"></a>func_cloud_spsvirgo_ccl_msg_ccl_door_confirm_received_handle</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, l2spsvirgo.o(i.func_cloud_spsvirgo_ccl_msg_ccl_door_confirm_received_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = func_cloud_spsvirgo_ccl_msg_ccl_door_confirm_received_handle &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
</UL>

<P><STRONG><a name="[2bd]"></a>func_cloud_spsvirgo_ccl_msg_ccl_door_req_received_handle</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, l2spsvirgo.o(i.func_cloud_spsvirgo_ccl_msg_ccl_door_req_received_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = func_cloud_spsvirgo_ccl_msg_ccl_door_req_received_handle &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
</UL>

<P><STRONG><a name="[2be]"></a>func_cloud_spsvirgo_ccl_msg_ccl_fall_confirm_received_handle</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, l2spsvirgo.o(i.func_cloud_spsvirgo_ccl_msg_ccl_fall_confirm_received_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = func_cloud_spsvirgo_ccl_msg_ccl_fall_confirm_received_handle &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
</UL>

<P><STRONG><a name="[2bf]"></a>func_cloud_spsvirgo_ccl_msg_ccl_fall_req_received_handle</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, l2spsvirgo.o(i.func_cloud_spsvirgo_ccl_msg_ccl_fall_req_received_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = func_cloud_spsvirgo_ccl_msg_ccl_fall_req_received_handle &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
</UL>

<P><STRONG><a name="[2c0]"></a>func_cloud_spsvirgo_ccl_msg_ccl_gprs_confirm_received_handle</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, l2spsvirgo.o(i.func_cloud_spsvirgo_ccl_msg_ccl_gprs_confirm_received_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = func_cloud_spsvirgo_ccl_msg_ccl_gprs_confirm_received_handle &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
</UL>

<P><STRONG><a name="[2c1]"></a>func_cloud_spsvirgo_ccl_msg_ccl_gprs_req_received_handle</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, l2spsvirgo.o(i.func_cloud_spsvirgo_ccl_msg_ccl_gprs_req_received_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = func_cloud_spsvirgo_ccl_msg_ccl_gprs_req_received_handle &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
</UL>

<P><STRONG><a name="[2c2]"></a>func_cloud_spsvirgo_ccl_msg_ccl_humid_confirm_received_handle</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, l2spsvirgo.o(i.func_cloud_spsvirgo_ccl_msg_ccl_humid_confirm_received_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = func_cloud_spsvirgo_ccl_msg_ccl_humid_confirm_received_handle &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
</UL>

<P><STRONG><a name="[2c3]"></a>func_cloud_spsvirgo_ccl_msg_ccl_humid_req_received_handle</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, l2spsvirgo.o(i.func_cloud_spsvirgo_ccl_msg_ccl_humid_req_received_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = func_cloud_spsvirgo_ccl_msg_ccl_humid_req_received_handle &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
</UL>

<P><STRONG><a name="[2c4]"></a>func_cloud_spsvirgo_ccl_msg_ccl_lock_auth_resp_received_handle</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, l2spsvirgo.o(i.func_cloud_spsvirgo_ccl_msg_ccl_lock_auth_resp_received_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 1336<LI>Call Chain = func_cloud_spsvirgo_ccl_msg_ccl_lock_auth_resp_received_handle &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
</UL>

<P><STRONG><a name="[2c5]"></a>func_cloud_spsvirgo_ccl_msg_ccl_lock_confirm_received_handle</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, l2spsvirgo.o(i.func_cloud_spsvirgo_ccl_msg_ccl_lock_confirm_received_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = func_cloud_spsvirgo_ccl_msg_ccl_lock_confirm_received_handle &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
</UL>

<P><STRONG><a name="[2c6]"></a>func_cloud_spsvirgo_ccl_msg_ccl_lock_req_received_handle</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, l2spsvirgo.o(i.func_cloud_spsvirgo_ccl_msg_ccl_lock_req_received_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = func_cloud_spsvirgo_ccl_msg_ccl_lock_req_received_handle &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
</UL>

<P><STRONG><a name="[2c7]"></a>func_cloud_spsvirgo_ccl_msg_ccl_rfid_confirm_received_handle</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, l2spsvirgo.o(i.func_cloud_spsvirgo_ccl_msg_ccl_rfid_confirm_received_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = func_cloud_spsvirgo_ccl_msg_ccl_rfid_confirm_received_handle &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
</UL>

<P><STRONG><a name="[2c8]"></a>func_cloud_spsvirgo_ccl_msg_ccl_rfid_req_received_handle</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, l2spsvirgo.o(i.func_cloud_spsvirgo_ccl_msg_ccl_rfid_req_received_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = func_cloud_spsvirgo_ccl_msg_ccl_rfid_req_received_handle &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
</UL>

<P><STRONG><a name="[2c9]"></a>func_cloud_spsvirgo_ccl_msg_ccl_shake_confirm_received_handle</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, l2spsvirgo.o(i.func_cloud_spsvirgo_ccl_msg_ccl_shake_confirm_received_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = func_cloud_spsvirgo_ccl_msg_ccl_shake_confirm_received_handle &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
</UL>

<P><STRONG><a name="[2ca]"></a>func_cloud_spsvirgo_ccl_msg_ccl_shake_req_received_handle</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, l2spsvirgo.o(i.func_cloud_spsvirgo_ccl_msg_ccl_shake_req_received_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = func_cloud_spsvirgo_ccl_msg_ccl_shake_req_received_handle &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
</UL>

<P><STRONG><a name="[2cb]"></a>func_cloud_spsvirgo_ccl_msg_ccl_smoke_confirm_received_handle</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, l2spsvirgo.o(i.func_cloud_spsvirgo_ccl_msg_ccl_smoke_confirm_received_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = func_cloud_spsvirgo_ccl_msg_ccl_smoke_confirm_received_handle &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
</UL>

<P><STRONG><a name="[2cc]"></a>func_cloud_spsvirgo_ccl_msg_ccl_smoke_req_received_handle</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, l2spsvirgo.o(i.func_cloud_spsvirgo_ccl_msg_ccl_smoke_req_received_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = func_cloud_spsvirgo_ccl_msg_ccl_smoke_req_received_handle &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
</UL>

<P><STRONG><a name="[2cd]"></a>func_cloud_spsvirgo_ccl_msg_ccl_state_confirm_received_handle</STRONG> (Thumb, 418 bytes, Stack size 48 bytes, l2spsvirgo.o(i.func_cloud_spsvirgo_ccl_msg_ccl_state_confirm_received_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360<LI>Call Chain = func_cloud_spsvirgo_ccl_msg_ccl_state_confirm_received_handle &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
</UL>

<P><STRONG><a name="[2ce]"></a>func_cloud_spsvirgo_ccl_msg_ccl_state_req_received_handle</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, l2spsvirgo.o(i.func_cloud_spsvirgo_ccl_msg_ccl_state_req_received_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = func_cloud_spsvirgo_ccl_msg_ccl_state_req_received_handle &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
</UL>

<P><STRONG><a name="[2cf]"></a>func_cloud_spsvirgo_ccl_msg_ccl_temp_confirm_received_handle</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, l2spsvirgo.o(i.func_cloud_spsvirgo_ccl_msg_ccl_temp_confirm_received_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = func_cloud_spsvirgo_ccl_msg_ccl_temp_confirm_received_handle &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
</UL>

<P><STRONG><a name="[2d0]"></a>func_cloud_spsvirgo_ccl_msg_ccl_temp_req_received_handle</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, l2spsvirgo.o(i.func_cloud_spsvirgo_ccl_msg_ccl_temp_req_received_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = func_cloud_spsvirgo_ccl_msg_ccl_temp_req_received_handle &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
</UL>

<P><STRONG><a name="[2d1]"></a>func_cloud_spsvirgo_ccl_msg_ccl_water_confirm_received_handle</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, l2spsvirgo.o(i.func_cloud_spsvirgo_ccl_msg_ccl_water_confirm_received_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = func_cloud_spsvirgo_ccl_msg_ccl_water_confirm_received_handle &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
</UL>

<P><STRONG><a name="[2d2]"></a>func_cloud_spsvirgo_ccl_msg_ccl_water_req_received_handle</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, l2spsvirgo.o(i.func_cloud_spsvirgo_ccl_msg_ccl_water_req_received_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = func_cloud_spsvirgo_ccl_msg_ccl_water_req_received_handle &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
</UL>

<P><STRONG><a name="[2d3]"></a>func_cloud_spsvirgo_ccl_msg_heart_beat_confirm_received_handle</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, l2spsvirgo.o(i.func_cloud_spsvirgo_ccl_msg_heart_beat_confirm_received_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = func_cloud_spsvirgo_ccl_msg_heart_beat_confirm_received_handle &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
</UL>

<P><STRONG><a name="[2d4]"></a>func_cloud_spsvirgo_ccl_msg_heart_beat_req_received_handle</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, l2spsvirgo.o(i.func_cloud_spsvirgo_ccl_msg_heart_beat_req_received_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = func_cloud_spsvirgo_ccl_msg_heart_beat_req_received_handle &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
</UL>

<P><STRONG><a name="[2d5]"></a>func_cloud_spsvirgo_ccl_msg_inventory_confirm_received_handle</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, l2spsvirgo.o(i.func_cloud_spsvirgo_ccl_msg_inventory_confirm_received_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = func_cloud_spsvirgo_ccl_msg_inventory_confirm_received_handle &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
</UL>

<P><STRONG><a name="[2d6]"></a>func_cloud_spsvirgo_ccl_msg_inventory_req_received_handle</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, l2spsvirgo.o(i.func_cloud_spsvirgo_ccl_msg_inventory_req_received_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = func_cloud_spsvirgo_ccl_msg_inventory_req_received_handle &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
</UL>

<P><STRONG><a name="[2d7]"></a>func_cloud_spsvirgo_ccl_msg_sw_package_confirm_received_handle</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, l2spsvirgo.o(i.func_cloud_spsvirgo_ccl_msg_sw_package_confirm_received_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = func_cloud_spsvirgo_ccl_msg_sw_package_confirm_received_handle &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
</UL>

<P><STRONG><a name="[2d8]"></a>func_cloud_spsvirgo_ccl_msg_sw_package_req_received_handle</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, l2spsvirgo.o(i.func_cloud_spsvirgo_ccl_msg_sw_package_req_received_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = func_cloud_spsvirgo_ccl_msg_sw_package_req_received_handle &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
</UL>
<BR>[Called By]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
</UL>

<P><STRONG><a name="[28d]"></a>func_cloud_standard_xml_pack</STRONG> (Thumb, 556 bytes, Stack size 328 bytes, huixmlcodec.o(i.func_cloud_standard_xml_pack))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = func_cloud_standard_xml_pack &rArr; IhuDebugPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_rtc_get_current_unix_time
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_open_auth_inq
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_fault_report_send
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_event_report_send
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_close_door_report_send
</UL>

<P><STRONG><a name="[28f]"></a>func_cloud_standard_xml_unpack</STRONG> (Thumb, 3768 bytes, Stack size 576 bytes, huixmlcodec.o(i.func_cloud_standard_xml_unpack))
<BR><BR>[Stack]<UL><LI>Max Depth = 1936<LI>Call Chain = func_cloud_standard_xml_unpack &rArr; func_cloud_spsvirgo_ccl_msg_ccl_state_confirm_received_handle &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_sw_package_req_received_handle
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_sw_package_confirm_received_handle
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_inventory_req_received_handle
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_inventory_confirm_received_handle
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_heart_beat_req_received_handle
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_heart_beat_confirm_received_handle
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_water_req_received_handle
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_water_confirm_received_handle
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_temp_req_received_handle
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_temp_confirm_received_handle
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_state_req_received_handle
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_state_confirm_received_handle
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_smoke_req_received_handle
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_smoke_confirm_received_handle
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_shake_req_received_handle
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_shake_confirm_received_handle
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_rfid_req_received_handle
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_rfid_confirm_received_handle
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_lock_req_received_handle
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_lock_confirm_received_handle
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_lock_auth_resp_received_handle
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_humid_req_received_handle
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_humid_confirm_received_handle
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_gprs_req_received_handle
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_gprs_confirm_received_handle
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_fall_req_received_handle
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_fall_confirm_received_handle
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_door_req_received_handle
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_door_confirm_received_handle
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_ble_req_received_handle
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_ble_confirm_received_handle
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_battery_req_received_handle
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_battery_confirm_received_handle
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_l2frame_rcv
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_open_auth_inq
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_fault_report_send
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_event_report_send
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_close_door_report_send
</UL>

<P><STRONG><a name="[274]"></a>func_dcmiaris_hw_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, l2dcmiaris.o(i.func_dcmiaris_hw_init))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_dcmiaris_init
</UL>

<P><STRONG><a name="[275]"></a>func_dcmiaris_time_out_period_scan</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, l2dcmiaris.o(i.func_dcmiaris_time_out_period_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328<LI>Call Chain = func_dcmiaris_time_out_period_scan &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_dcmiaris_time_out
</UL>

<P><STRONG><a name="[276]"></a>func_didocap_ccl_work_mode_ul_scan_all_door_close</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, l2didocap.o(i.func_didocap_ccl_work_mode_ul_scan_all_door_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = func_didocap_ccl_work_mode_ul_scan_all_door_close &rArr; ihu_bsp_stm32_dido_f2board_door4_restriction_read &rArr; HAL_GPIO_ReadPin
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_door4_restriction_read
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_door3_restriction_read
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_door2_restriction_read
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_door1_restriction_read
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_ccl_door_close_req
</UL>

<P><STRONG><a name="[277]"></a>func_didocap_ccl_work_mode_ul_scan_any_door_open</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, l2didocap.o(i.func_didocap_ccl_work_mode_ul_scan_any_door_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = func_didocap_ccl_work_mode_ul_scan_any_door_open &rArr; ihu_bsp_stm32_dido_f2board_door4_restriction_read &rArr; HAL_GPIO_ReadPin
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_door4_restriction_read
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_door3_restriction_read
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_door2_restriction_read
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_door1_restriction_read
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_ccl_door_open_req
</UL>

<P><STRONG><a name="[27f]"></a>func_didocap_hw_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, l2didocap.o(i.func_didocap_hw_init))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_init
</UL>

<P><STRONG><a name="[280]"></a>func_didocap_time_out_period_scan</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, l2didocap.o(i.func_didocap_time_out_period_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328<LI>Call Chain = func_didocap_time_out_period_scan &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_time_out
</UL>

<P><STRONG><a name="[2e3]"></a>func_gprsmod_clear_receive_buffer</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, vmmw_gprs.o(i.func_gprsmod_clear_receive_buffer))
<BR><BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_gprsmod_get_rssi_value
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_send_AT_command
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_module_session_init
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_module_info_retrieve
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_gsm_info_retrieve
</UL>

<P><STRONG><a name="[2e0]"></a>func_gprsmod_close_gprs_session_connection</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, vmmw_gprs.o(i.func_gprsmod_close_gprs_session_connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = func_gprsmod_close_gprs_session_connection &rArr; func_gprsmod_send_AT_command &rArr; IhuDebugPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_send_AT_command
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_gprsmod_tcp_u8_data_transmit_with_receive
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_gprsmod_http_data_transmit_with_receive
</UL>

<P><STRONG><a name="[2e2]"></a>func_gprsmod_gsm_info_retrieve</STRONG> (Thumb, 518 bytes, Stack size 40 bytes, vmmw_gprs.o(i.func_gprsmod_gsm_info_retrieve))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = func_gprsmod_gsm_info_retrieve &rArr; func_gprsmod_send_AT_command &rArr; IhuDebugPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_send_AT_command
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_clear_receive_buffer
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_module_session_init
</UL>

<P><STRONG><a name="[2e4]"></a>func_gprsmod_module_info_retrieve</STRONG> (Thumb, 514 bytes, Stack size 40 bytes, vmmw_gprs.o(i.func_gprsmod_module_info_retrieve))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = func_gprsmod_module_info_retrieve &rArr; func_gprsmod_send_AT_command &rArr; IhuDebugPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_send_AT_command
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_clear_receive_buffer
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_module_session_init
</UL>

<P><STRONG><a name="[2e5]"></a>func_gprsmod_module_session_init</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, vmmw_gprs.o(i.func_gprsmod_module_session_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = func_gprsmod_module_session_init &rArr; func_gprsmod_module_info_retrieve &rArr; func_gprsmod_send_AT_command &rArr; IhuDebugPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_usleep
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_send_AT_command
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_module_info_retrieve
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_gsm_info_retrieve
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_clear_receive_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_gprsmod_tcp_u8_data_transmit_with_receive
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_gprsmod_http_data_transmit_with_receive
</UL>

<P><STRONG><a name="[2e1]"></a>func_gprsmod_send_AT_command</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, vmmw_gprs.o(i.func_gprsmod_send_AT_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = func_gprsmod_send_AT_command &rArr; IhuDebugPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_sps_gprs_send_data
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_usleep
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_send_string
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_clear_receive_buffer
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyReplaceCrLf
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_gprsmod_tcp_u8_data_transmit_with_receive
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_gprsmod_http_data_transmit_with_receive
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_gprsmod_get_rssi_value
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_setup_gprs_session_connection
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_module_session_init
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_module_info_retrieve
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_gsm_info_retrieve
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_close_gprs_session_connection
</UL>

<P><STRONG><a name="[2e7]"></a>func_gprsmod_send_string</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, vmmw_gprs.o(i.func_gprsmod_send_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = func_gprsmod_send_string &rArr; ihu_bsp_stm32_sps_gprs_send_data &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_sps_gprs_send_data
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_gprsmod_http_data_transmit_with_receive
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_send_AT_command
</UL>

<P><STRONG><a name="[2e9]"></a>func_gprsmod_setup_gprs_session_connection</STRONG> (Thumb, 856 bytes, Stack size 16 bytes, vmmw_gprs.o(i.func_gprsmod_setup_gprs_session_connection))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = func_gprsmod_setup_gprs_session_connection &rArr; func_gprsmod_send_AT_command &rArr; IhuDebugPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_send_AT_command
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_gprsmod_tcp_u8_data_transmit_with_receive
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_gprsmod_http_data_transmit_with_receive
</UL>

<P><STRONG><a name="[2ea]"></a>func_gprsmod_wait_AT_command_fb</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, vmmw_gprs.o(i.func_gprsmod_wait_AT_command_fb))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = func_gprsmod_wait_AT_command_fb &rArr; ihu_usleep &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_usleep
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_gprsmod_tcp_u8_data_transmit_with_receive
</UL>

<P><STRONG><a name="[281]"></a>func_i2caries_hw_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, l2i2caries.o(i.func_i2caries_hw_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = func_i2caries_hw_init &rArr; ihu_bsp_stm32_i2c_slave_hw_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_i2c_slave_hw_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_i2caries_init
</UL>

<P><STRONG><a name="[282]"></a>func_i2caries_time_out_period_scan</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, l2i2caries.o(i.func_i2caries_time_out_period_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328<LI>Call Chain = func_i2caries_time_out_period_scan &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_i2caries_time_out
</UL>

<P><STRONG><a name="[283]"></a>func_ledpisces_hw_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, l2ledpisces.o(i.func_ledpisces_hw_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = func_ledpisces_hw_init &rArr; ihu_ledpisces_galowag_start &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_ledpisces_galowag_start
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ledpisces_init
</UL>

<P><STRONG><a name="[285]"></a>func_ledpisces_time_out_galowag_scan</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, l2ledpisces.o(i.func_ledpisces_time_out_galowag_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = func_ledpisces_time_out_galowag_scan
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ledpisces_time_out
</UL>

<P><STRONG><a name="[284]"></a>func_ledpisces_time_out_period_scan</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, l2ledpisces.o(i.func_ledpisces_time_out_period_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328<LI>Call Chain = func_ledpisces_time_out_period_scan &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ledpisces_time_out
</UL>

<P><STRONG><a name="[34c]"></a>func_rfidmod_clear_receive_buffer</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, vmmw_rfid.o(i.func_rfidmod_clear_receive_buffer))
<BR><BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_rfidmod_mf522_spi_read_id
</UL>

<P><STRONG><a name="[2ec]"></a>func_rfidmod_mf522_CalulateCRC</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, vmmw_rfid.o(i.func_rfidmod_mf522_CalulateCRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = func_rfidmod_mf522_CalulateCRC &rArr; func_rfidmod_mf522_ClearBitMask &rArr; func_rfidmod_mf522_WriteRawRC &rArr; ihu_bsp_stm32_spi_flash_send_byte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_WriteRawRC
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_SetBitMask
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_ReadRawRC
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_ClearBitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_PcdWrite
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_PcdSelect
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_PcdRead
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_PcdHalt
</UL>

<P><STRONG><a name="[2ed]"></a>func_rfidmod_mf522_ClearBitMask</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, vmmw_rfid.o(i.func_rfidmod_mf522_ClearBitMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = func_rfidmod_mf522_ClearBitMask &rArr; func_rfidmod_mf522_WriteRawRC &rArr; ihu_bsp_stm32_spi_flash_send_byte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_WriteRawRC
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_ReadRawRC
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_PcdSelect
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_PcdRequest
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_PcdComMF522
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_PcdAnticoll
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_PcdAntennaOff
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_M500PcdConfigISOType
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_CalulateCRC
</UL>

<P><STRONG><a name="[2f1]"></a>func_rfidmod_mf522_M500PcdConfigISOType</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, vmmw_rfid.o(i.func_rfidmod_mf522_M500PcdConfigISOType))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = func_rfidmod_mf522_M500PcdConfigISOType &rArr; func_rfidmod_mf522_PcdAntennaOn &rArr; func_rfidmod_mf522_SetBitMask &rArr; func_rfidmod_mf522_ReadRawRC &rArr; ihu_bsp_stm32_spi_flash_send_byte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_usleep
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_WriteRawRC
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_PcdAntennaOn
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_ClearBitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_rfidmod_mf522_spi_read_id
</UL>

<P><STRONG><a name="[2f3]"></a>func_rfidmod_mf522_PcdAntennaOff</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, vmmw_rfid.o(i.func_rfidmod_mf522_PcdAntennaOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = func_rfidmod_mf522_PcdAntennaOff &rArr; func_rfidmod_mf522_ClearBitMask &rArr; func_rfidmod_mf522_WriteRawRC &rArr; ihu_bsp_stm32_spi_flash_send_byte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_ClearBitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_PcdReset
</UL>

<P><STRONG><a name="[2f2]"></a>func_rfidmod_mf522_PcdAntennaOn</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, vmmw_rfid.o(i.func_rfidmod_mf522_PcdAntennaOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = func_rfidmod_mf522_PcdAntennaOn &rArr; func_rfidmod_mf522_SetBitMask &rArr; func_rfidmod_mf522_ReadRawRC &rArr; ihu_bsp_stm32_spi_flash_send_byte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_SetBitMask
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_ReadRawRC
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_PcdReset
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_M500PcdConfigISOType
</UL>

<P><STRONG><a name="[2f4]"></a>func_rfidmod_mf522_PcdAnticoll</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, vmmw_rfid.o(i.func_rfidmod_mf522_PcdAnticoll))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = func_rfidmod_mf522_PcdAnticoll &rArr; func_rfidmod_mf522_PcdComMF522 &rArr; func_rfidmod_mf522_ClearBitMask &rArr; func_rfidmod_mf522_WriteRawRC &rArr; ihu_bsp_stm32_spi_flash_send_byte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_WriteRawRC
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_SetBitMask
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_PcdComMF522
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_ClearBitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_rfidmod_mf522_spi_read_id
</UL>

<P><STRONG><a name="[2f6]"></a>func_rfidmod_mf522_PcdAuthState</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, vmmw_rfid.o(i.func_rfidmod_mf522_PcdAuthState))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = func_rfidmod_mf522_PcdAuthState &rArr; func_rfidmod_mf522_PcdComMF522 &rArr; func_rfidmod_mf522_ClearBitMask &rArr; func_rfidmod_mf522_WriteRawRC &rArr; ihu_bsp_stm32_spi_flash_send_byte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_ReadRawRC
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_PcdComMF522
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_rfidmod_mf522_spi_read_id
</UL>

<P><STRONG><a name="[2f5]"></a>func_rfidmod_mf522_PcdComMF522</STRONG> (Thumb, 282 bytes, Stack size 56 bytes, vmmw_rfid.o(i.func_rfidmod_mf522_PcdComMF522))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = func_rfidmod_mf522_PcdComMF522 &rArr; func_rfidmod_mf522_ClearBitMask &rArr; func_rfidmod_mf522_WriteRawRC &rArr; ihu_bsp_stm32_spi_flash_send_byte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_WriteRawRC
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_SetBitMask
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_ReadRawRC
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_ClearBitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_PcdWrite
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_PcdSelect
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_PcdRequest
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_PcdRead
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_PcdHalt
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_PcdAuthState
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_PcdAnticoll
</UL>

<P><STRONG><a name="[2f7]"></a>func_rfidmod_mf522_PcdHalt</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, vmmw_rfid.o(i.func_rfidmod_mf522_PcdHalt))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = func_rfidmod_mf522_PcdHalt &rArr; func_rfidmod_mf522_PcdComMF522 &rArr; func_rfidmod_mf522_ClearBitMask &rArr; func_rfidmod_mf522_WriteRawRC &rArr; ihu_bsp_stm32_spi_flash_send_byte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_PcdComMF522
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_CalulateCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_rfidmod_mf522_spi_read_id
</UL>

<P><STRONG><a name="[2f8]"></a>func_rfidmod_mf522_PcdRead</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, vmmw_rfid.o(i.func_rfidmod_mf522_PcdRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = func_rfidmod_mf522_PcdRead &rArr; func_rfidmod_mf522_PcdComMF522 &rArr; func_rfidmod_mf522_ClearBitMask &rArr; func_rfidmod_mf522_WriteRawRC &rArr; ihu_bsp_stm32_spi_flash_send_byte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_PcdComMF522
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_CalulateCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_rfidmod_mf522_spi_read_id
</UL>

<P><STRONG><a name="[2f9]"></a>func_rfidmod_mf522_PcdRequest</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, vmmw_rfid.o(i.func_rfidmod_mf522_PcdRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = func_rfidmod_mf522_PcdRequest &rArr; func_rfidmod_mf522_PcdComMF522 &rArr; func_rfidmod_mf522_ClearBitMask &rArr; func_rfidmod_mf522_WriteRawRC &rArr; ihu_bsp_stm32_spi_flash_send_byte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_WriteRawRC
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_SetBitMask
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_PcdComMF522
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_ClearBitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_rfidmod_mf522_spi_read_id
</UL>

<P><STRONG><a name="[2fa]"></a>func_rfidmod_mf522_PcdReset</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, vmmw_rfid.o(i.func_rfidmod_mf522_PcdReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = func_rfidmod_mf522_PcdReset &rArr; func_rfidmod_mf522_PcdAntennaOn &rArr; func_rfidmod_mf522_SetBitMask &rArr; func_rfidmod_mf522_ReadRawRC &rArr; ihu_bsp_stm32_spi_flash_send_byte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_sleep
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_spi_mf522_reset_enable
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_spi_mf522_reset_disable
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_WriteRawRC
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_ReadRawRC
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_PcdAntennaOn
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_PcdAntennaOff
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_rfidmod_mf522_spi_read_id
</UL>

<P><STRONG><a name="[2fd]"></a>func_rfidmod_mf522_PcdSelect</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, vmmw_rfid.o(i.func_rfidmod_mf522_PcdSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = func_rfidmod_mf522_PcdSelect &rArr; func_rfidmod_mf522_PcdComMF522 &rArr; func_rfidmod_mf522_ClearBitMask &rArr; func_rfidmod_mf522_WriteRawRC &rArr; ihu_bsp_stm32_spi_flash_send_byte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_PcdComMF522
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_ClearBitMask
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_CalulateCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_rfidmod_mf522_spi_read_id
</UL>

<P><STRONG><a name="[2fe]"></a>func_rfidmod_mf522_PcdWrite</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, vmmw_rfid.o(i.func_rfidmod_mf522_PcdWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = func_rfidmod_mf522_PcdWrite &rArr; func_rfidmod_mf522_PcdComMF522 &rArr; func_rfidmod_mf522_ClearBitMask &rArr; func_rfidmod_mf522_WriteRawRC &rArr; ihu_bsp_stm32_spi_flash_send_byte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_PcdComMF522
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_CalulateCRC
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_rfidmod_mf522_spi_read_id
</UL>

<P><STRONG><a name="[2f0]"></a>func_rfidmod_mf522_ReadRawRC</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, vmmw_rfid.o(i.func_rfidmod_mf522_ReadRawRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = func_rfidmod_mf522_ReadRawRC &rArr; ihu_bsp_stm32_spi_flash_send_byte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_spi_mf522_cs_enable
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_spi_mf522_cs_disable
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_spi_flash_send_byte
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_spi_flash_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_rfidmod_mf522_spi_read_id
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_SetBitMask
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_PcdReset
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_PcdComMF522
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_PcdAuthState
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_PcdAntennaOn
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_ClearBitMask
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_CalulateCRC
</UL>

<P><STRONG><a name="[2ef]"></a>func_rfidmod_mf522_SetBitMask</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, vmmw_rfid.o(i.func_rfidmod_mf522_SetBitMask))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = func_rfidmod_mf522_SetBitMask &rArr; func_rfidmod_mf522_ReadRawRC &rArr; ihu_bsp_stm32_spi_flash_send_byte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_ReadRawRC
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_PcdRequest
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_PcdComMF522
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_PcdAnticoll
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_PcdAntennaOn
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_CalulateCRC
</UL>

<P><STRONG><a name="[2ee]"></a>func_rfidmod_mf522_WriteRawRC</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, vmmw_rfid.o(i.func_rfidmod_mf522_WriteRawRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = func_rfidmod_mf522_WriteRawRC &rArr; ihu_bsp_stm32_spi_flash_send_byte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_spi_mf522_cs_enable
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_spi_mf522_cs_disable
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_spi_flash_send_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_PcdReset
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_PcdRequest
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_PcdComMF522
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_PcdAnticoll
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_M500PcdConfigISOType
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_ClearBitMask
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_CalulateCRC
</UL>

<P><STRONG><a name="[303]"></a>func_rfidmod_nrf24l01_check</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, vmmw_rfid.o(i.func_rfidmod_nrf24l01_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = func_rfidmod_nrf24l01_check &rArr; func_rfidmod_nrf24l01_write_buf &rArr; ihu_bsp_stm32_spi_nrf24l01_read_write_byte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_nrf24l01_write_buf
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_nrf24l01_read_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_rfidmod_nrf24l01_spi_read_id
</UL>

<P><STRONG><a name="[305]"></a>func_rfidmod_nrf24l01_read_buf</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, vmmw_rfid.o(i.func_rfidmod_nrf24l01_read_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = func_rfidmod_nrf24l01_read_buf &rArr; ihu_bsp_stm32_spi_nrf24l01_read_write_byte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_usleep
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_spi_nrf24l01_read_write_byte
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_spi_nrf24l01_cs_enable
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_spi_nrf24l01_cs_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_nrf24l01_rx_package
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_nrf24l01_check
</UL>

<P><STRONG><a name="[309]"></a>func_rfidmod_nrf24l01_read_reg</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, vmmw_rfid.o(i.func_rfidmod_nrf24l01_read_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = func_rfidmod_nrf24l01_read_reg &rArr; ihu_bsp_stm32_spi_nrf24l01_read_write_byte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_usleep
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_spi_nrf24l01_read_write_byte
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_spi_nrf24l01_cs_enable
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_spi_nrf24l01_cs_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_nrf24l01_rx_package
</UL>

<P><STRONG><a name="[30a]"></a>func_rfidmod_nrf24l01_rx_mode</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, vmmw_rfid.o(i.func_rfidmod_nrf24l01_rx_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = func_rfidmod_nrf24l01_rx_mode &rArr; func_rfidmod_nrf24l01_write_buf &rArr; ihu_bsp_stm32_spi_nrf24l01_read_write_byte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_usleep
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_spi_nrf24l01_ce_low
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_spi_nrf24l01_ce_high
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_nrf24l01_write_reg
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_nrf24l01_write_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_rfidmod_nrf24l01_spi_read_id
</UL>

<P><STRONG><a name="[30e]"></a>func_rfidmod_nrf24l01_rx_package</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, vmmw_rfid.o(i.func_rfidmod_nrf24l01_rx_package))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = func_rfidmod_nrf24l01_rx_package &rArr; func_rfidmod_nrf24l01_read_buf &rArr; ihu_bsp_stm32_spi_nrf24l01_read_write_byte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_usleep
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_nrf24l01_write_reg
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_nrf24l01_read_reg
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_nrf24l01_read_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_rfidmod_nrf24l01_spi_read_id
</UL>

<P><STRONG><a name="[304]"></a>func_rfidmod_nrf24l01_write_buf</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, vmmw_rfid.o(i.func_rfidmod_nrf24l01_write_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = func_rfidmod_nrf24l01_write_buf &rArr; ihu_bsp_stm32_spi_nrf24l01_read_write_byte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_usleep
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_spi_nrf24l01_read_write_byte
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_spi_nrf24l01_cs_enable
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_spi_nrf24l01_cs_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_nrf24l01_rx_mode
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_nrf24l01_check
</UL>

<P><STRONG><a name="[30c]"></a>func_rfidmod_nrf24l01_write_reg</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, vmmw_rfid.o(i.func_rfidmod_nrf24l01_write_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = func_rfidmod_nrf24l01_write_reg &rArr; ihu_bsp_stm32_spi_nrf24l01_read_write_byte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_usleep
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_spi_nrf24l01_read_write_byte
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_spi_nrf24l01_cs_enable
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_spi_nrf24l01_cs_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_nrf24l01_rx_package
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_nrf24l01_rx_mode
</UL>

<P><STRONG><a name="[293]"></a>func_spsvirgo_hw_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, l2spsvirgo.o(i.func_spsvirgo_hw_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = func_spsvirgo_hw_init &rArr; ihu_bsp_stm32_spi_slave_hw_init &rArr; ihu_bsp_stm32_spi_mf522_reset_disable &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_sps_slave_hw_init
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_spi_slave_hw_init
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_init
</UL>

<P><STRONG><a name="[294]"></a>func_spsvirgo_time_out_period_scan</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, l2spsvirgo.o(i.func_spsvirgo_time_out_period_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328<LI>Call Chain = func_spsvirgo_time_out_period_scan &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_time_out
</UL>

<P><STRONG><a name="[295]"></a>func_timer_hw_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, l1timer_freeos.o(i.func_timer_hw_init))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_timer_init
</UL>

<P><STRONG><a name="[d6]"></a>func_timer_routine_handler_1s</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, l1timer_freeos.o(i.func_timer_routine_handler_1s))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352<LI>Call Chain = func_timer_routine_handler_1s &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l1timer_freeos.o(i.fsm_timer_init)
</UL>
<P><STRONG><a name="[311]"></a>func_vmfo_heart_caculate_all_received</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, l1vmfo.o(i.func_vmfo_heart_caculate_all_received))
<BR><BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_vmfo_time_out_period_scan
</UL>

<P><STRONG><a name="[299]"></a>func_vmfo_hw_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, l1vmfo.o(i.func_vmfo_hw_init))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_init
</UL>

<P><STRONG><a name="[29a]"></a>func_vmfo_init_caculate_all_fb</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, l1vmfo.o(i.func_vmfo_init_caculate_all_fb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = func_vmfo_init_caculate_all_fb
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_init_fb
</UL>

<P><STRONG><a name="[29b]"></a>func_vmfo_time_out_period_scan</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, l1vmfo.o(i.func_vmfo_time_out_period_scan))
<BR><BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_vmfo_heart_caculate_all_received
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_time_out
</UL>

<P><STRONG><a name="[312]"></a>func_vmmw_navig_mpu6050_acc_read</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, vmmw_navig.o(i.func_vmmw_navig_mpu6050_acc_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = func_vmmw_navig_mpu6050_acc_read &rArr; ihu_vmmw_navig_mpu6050_return_id &rArr; IhuDebugPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_navig_mpu6050_return_id
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_navig_mpu6050_read_acc
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_wmmw_navig_mpu6050_axis_z_angle_caculate_by_static_method
</UL>

<P><STRONG><a name="[315]"></a>func_vmmw_navig_mpu6050_read_data</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, vmmw_navig.o(i.func_vmmw_navig_mpu6050_read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = func_vmmw_navig_mpu6050_read_data &rArr; ihu_bsp_stm32_i2c_mpu6050_read_buffer &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_i2c_mpu6050_read_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_navig_mpu6050_return_id
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_navig_mpu6050_read_acc
</UL>

<P><STRONG><a name="[317]"></a>func_vmmw_navig_mpu6050_write_reg</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, vmmw_navig.o(i.func_vmmw_navig_mpu6050_write_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = func_vmmw_navig_mpu6050_write_reg &rArr; ihu_bsp_stm32_i2c_mpu6050_write_data &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_i2c_mpu6050_write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_navig_mpu6050_init
</UL>

<P><STRONG><a name="[31c]"></a>func_vmmw_rtc_pcf8563_boot_flag_process</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, vmmw_pcf8563.o(i.func_vmmw_rtc_pcf8563_boot_flag_process))
<BR><BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_vmmw_rtc_pcf8563_set_alarm_process
</UL>

<P><STRONG><a name="[319]"></a>func_vmmw_rtc_pcf8563_check</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, vmmw_pcf8563.o(i.func_vmmw_rtc_pcf8563_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = func_vmmw_rtc_pcf8563_check &rArr; func_vmmw_rtc_pcf8563_write_reg &rArr; ihu_bsp_stm32_i2c_pcf8563_write_data &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_vmmw_rtc_pcf8563_write_reg
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_vmmw_rtc_pcf8563_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_vmmw_rtc_pcf8563_init
</UL>

<P><STRONG><a name="[2ac]"></a>func_vmmw_rtc_pcf8563_clear_af_and_power_off_cpu</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, vmmw_pcf8563.o(i.func_vmmw_rtc_pcf8563_clear_af_and_power_off_cpu))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = func_vmmw_rtc_pcf8563_clear_af_and_power_off_cpu &rArr; IhuDebugPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_vmmw_rtc_pcf8563_write_reg
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_vmmw_rtc_pcf8563_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cccl_cpu_power_off
</UL>

<P><STRONG><a name="[26b]"></a>func_vmmw_rtc_pcf8563_get_alarm_duration</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, vmmw_pcf8563.o(i.func_vmmw_rtc_pcf8563_get_alarm_duration))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = func_vmmw_rtc_pcf8563_get_alarm_duration &rArr; PCF8563_GetAlarm &rArr; func_vmmw_rtc_pcf8563_read_data &rArr; ihu_bsp_stm32_i2c_pcf8563_read_buffer &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_GetAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_init
</UL>

<P><STRONG><a name="[31e]"></a>func_vmmw_rtc_pcf8563_get_network_date_process</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, vmmw_pcf8563.o(i.func_vmmw_rtc_pcf8563_get_network_date_process))
<BR><BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_vmmw_rtc_pcf8563_set_alarm_process
</UL>

<P><STRONG><a name="[31d]"></a>func_vmmw_rtc_pcf8563_get_network_time_stamp_process</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, vmmw_pcf8563.o(i.func_vmmw_rtc_pcf8563_get_network_time_stamp_process))
<BR><BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_vmmw_rtc_pcf8563_set_alarm_process
</UL>

<P><STRONG><a name="[26c]"></a>func_vmmw_rtc_pcf8563_init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, vmmw_pcf8563.o(i.func_vmmw_rtc_pcf8563_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = func_vmmw_rtc_pcf8563_init &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_usleep
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_vmmw_rtc_pcf8563_check
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_time_out_lock_work_active
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_init
</UL>

<P><STRONG><a name="[1c8]"></a>func_vmmw_rtc_pcf8563_read_byte</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, vmmw_pcf8563.o(i.func_vmmw_rtc_pcf8563_read_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = func_vmmw_rtc_pcf8563_read_byte &rArr; ihu_bsp_stm32_i2c_pcf8563_read_data &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_i2c_pcf8563_read_data
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_vmmw_rtc_pcf8563_clear_af_and_power_off_cpu
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_vmmw_rtc_pcf8563_check
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_SetAlarm
</UL>

<P><STRONG><a name="[1c2]"></a>func_vmmw_rtc_pcf8563_read_data</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, vmmw_pcf8563.o(i.func_vmmw_rtc_pcf8563_read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = func_vmmw_rtc_pcf8563_read_data &rArr; ihu_bsp_stm32_i2c_pcf8563_read_buffer &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_i2c_pcf8563_read_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_GetTime
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_GetDate
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_GetAlarm
</UL>

<P><STRONG><a name="[26d]"></a>func_vmmw_rtc_pcf8563_set_alarm_process</STRONG> (Thumb, 302 bytes, Stack size 56 bytes, vmmw_pcf8563.o(i.func_vmmw_rtc_pcf8563_set_alarm_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = func_vmmw_rtc_pcf8563_set_alarm_process &rArr; PCF8563_SetAlarm &rArr; IhuDebugPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_vmmw_rtc_pcf8563_get_network_time_stamp_process
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_vmmw_rtc_pcf8563_get_network_date_process
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_vmmw_rtc_pcf8563_boot_flag_process
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_SetTime
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_SetDate
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_SetAlarm
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_GetTime
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_GetDate
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_time_out_lock_work_active
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_init
</UL>

<P><STRONG><a name="[1ca]"></a>func_vmmw_rtc_pcf8563_write_buffer</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, vmmw_pcf8563.o(i.func_vmmw_rtc_pcf8563_write_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = func_vmmw_rtc_pcf8563_write_buffer &rArr; ihu_bsp_stm32_i2c_pcf8563_write_buffer &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_i2c_pcf8563_write_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_SetTime
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_SetDate
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_SetAlarm
</UL>

<P><STRONG><a name="[1c9]"></a>func_vmmw_rtc_pcf8563_write_reg</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, vmmw_pcf8563.o(i.func_vmmw_rtc_pcf8563_write_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = func_vmmw_rtc_pcf8563_write_reg &rArr; ihu_bsp_stm32_i2c_pcf8563_write_data &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_i2c_pcf8563_write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_vmmw_rtc_pcf8563_clear_af_and_power_off_cpu
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_vmmw_rtc_pcf8563_check
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_SetAlarm
</UL>

<P><STRONG><a name="[392]"></a>getRunTimeCounterValue</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, freertos.o(i.getRunTimeCounterValue))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[27b]"></a>ihu_adclibra_ccl_scan_battery_warning_level</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, l2adclibra.o(i.ihu_adclibra_ccl_scan_battery_warning_level))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = ihu_adclibra_ccl_scan_battery_warning_level &rArr; IhuDebugPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_adc1_start
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_adc1_ccl_get_battery_value
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_usleep
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_ccl_sensor_status_req
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_bat_state
</UL>

<P><STRONG><a name="[321]"></a>ihu_bsp_stm32_adc1_ccl_get_battery_value</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, bsp_adc.o(i.ihu_bsp_stm32_adc1_ccl_get_battery_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ihu_bsp_stm32_adc1_ccl_get_battery_value &rArr; ihu_bsp_stm32_adc1_start &rArr; HAL_ADC_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetValue
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_adc1_stop
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_adc1_start
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_adclibra_ccl_scan_battery_warning_level
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_bat_value
</UL>

<P><STRONG><a name="[2b7]"></a>ihu_bsp_stm32_adc1_start</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_adc.o(i.ihu_bsp_stm32_adc1_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ihu_bsp_stm32_adc1_start &rArr; HAL_ADC_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_adc1_ccl_get_battery_value
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_adclibra_ccl_scan_battery_warning_level
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_bat_value
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_open_all_sensor_power
</UL>

<P><STRONG><a name="[323]"></a>ihu_bsp_stm32_adc1_stop</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_adc.o(i.ihu_bsp_stm32_adc1_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ihu_bsp_stm32_adc1_stop &rArr; HAL_ADC_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_adc1_ccl_get_battery_value
</UL>

<P><STRONG><a name="[30]"></a>ihu_bsp_stm32_beep_f2board_off</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bsp_led.o(i.ihu_bsp_stm32_beep_f2board_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ihu_bsp_stm32_beep_f2board_off &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2ledpisces.o(.data)
</UL>
<P><STRONG><a name="[2f]"></a>ihu_bsp_stm32_beep_f2board_on</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp_led.o(i.ihu_bsp_stm32_beep_f2board_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ihu_bsp_stm32_beep_f2board_on &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2ledpisces.o(.data)
</UL>
<P><STRONG><a name="[325]"></a>ihu_bsp_stm32_dido_ds18b20_init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, bsp_dido.o(i.ihu_bsp_stm32_dido_ds18b20_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ihu_bsp_stm32_dido_ds18b20_init &rArr; func_bsp_stm32_dido_ds18b20_presence &rArr; func_bsp_stm32_dido_ds18b20_set_mode_IPU &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_bsp_stm32_dido_ds18b20_set_mode_out_PP
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_bsp_stm32_dido_ds18b20_reset
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_bsp_stm32_dido_ds18b20_presence
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_dht11_temp_read
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_dht11_humid_read
</UL>

<P><STRONG><a name="[326]"></a>ihu_bsp_stm32_dido_f2board_ble_atcmd_mode_ctrl_off</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp_dido.o(i.ihu_bsp_stm32_dido_f2board_ble_atcmd_mode_ctrl_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ihu_bsp_stm32_dido_f2board_ble_atcmd_mode_ctrl_off &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_blemod_hc05_uart_fetch_mac_addr_in_AT_cmd_mode
</UL>

<P><STRONG><a name="[327]"></a>ihu_bsp_stm32_dido_f2board_ble_atcmd_mode_ctrl_on</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp_dido.o(i.ihu_bsp_stm32_dido_f2board_ble_atcmd_mode_ctrl_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ihu_bsp_stm32_dido_f2board_ble_atcmd_mode_ctrl_on &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_blemod_hc05_uart_fetch_mac_addr_in_AT_cmd_mode
</UL>

<P><STRONG><a name="[2ad]"></a>ihu_bsp_stm32_dido_f2board_cpu_power_ctrl_off</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, bsp_dido.o(i.ihu_bsp_stm32_dido_f2board_cpu_power_ctrl_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = ihu_bsp_stm32_dido_f2board_cpu_power_ctrl_off &rArr; IhuDebugPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_usleep
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cccl_cpu_power_off
</UL>

<P><STRONG><a name="[328]"></a>ihu_bsp_stm32_dido_f2board_dht11_humid_read</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, bsp_dido.o(i.ihu_bsp_stm32_dido_f2board_dht11_humid_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = ihu_bsp_stm32_dido_f2board_dht11_humid_read &rArr; func_bsp_stm32_dido_dht11_read_temp_and_humidity &rArr; IhuDebugPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_ds18b20_init
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_bsp_stm32_dido_dht11_read_temp_and_humidity
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_usleep
</UL>
<BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_humid_value
</UL>

<P><STRONG><a name="[2b6]"></a>ihu_bsp_stm32_dido_f2board_dht11_init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, bsp_dido.o(i.ihu_bsp_stm32_dido_f2board_dht11_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ihu_bsp_stm32_dido_f2board_dht11_init &rArr; func_bsp_stm32_dido_dht11_mode_out_PP &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_bsp_stm32_dido_dht11_mode_out_PP
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_open_all_sensor_power
</UL>

<P><STRONG><a name="[329]"></a>ihu_bsp_stm32_dido_f2board_dht11_temp_read</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, bsp_dido.o(i.ihu_bsp_stm32_dido_f2board_dht11_temp_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = ihu_bsp_stm32_dido_f2board_dht11_temp_read &rArr; func_bsp_stm32_dido_dht11_read_temp_and_humidity &rArr; IhuDebugPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_ds18b20_init
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_bsp_stm32_dido_dht11_read_temp_and_humidity
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_usleep
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_temp_value
</UL>

<P><STRONG><a name="[2dc]"></a>ihu_bsp_stm32_dido_f2board_door1_restriction_read</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsp_dido.o(i.ihu_bsp_stm32_dido_f2board_door1_restriction_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ihu_bsp_stm32_dido_f2board_door1_restriction_read &rArr; HAL_GPIO_ReadPin
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_didocap_ccl_work_mode_ul_scan_any_door_open
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_didocap_ccl_work_mode_ul_scan_all_door_close
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_door_open_state
</UL>

<P><STRONG><a name="[2dd]"></a>ihu_bsp_stm32_dido_f2board_door2_restriction_read</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsp_dido.o(i.ihu_bsp_stm32_dido_f2board_door2_restriction_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ihu_bsp_stm32_dido_f2board_door2_restriction_read &rArr; HAL_GPIO_ReadPin
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_didocap_ccl_work_mode_ul_scan_any_door_open
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_didocap_ccl_work_mode_ul_scan_all_door_close
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_door_open_state
</UL>

<P><STRONG><a name="[2de]"></a>ihu_bsp_stm32_dido_f2board_door3_restriction_read</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsp_dido.o(i.ihu_bsp_stm32_dido_f2board_door3_restriction_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ihu_bsp_stm32_dido_f2board_door3_restriction_read &rArr; HAL_GPIO_ReadPin
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_didocap_ccl_work_mode_ul_scan_any_door_open
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_didocap_ccl_work_mode_ul_scan_all_door_close
</UL>

<P><STRONG><a name="[2df]"></a>ihu_bsp_stm32_dido_f2board_door4_restriction_read</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsp_dido.o(i.ihu_bsp_stm32_dido_f2board_door4_restriction_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ihu_bsp_stm32_dido_f2board_door4_restriction_read &rArr; HAL_GPIO_ReadPin
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_didocap_ccl_work_mode_ul_scan_any_door_open
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_didocap_ccl_work_mode_ul_scan_all_door_close
</UL>

<P><STRONG><a name="[2ae]"></a>ihu_bsp_stm32_dido_f2board_gprsmod_power_key_off</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp_dido.o(i.ihu_bsp_stm32_dido_f2board_gprsmod_power_key_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ihu_bsp_stm32_dido_f2board_gprsmod_power_key_off &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_open_all_sensor_power
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_close_all_sensor_power
</UL>

<P><STRONG><a name="[2af]"></a>ihu_bsp_stm32_dido_f2board_gprsmod_power_key_on</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp_dido.o(i.ihu_bsp_stm32_dido_f2board_gprsmod_power_key_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ihu_bsp_stm32_dido_f2board_gprsmod_power_key_on &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_open_all_sensor_power
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_close_all_sensor_power
</UL>

<P><STRONG><a name="[2b0]"></a>ihu_bsp_stm32_dido_f2board_gprsmod_power_supply_off</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp_dido.o(i.ihu_bsp_stm32_dido_f2board_gprsmod_power_supply_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ihu_bsp_stm32_dido_f2board_gprsmod_power_supply_off &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_close_all_sensor_power
</UL>

<P><STRONG><a name="[2b3]"></a>ihu_bsp_stm32_dido_f2board_gprsmod_power_supply_on</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp_dido.o(i.ihu_bsp_stm32_dido_f2board_gprsmod_power_supply_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ihu_bsp_stm32_dido_f2board_gprsmod_power_supply_on &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_open_all_sensor_power
</UL>

<P><STRONG><a name="[28]"></a>ihu_bsp_stm32_dido_f2board_lock1_do1_off</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp_dido.o(i.ihu_bsp_stm32_dido_f2board_lock1_do1_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ihu_bsp_stm32_dido_f2board_lock1_do1_off &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_time_out_lock_work_wait_door_for_open
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_time_out_lock_work_active
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_sps_cloud_fb
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_dido_door_open_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2ledpisces.o(.data)
</UL>
<P><STRONG><a name="[27]"></a>ihu_bsp_stm32_dido_f2board_lock1_do1_on</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bsp_dido.o(i.ihu_bsp_stm32_dido_f2board_lock1_do1_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ihu_bsp_stm32_dido_f2board_lock1_do1_on &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_sps_cloud_fb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2ledpisces.o(.data)
</UL>
<P><STRONG><a name="[2a]"></a>ihu_bsp_stm32_dido_f2board_lock2_do1_off</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp_dido.o(i.ihu_bsp_stm32_dido_f2board_lock2_do1_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ihu_bsp_stm32_dido_f2board_lock2_do1_off &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_time_out_lock_work_wait_door_for_open
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_time_out_lock_work_active
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_sps_cloud_fb
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_dido_door_open_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2ledpisces.o(.data)
</UL>
<P><STRONG><a name="[29]"></a>ihu_bsp_stm32_dido_f2board_lock2_do1_on</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bsp_dido.o(i.ihu_bsp_stm32_dido_f2board_lock2_do1_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ihu_bsp_stm32_dido_f2board_lock2_do1_on &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_sps_cloud_fb
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2ledpisces.o(.data)
</UL>
<P><STRONG><a name="[2c]"></a>ihu_bsp_stm32_dido_f2board_lock3_do1_off</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp_dido.o(i.ihu_bsp_stm32_dido_f2board_lock3_do1_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ihu_bsp_stm32_dido_f2board_lock3_do1_off &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2ledpisces.o(.data)
</UL>
<P><STRONG><a name="[2b]"></a>ihu_bsp_stm32_dido_f2board_lock3_do1_on</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bsp_dido.o(i.ihu_bsp_stm32_dido_f2board_lock3_do1_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ihu_bsp_stm32_dido_f2board_lock3_do1_on &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2ledpisces.o(.data)
</UL>
<P><STRONG><a name="[2e]"></a>ihu_bsp_stm32_dido_f2board_lock4_do1_off</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp_dido.o(i.ihu_bsp_stm32_dido_f2board_lock4_do1_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ihu_bsp_stm32_dido_f2board_lock4_do1_off &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2ledpisces.o(.data)
</UL>
<P><STRONG><a name="[2d]"></a>ihu_bsp_stm32_dido_f2board_lock4_do1_on</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bsp_dido.o(i.ihu_bsp_stm32_dido_f2board_lock4_do1_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ihu_bsp_stm32_dido_f2board_lock4_do1_on &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2ledpisces.o(.data)
</UL>
<P><STRONG><a name="[269]"></a>ihu_bsp_stm32_dido_f2board_lock_act_flag_read</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsp_dido.o(i.ihu_bsp_stm32_dido_f2board_lock_act_flag_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ihu_bsp_stm32_dido_f2board_lock_act_flag_read &rArr; HAL_GPIO_ReadPin
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_init
</UL>

<P><STRONG><a name="[2b2]"></a>ihu_bsp_stm32_dido_f2board_mq2_cam_power_ctrl_off</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp_dido.o(i.ihu_bsp_stm32_dido_f2board_mq2_cam_power_ctrl_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ihu_bsp_stm32_dido_f2board_mq2_cam_power_ctrl_off &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_close_all_sensor_power
</UL>

<P><STRONG><a name="[2b5]"></a>ihu_bsp_stm32_dido_f2board_mq2_cam_power_ctrl_on</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bsp_dido.o(i.ihu_bsp_stm32_dido_f2board_mq2_cam_power_ctrl_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ihu_bsp_stm32_dido_f2board_mq2_cam_power_ctrl_on &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_open_all_sensor_power
</UL>

<P><STRONG><a name="[2b1]"></a>ihu_bsp_stm32_dido_f2board_sensor_power_ctrl_off</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp_dido.o(i.ihu_bsp_stm32_dido_f2board_sensor_power_ctrl_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ihu_bsp_stm32_dido_f2board_sensor_power_ctrl_off &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_close_all_sensor_power
</UL>

<P><STRONG><a name="[2b4]"></a>ihu_bsp_stm32_dido_f2board_sensor_power_ctrl_on</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bsp_dido.o(i.ihu_bsp_stm32_dido_f2board_sensor_power_ctrl_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ihu_bsp_stm32_dido_f2board_sensor_power_ctrl_on &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_open_all_sensor_power
</UL>

<P><STRONG><a name="[32a]"></a>ihu_bsp_stm32_dido_f2board_shake_read</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, bsp_dido.o(i.ihu_bsp_stm32_dido_f2board_shake_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = ihu_bsp_stm32_dido_f2board_shake_read &rArr; IhuDebugPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_usleep
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_shake_state
</UL>

<P><STRONG><a name="[32b]"></a>ihu_bsp_stm32_dido_f2board_smoke_read</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, bsp_dido.o(i.ihu_bsp_stm32_dido_f2board_smoke_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = ihu_bsp_stm32_dido_f2board_smoke_read &rArr; IhuDebugPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_usleep
</UL>
<BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_smoke_state
</UL>

<P><STRONG><a name="[32c]"></a>ihu_bsp_stm32_dido_f2board_water_read</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bsp_dido.o(i.ihu_bsp_stm32_dido_f2board_water_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ihu_bsp_stm32_dido_f2board_water_read &rArr; HAL_GPIO_ReadPin
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_water_state
</UL>

<P><STRONG><a name="[32d]"></a>ihu_bsp_stm32_f2board_equid_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_stmflash.o(i.ihu_bsp_stm32_f2board_equid_get))
<BR><BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vm_system_ctr_table_init
</UL>

<P><STRONG><a name="[316]"></a>ihu_bsp_stm32_i2c_mpu6050_read_buffer</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, bsp_i2c.o(i.ihu_bsp_stm32_i2c_mpu6050_read_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ihu_bsp_stm32_i2c_mpu6050_read_buffer &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BSP_STM32_MPU6050_Error
</UL>
<BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_vmmw_navig_mpu6050_read_data
</UL>

<P><STRONG><a name="[318]"></a>ihu_bsp_stm32_i2c_mpu6050_write_data</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, bsp_i2c.o(i.ihu_bsp_stm32_i2c_mpu6050_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ihu_bsp_stm32_i2c_mpu6050_write_data &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BSP_STM32_MPU6050_Error
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_vmmw_navig_mpu6050_write_reg
</UL>

<P><STRONG><a name="[31b]"></a>ihu_bsp_stm32_i2c_pcf8563_read_buffer</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, bsp_i2c.o(i.ihu_bsp_stm32_i2c_pcf8563_read_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ihu_bsp_stm32_i2c_pcf8563_read_buffer &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BSP_STM32_PCF8563_Error
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_vmmw_rtc_pcf8563_read_data
</UL>

<P><STRONG><a name="[31a]"></a>ihu_bsp_stm32_i2c_pcf8563_read_data</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, bsp_i2c.o(i.ihu_bsp_stm32_i2c_pcf8563_read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ihu_bsp_stm32_i2c_pcf8563_read_data &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BSP_STM32_PCF8563_Error
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_vmmw_rtc_pcf8563_read_byte
</UL>

<P><STRONG><a name="[31f]"></a>ihu_bsp_stm32_i2c_pcf8563_write_buffer</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, bsp_i2c.o(i.ihu_bsp_stm32_i2c_pcf8563_write_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ihu_bsp_stm32_i2c_pcf8563_write_buffer &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BSP_STM32_PCF8563_Error
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_vmmw_rtc_pcf8563_write_buffer
</UL>

<P><STRONG><a name="[320]"></a>ihu_bsp_stm32_i2c_pcf8563_write_data</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, bsp_i2c.o(i.ihu_bsp_stm32_i2c_pcf8563_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ihu_bsp_stm32_i2c_pcf8563_write_data &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BSP_STM32_PCF8563_Error
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_vmmw_rtc_pcf8563_write_reg
</UL>

<P><STRONG><a name="[2eb]"></a>ihu_bsp_stm32_i2c_slave_hw_init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, bsp_i2c.o(i.ihu_bsp_stm32_i2c_slave_hw_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ihu_bsp_stm32_i2c_slave_hw_init
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_i2caries_hw_init
</UL>

<P><STRONG><a name="[26]"></a>ihu_bsp_stm32_led_f2board_off</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp_led.o(i.ihu_bsp_stm32_led_f2board_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ihu_bsp_stm32_led_f2board_off &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2ledpisces.o(.data)
</UL>
<P><STRONG><a name="[25]"></a>ihu_bsp_stm32_led_f2board_on</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp_led.o(i.ihu_bsp_stm32_led_f2board_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ihu_bsp_stm32_led_f2board_on &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2ledpisces.o(.data)
</UL>
<P><STRONG><a name="[2d9]"></a>ihu_bsp_stm32_rtc_get_current_unix_time</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, bsp_rtc.o(i.ihu_bsp_stm32_rtc_get_current_unix_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ihu_bsp_stm32_rtc_get_current_unix_time &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_blemod_hc05_uart_fetch_mac_addr_in_AT_cmd_mode
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_pack
</UL>

<P><STRONG><a name="[301]"></a>ihu_bsp_stm32_spi_flash_read_byte</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, bsp_spi.o(i.ihu_bsp_stm32_spi_flash_read_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ihu_bsp_stm32_spi_flash_read_byte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_ReadRawRC
</UL>

<P><STRONG><a name="[300]"></a>ihu_bsp_stm32_spi_flash_send_byte</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, bsp_spi.o(i.ihu_bsp_stm32_spi_flash_send_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ihu_bsp_stm32_spi_flash_send_byte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_WriteRawRC
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_ReadRawRC
</UL>

<P><STRONG><a name="[302]"></a>ihu_bsp_stm32_spi_mf522_cs_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp_spi.o(i.ihu_bsp_stm32_spi_mf522_cs_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ihu_bsp_stm32_spi_mf522_cs_disable &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_spi_slave_hw_init
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_WriteRawRC
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_ReadRawRC
</UL>

<P><STRONG><a name="[2ff]"></a>ihu_bsp_stm32_spi_mf522_cs_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp_spi.o(i.ihu_bsp_stm32_spi_mf522_cs_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ihu_bsp_stm32_spi_mf522_cs_enable &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_WriteRawRC
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_ReadRawRC
</UL>

<P><STRONG><a name="[2fb]"></a>ihu_bsp_stm32_spi_mf522_reset_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp_spi.o(i.ihu_bsp_stm32_spi_mf522_reset_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ihu_bsp_stm32_spi_mf522_reset_disable &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_spi_slave_hw_init
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_PcdReset
</UL>

<P><STRONG><a name="[2fc]"></a>ihu_bsp_stm32_spi_mf522_reset_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp_spi.o(i.ihu_bsp_stm32_spi_mf522_reset_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ihu_bsp_stm32_spi_mf522_reset_enable &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_PcdReset
</UL>

<P><STRONG><a name="[30d]"></a>ihu_bsp_stm32_spi_nrf24l01_ce_high</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp_spi.o(i.ihu_bsp_stm32_spi_nrf24l01_ce_high))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ihu_bsp_stm32_spi_nrf24l01_ce_high &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_nrf24l01_rx_mode
</UL>

<P><STRONG><a name="[30b]"></a>ihu_bsp_stm32_spi_nrf24l01_ce_low</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp_spi.o(i.ihu_bsp_stm32_spi_nrf24l01_ce_low))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ihu_bsp_stm32_spi_nrf24l01_ce_low &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_nrf24l01_rx_mode
</UL>

<P><STRONG><a name="[308]"></a>ihu_bsp_stm32_spi_nrf24l01_cs_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp_spi.o(i.ihu_bsp_stm32_spi_nrf24l01_cs_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ihu_bsp_stm32_spi_nrf24l01_cs_disable &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_nrf24l01_write_reg
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_nrf24l01_write_buf
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_nrf24l01_read_reg
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_nrf24l01_read_buf
</UL>

<P><STRONG><a name="[306]"></a>ihu_bsp_stm32_spi_nrf24l01_cs_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp_spi.o(i.ihu_bsp_stm32_spi_nrf24l01_cs_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ihu_bsp_stm32_spi_nrf24l01_cs_enable &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_nrf24l01_write_reg
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_nrf24l01_write_buf
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_nrf24l01_read_reg
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_nrf24l01_read_buf
</UL>

<P><STRONG><a name="[307]"></a>ihu_bsp_stm32_spi_nrf24l01_read_write_byte</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, bsp_spi.o(i.ihu_bsp_stm32_spi_nrf24l01_read_write_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ihu_bsp_stm32_spi_nrf24l01_read_write_byte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_nrf24l01_write_reg
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_nrf24l01_write_buf
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_nrf24l01_read_reg
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_nrf24l01_read_buf
</UL>

<P><STRONG><a name="[310]"></a>ihu_bsp_stm32_spi_slave_hw_init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, bsp_spi.o(i.ihu_bsp_stm32_spi_slave_hw_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ihu_bsp_stm32_spi_slave_hw_init &rArr; ihu_bsp_stm32_spi_mf522_reset_disable &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_spi_mf522_reset_disable
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_spi_mf522_cs_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_spsvirgo_hw_init
</UL>

<P><STRONG><a name="[29f]"></a>ihu_bsp_stm32_sps_ble_send_data</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bsp_usart.o(i.ihu_bsp_stm32_sps_ble_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ihu_bsp_stm32_sps_ble_send_data &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_blemod_uart_send_string
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_blemod_uart_send_AT_command
</UL>

<P><STRONG><a name="[32f]"></a>ihu_bsp_stm32_sps_cam_rcv_data_timeout</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bsp_usart.o(i.ihu_bsp_stm32_sps_cam_rcv_data_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ihu_bsp_stm32_sps_cam_rcv_data_timeout &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_cam_ulcdsc03_uart_frame_procedure_take_picture
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_cam_ulcdsc03_uart_frame_procedure_sync
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_cam_ulcdsc03_uart_frame_procedure_fetch_picture
</UL>

<P><STRONG><a name="[330]"></a>ihu_bsp_stm32_sps_cam_send_data</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bsp_usart.o(i.ihu_bsp_stm32_sps_cam_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ihu_bsp_stm32_sps_cam_send_data &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_cam_ulcdsc03_uart_frame_procedure_take_picture
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_cam_ulcdsc03_uart_frame_procedure_sync
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_cam_ulcdsc03_uart_frame_procedure_fetch_picture
</UL>

<P><STRONG><a name="[2e6]"></a>ihu_bsp_stm32_sps_gprs_send_data</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bsp_usart.o(i.ihu_bsp_stm32_sps_gprs_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ihu_bsp_stm32_sps_gprs_send_data &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_gprsmod_tcp_u8_data_transmit_with_receive
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_send_string
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_send_AT_command
</UL>

<P><STRONG><a name="[1a9]"></a>ihu_bsp_stm32_sps_print_send_data</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, bsp_usart.o(i.ihu_bsp_stm32_sps_print_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ihu_bsp_stm32_sps_print_send_data &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
</UL>

<P><STRONG><a name="[30f]"></a>ihu_bsp_stm32_sps_slave_hw_init</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, bsp_usart.o(i.ihu_bsp_stm32_sps_slave_hw_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ihu_bsp_stm32_sps_slave_hw_init
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_spsvirgo_hw_init
</UL>

<P><STRONG><a name="[28c]"></a>ihu_dcmiaris_ccl_sleep_and_fault_mode_ul_scan_illegal_dcmi_value</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, l2dcmiaris.o(i.ihu_dcmiaris_ccl_sleep_and_fault_mode_ul_scan_illegal_dcmi_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ihu_dcmiaris_ccl_sleep_and_fault_mode_ul_scan_illegal_dcmi_value
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_fault_report_send
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_event_report_send
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_close_door_report_send
</UL>

<P><STRONG><a name="[25f]"></a>ihu_dcmiaris_take_picture</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, l2dcmiaris.o(i.ihu_dcmiaris_take_picture))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = ihu_dcmiaris_take_picture &rArr; ihu_vmmw_cam_ulcdsc03_uart_get_picture &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_cam_ulcdsc03_uart_get_picture
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_hand_active_trigger_to_work
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_dido_door_open_event
</UL>

<P><STRONG><a name="[288]"></a>ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_bat_state</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, l2didocap.o(i.ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_bat_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_bat_state &rArr; ihu_adclibra_ccl_scan_battery_warning_level &rArr; IhuDebugPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_adclibra_ccl_scan_battery_warning_level
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_fault_report_send
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_event_report_send
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_close_door_report_send
</UL>

<P><STRONG><a name="[27e]"></a>ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_bat_value</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, l2didocap.o(i.ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_bat_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_bat_value &rArr; ihu_usleep &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_adc1_start
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_adc1_ccl_get_battery_value
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_usleep
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_ccl_sensor_status_req
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_fault_report_send
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_event_report_send
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_close_door_report_send
</UL>

<P><STRONG><a name="[26e]"></a>ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_door_open_state</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, l2didocap.o(i.ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_door_open_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_door_open_state &rArr; ihu_bsp_stm32_dido_f2board_door2_restriction_read &rArr; HAL_GPIO_ReadPin
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_door2_restriction_read
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_door1_restriction_read
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_init
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_fault_report_send
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_event_report_send
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_close_door_report_send
</UL>

<P><STRONG><a name="[27a]"></a>ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_fall_state</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, l2didocap.o(i.ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_fall_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_fall_state &rArr; ihu_wmmw_navig_mpu6050_axis_z_angle_caculate_by_static_method &rArr; func_vmmw_navig_mpu6050_acc_read &rArr; ihu_vmmw_navig_mpu6050_return_id &rArr; IhuDebugPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_wmmw_navig_mpu6050_axis_z_angle_caculate_by_static_method
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_navig_mpu6050_init
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_ccl_sensor_status_req
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_fault_report_send
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_event_report_send
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_close_door_report_send
</UL>

<P><STRONG><a name="[27d]"></a>ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_humid_value</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, l2didocap.o(i.ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_humid_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_humid_value &rArr; ihu_bsp_stm32_dido_f2board_dht11_humid_read &rArr; func_bsp_stm32_dido_dht11_read_temp_and_humidity &rArr; IhuDebugPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_dht11_humid_read
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_ccl_sensor_status_req
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_fault_report_send
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_event_report_send
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_close_door_report_send
</UL>

<P><STRONG><a name="[289]"></a>ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_rsv1_value</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, l2i2caries.o(i.ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_rsv1_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_rsv1_value
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_fault_report_send
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_event_report_send
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_close_door_report_send
</UL>

<P><STRONG><a name="[28a]"></a>ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_rsv2_value</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, l2i2caries.o(i.ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_rsv2_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_rsv2_value
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_fault_report_send
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_event_report_send
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_close_door_report_send
</UL>

<P><STRONG><a name="[287]"></a>ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_shake_state</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, l2didocap.o(i.ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_shake_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_shake_state &rArr; ihu_bsp_stm32_dido_f2board_shake_read &rArr; IhuDebugPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_shake_read
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_fault_report_send
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_event_report_send
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_close_door_report_send
</UL>

<P><STRONG><a name="[278]"></a>ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_smoke_state</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, l2didocap.o(i.ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_smoke_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_smoke_state &rArr; ihu_bsp_stm32_dido_f2board_smoke_read &rArr; IhuDebugPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_smoke_read
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_ccl_sensor_status_req
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_fault_report_send
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_event_report_send
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_close_door_report_send
</UL>

<P><STRONG><a name="[27c]"></a>ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_temp_value</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, l2didocap.o(i.ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_temp_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_temp_value &rArr; ihu_bsp_stm32_dido_f2board_dht11_temp_read &rArr; func_bsp_stm32_dido_dht11_read_temp_and_humidity &rArr; IhuDebugPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_dht11_temp_read
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_ccl_sensor_status_req
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_fault_report_send
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_event_report_send
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_close_door_report_send
</UL>

<P><STRONG><a name="[279]"></a>ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_water_state</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, l2didocap.o(i.ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_water_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_water_state &rArr; ihu_bsp_stm32_dido_f2board_water_read &rArr; HAL_GPIO_ReadPin
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_water_read
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_ccl_sensor_status_req
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_fault_report_send
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_event_report_send
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_close_door_report_send
</UL>

<P><STRONG><a name="[261]"></a>ihu_ledpisces_galowag_start</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, l2ledpisces.o(i.ihu_ledpisces_galowag_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = ihu_ledpisces_galowag_start &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ledpisces_hw_init
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_time_out_lock_work_active
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_sps_cloud_fb
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_init
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_fault_state_trigger
</UL>

<P><STRONG><a name="[332]"></a>ihu_message_queue_create</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, vmfreeoslayer.o(i.ihu_message_queue_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = ihu_message_queue_create &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strerror
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_task_create_and_run
</UL>

<P><STRONG><a name="[11b]"></a>ihu_message_rcv</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, vmfreeoslayer.o(i.ihu_message_rcv))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = ihu_message_rcv &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_usleep
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strerror
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmProcessingLaunch
</UL>

<P><STRONG><a name="[19d]"></a>ihu_message_send</STRONG> (Thumb, 2596 bytes, Stack size 776 bytes, vmfreeoslayer.o(i.ihu_message_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312<LI>Call Chain = ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_timerid_to_string
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_taskid_to_string
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_msgid_to_string
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strerror
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vm_send_init_msg_to_app_task
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_com_heart_beat_rcv
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_timer_routine_handler_1s
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_timer_init
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_time_out
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ledpisces_time_out_period_scan
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ledpisces_time_out
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ledpisces_init
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_i2caries_time_out_period_scan
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_i2caries_time_out
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_i2caries_init
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_i2caries_ccl_sensor_status_req
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_didocap_time_out_period_scan
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_time_out
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_init
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_ccl_sensor_status_req
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_ccl_door_open_req
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_ccl_door_close_req
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_adclibra_time_out_period_scan
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_adclibra_time_out
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_adclibra_init
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_state_confirm_received_handle
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_lock_auth_resp_received_handle
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_time_out_period_event_report
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_time_out_lock_work_wait_door_for_open
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_time_out_lock_work_active
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_time_out
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_sps_sensor_status_resp
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_sps_cloud_fb
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_period_report_trigger
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_init
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_i2c_sensor_status_resp
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_hand_active_trigger_to_work
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_fault_state_trigger
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_door_close_event
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_dido_sensor_status_resp
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_dido_door_open_event
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_dcmi_sensor_status_resp
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_dcmiaris_time_out_period_scan
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_dcmiaris_time_out
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_dcmiaris_init
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_dcmiaris_ccl_sensor_status_req
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_spsvirgo_time_out_period_scan
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_time_out
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_init
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_sensor_status_req
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_open_auth_inq
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_fault_report_send
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_event_report_send
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_close_door_report_send
</UL>

<P><STRONG><a name="[338]"></a>ihu_msgid_to_string</STRONG> (Thumb, 128 bytes, Stack size 80 bytes, vmfreeoslayer.o(i.ihu_msgid_to_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
</UL>

<P><STRONG><a name="[119]"></a>ihu_sleep</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, vmfreeoslayer.o(i.ihu_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ihu_sleep &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmProcessingLaunch
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_rfidmod_nrf24l01_spi_read_id
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_PcdReset
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_ccl_door_open_req
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_ccl_door_close_req
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_time_out_lock_work_active
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_stm_main_recovery_from_fault
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_open_all_sensor_power
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_close_all_sensor_power
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_sps_fault_report_cfm
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_sps_event_report_cfm
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_sps_cloud_fb
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_sps_close_door_report_cfm
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_init
</UL>

<P><STRONG><a name="[28b]"></a>ihu_spsvirgo_ccl_fetch_rssi_value</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, l2spsvirgo.o(i.ihu_spsvirgo_ccl_fetch_rssi_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = ihu_spsvirgo_ccl_fetch_rssi_value &rArr; ihu_vmmw_gprsmod_get_rssi_value &rArr; func_gprsmod_send_AT_command &rArr; IhuDebugPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_gprsmod_get_rssi_value
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_sensor_status_req
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_fault_report_send
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_event_report_send
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_close_door_report_send
</UL>

<P><STRONG><a name="[33c]"></a>ihu_system_task_init_call</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, vmfreeoslayer.o(i.ihu_system_task_init_call))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = ihu_system_task_init_call &rArr; ihu_task_create_and_run &rArr; FsmAddNew &rArr; FsmSetState &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_task_create_and_run
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_task_create_all
</UL>

<P><STRONG><a name="[33e]"></a>ihu_task_create</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, vmfreeoslayer.o(i.ihu_task_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = ihu_task_create &rArr; IhuDebugPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strerror
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_task_create_and_run
</UL>

<P><STRONG><a name="[340]"></a>ihu_task_create_all</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, vmfreeoslayer.o(i.ihu_task_create_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 1352<LI>Call Chain = ihu_task_create_all &rArr; ihu_vm_send_init_msg_to_app_task &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vm_send_init_msg_to_app_task
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_system_task_init_call
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vm_main
</UL>

<P><STRONG><a name="[33d]"></a>ihu_task_create_and_run</STRONG> (Thumb, 334 bytes, Stack size 32 bytes, vmfreeoslayer.o(i.ihu_task_create_and_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = ihu_task_create_and_run &rArr; FsmAddNew &rArr; FsmSetState &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_task_create
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_queue_create
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmAddNew
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_system_task_init_call
</UL>

<P><STRONG><a name="[337]"></a>ihu_taskid_to_string</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, vmfreeoslayer.o(i.ihu_taskid_to_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = ihu_taskid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
</UL>

<P><STRONG><a name="[25b]"></a>ihu_timer_start</STRONG> (Thumb, 376 bytes, Stack size 24 bytes, l1timer_freeos.o(i.ihu_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = ihu_timer_start &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_init
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ledpisces_init
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_adclibra_init
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_sps_cloud_fb
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_init
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_hand_active_trigger_to_work
</UL>

<P><STRONG><a name="[25e]"></a>ihu_timer_stop</STRONG> (Thumb, 348 bytes, Stack size 24 bytes, l1timer_freeos.o(i.ihu_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = ihu_timer_stop &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_time_out_lock_work_active
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_sps_cloud_fb
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_sps_close_door_report_cfm
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_dido_door_open_event
</UL>

<P><STRONG><a name="[339]"></a>ihu_timerid_to_string</STRONG> (Thumb, 120 bytes, Stack size 56 bytes, vmfreeoslayer.o(i.ihu_timerid_to_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = ihu_timerid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
</UL>

<P><STRONG><a name="[259]"></a>ihu_usleep</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, vmfreeoslayer.o(i.ihu_usleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ihu_usleep &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_smoke_read
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_shake_read
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_dht11_temp_read
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_dht11_humid_read
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_cpu_power_ctrl_off
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_bsp_stm32_dido_dht11_read_temp_and_humidity
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_rcv
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_timer_init
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_wmmw_navig_mpu6050_axis_z_angle_caculate_by_static_method
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_navig_mpu6050_init
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_rfidmod_nrf24l01_spi_read_id
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_nrf24l01_write_reg
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_nrf24l01_write_buf
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_nrf24l01_rx_package
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_nrf24l01_rx_mode
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_nrf24l01_read_reg
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_nrf24l01_read_buf
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_M500PcdConfigISOType
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_gprsmod_http_data_transmit_with_receive
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_wait_AT_command_fb
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_send_AT_command
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_module_session_init
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_blemod_hc05_uart_fetch_mac_addr_in_AT_cmd_mode
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_blemod_uart_send_AT_command
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ledpisces_init
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_i2caries_init
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_init
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_adclibra_ccl_scan_battery_warning_level
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_adclibra_init
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_bat_value
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_cam_ulcdsc03_uart_frame_procedure_take_picture
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_cam_ulcdsc03_uart_frame_procedure_sync
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_cam_ulcdsc03_uart_frame_procedure_fetch_picture
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_vmmw_rtc_pcf8563_init
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_time_out_lock_work_wait_door_for_open
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_time_out_lock_work_active
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_open_all_sensor_power
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_close_all_sensor_power
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_sps_cloud_fb
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_init
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_hand_active_trigger_to_work
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_dido_door_open_event
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_dcmiaris_init
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_init
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_sensor_status_req
</UL>

<P><STRONG><a name="[1b4]"></a>ihu_vm_main</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, vmfreeoslayer.o(i.ihu_vm_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1360<LI>Call Chain = ihu_vm_main &rArr; ihu_task_create_all &rArr; ihu_vm_send_init_msg_to_app_task &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vm_system_ctr_table_init
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_task_create_all
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
</UL>

<P><STRONG><a name="[341]"></a>ihu_vm_send_init_msg_to_app_task</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, vmfreeoslayer.o(i.ihu_vm_send_init_msg_to_app_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 1336<LI>Call Chain = ihu_vm_send_init_msg_to_app_task &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_task_create_all
</UL>

<P><STRONG><a name="[342]"></a>ihu_vm_system_ctr_table_init</STRONG> (Thumb, 1596 bytes, Stack size 56 bytes, vmfreeoslayer.o(i.ihu_vm_system_ctr_table_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = ihu_vm_system_ctr_table_init &rArr; FsmInit &rArr; IhuDebugPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmInit
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_f2board_equid_get
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vm_main
</UL>

<P><STRONG><a name="[290]"></a>ihu_vmmw_blemod_hc05_uart_fetch_mac_addr_in_AT_cmd_mode</STRONG> (Thumb, 1830 bytes, Stack size 80 bytes, vmmw_ble.o(i.ihu_vmmw_blemod_hc05_uart_fetch_mac_addr_in_AT_cmd_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = ihu_vmmw_blemod_hc05_uart_fetch_mac_addr_in_AT_cmd_mode &rArr; IhuDebugPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_rtc_get_current_unix_time
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_ble_atcmd_mode_ctrl_on
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_ble_atcmd_mode_ctrl_off
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_usleep
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_blemod_uart_send_AT_command
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_blemod_uart_hc05_init
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_blemod_uart_clear_receive_buffer
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_open_auth_inq
</UL>

<P><STRONG><a name="[346]"></a>ihu_vmmw_cam_ulcdsc03_uart_frame_procedure_fetch_picture</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, vmmw_cam.o(i.ihu_vmmw_cam_ulcdsc03_uart_frame_procedure_fetch_picture))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ihu_vmmw_cam_ulcdsc03_uart_frame_procedure_fetch_picture &rArr; ihu_bsp_stm32_sps_cam_send_data &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_sps_cam_send_data
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_sps_cam_rcv_data_timeout
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_usleep
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_cam_ulcdsc03_uart_get_picture
</UL>

<P><STRONG><a name="[347]"></a>ihu_vmmw_cam_ulcdsc03_uart_frame_procedure_sync</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, vmmw_cam.o(i.ihu_vmmw_cam_ulcdsc03_uart_frame_procedure_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ihu_vmmw_cam_ulcdsc03_uart_frame_procedure_sync &rArr; ihu_bsp_stm32_sps_cam_send_data &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_sps_cam_send_data
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_sps_cam_rcv_data_timeout
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_usleep
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_cam_ulcdsc03_uart_get_picture
</UL>

<P><STRONG><a name="[348]"></a>ihu_vmmw_cam_ulcdsc03_uart_frame_procedure_take_picture</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, vmmw_cam.o(i.ihu_vmmw_cam_ulcdsc03_uart_frame_procedure_take_picture))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ihu_vmmw_cam_ulcdsc03_uart_frame_procedure_take_picture &rArr; ihu_bsp_stm32_sps_cam_send_data &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_sps_cam_send_data
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_sps_cam_rcv_data_timeout
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_usleep
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_cam_ulcdsc03_uart_get_picture
</UL>

<P><STRONG><a name="[331]"></a>ihu_vmmw_cam_ulcdsc03_uart_get_picture</STRONG> (Thumb, 270 bytes, Stack size 560 bytes, vmmw_cam.o(i.ihu_vmmw_cam_ulcdsc03_uart_get_picture))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016<LI>Call Chain = ihu_vmmw_cam_ulcdsc03_uart_get_picture &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_cam_ulcdsc03_uart_frame_procedure_take_picture
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_cam_ulcdsc03_uart_frame_procedure_sync
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_cam_ulcdsc03_uart_frame_procedure_fetch_picture
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_dcmiaris_take_picture
</UL>

<P><STRONG><a name="[33b]"></a>ihu_vmmw_gprsmod_get_rssi_value</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, vmmw_gprs.o(i.ihu_vmmw_gprsmod_get_rssi_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = ihu_vmmw_gprsmod_get_rssi_value &rArr; func_gprsmod_send_AT_command &rArr; IhuDebugPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_send_AT_command
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_clear_receive_buffer
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_spsvirgo_ccl_fetch_rssi_value
</UL>

<P><STRONG><a name="[28e]"></a>ihu_vmmw_gprsmod_http_data_transmit_with_receive</STRONG> (Thumb, 790 bytes, Stack size 600 bytes, vmmw_gprs.o(i.ihu_vmmw_gprsmod_http_data_transmit_with_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144<LI>Call Chain = ihu_vmmw_gprsmod_http_data_transmit_with_receive &rArr; func_gprsmod_module_session_init &rArr; func_gprsmod_module_info_retrieve &rArr; func_gprsmod_send_AT_command &rArr; IhuDebugPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_usleep
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_setup_gprs_session_connection
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_send_string
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_send_AT_command
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_module_session_init
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_close_gprs_session_connection
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_open_auth_inq
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_fault_report_send
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_event_report_send
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_close_door_report_send
</UL>

<P><STRONG><a name="[286]"></a>ihu_vmmw_gprsmod_tcp_u8_data_transmit_with_receive</STRONG> (Thumb, 502 bytes, Stack size 592 bytes, vmmw_gprs.o(i.ihu_vmmw_gprsmod_tcp_u8_data_transmit_with_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 1136<LI>Call Chain = ihu_vmmw_gprsmod_tcp_u8_data_transmit_with_receive &rArr; func_gprsmod_module_session_init &rArr; func_gprsmod_module_info_retrieve &rArr; func_gprsmod_send_AT_command &rArr; IhuDebugPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_sps_gprs_send_data
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_wait_AT_command_fb
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_setup_gprs_session_connection
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_send_AT_command
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_module_session_init
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_close_gprs_session_connection
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_close_door_report_send
</UL>

<P><STRONG><a name="[349]"></a>ihu_vmmw_navig_mpu6050_angle_caculate_by_acc_xyz</STRONG> (Thumb, 324 bytes, Stack size 24 bytes, vmmw_navig.o(i.ihu_vmmw_navig_mpu6050_angle_caculate_by_acc_xyz))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ihu_vmmw_navig_mpu6050_angle_caculate_by_acc_xyz &rArr; atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_wmmw_navig_mpu6050_axis_z_angle_caculate_by_static_method
</UL>

<P><STRONG><a name="[263]"></a>ihu_vmmw_navig_mpu6050_init</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, vmmw_navig.o(i.ihu_vmmw_navig_mpu6050_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = ihu_vmmw_navig_mpu6050_init &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_usleep
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_vmmw_navig_mpu6050_write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_i2caries_ccl_sensor_status_req
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_fall_state
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_hand_active_trigger_to_work
</UL>

<P><STRONG><a name="[314]"></a>ihu_vmmw_navig_mpu6050_read_acc</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, vmmw_navig.o(i.ihu_vmmw_navig_mpu6050_read_acc))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ihu_vmmw_navig_mpu6050_read_acc &rArr; func_vmmw_navig_mpu6050_read_data &rArr; ihu_bsp_stm32_i2c_mpu6050_read_buffer &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_vmmw_navig_mpu6050_read_data
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_vmmw_navig_mpu6050_acc_read
</UL>

<P><STRONG><a name="[313]"></a>ihu_vmmw_navig_mpu6050_return_id</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, vmmw_navig.o(i.ihu_vmmw_navig_mpu6050_return_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = ihu_vmmw_navig_mpu6050_return_id &rArr; IhuDebugPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_vmmw_navig_mpu6050_read_data
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_vmmw_navig_mpu6050_acc_read
</UL>

<P><STRONG><a name="[291]"></a>ihu_vmmw_rfidmod_mf522_spi_read_id</STRONG> (Thumb, 600 bytes, Stack size 104 bytes, vmmw_rfid.o(i.ihu_vmmw_rfidmod_mf522_spi_read_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = ihu_vmmw_rfidmod_mf522_spi_read_id &rArr; IhuDebugPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_ReadRawRC
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_PcdWrite
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_PcdSelect
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_PcdReset
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_PcdRequest
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_PcdRead
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_PcdHalt
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_PcdAuthState
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_PcdAnticoll
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_mf522_M500PcdConfigISOType
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_clear_receive_buffer
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_open_auth_inq
</UL>

<P><STRONG><a name="[292]"></a>ihu_vmmw_rfidmod_nrf24l01_spi_read_id</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, vmmw_rfid.o(i.ihu_vmmw_rfidmod_nrf24l01_spi_read_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = ihu_vmmw_rfidmod_nrf24l01_spi_read_id &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_usleep
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_sleep
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_nrf24l01_rx_package
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_nrf24l01_rx_mode
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_rfidmod_nrf24l01_check
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_open_auth_inq
</UL>

<P><STRONG><a name="[264]"></a>ihu_wmmw_navig_mpu6050_axis_z_angle_caculate_by_static_method</STRONG> (Thumb, 278 bytes, Stack size 88 bytes, vmmw_navig.o(i.ihu_wmmw_navig_mpu6050_axis_z_angle_caculate_by_static_method))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = ihu_wmmw_navig_mpu6050_axis_z_angle_caculate_by_static_method &rArr; func_vmmw_navig_mpu6050_acc_read &rArr; ihu_vmmw_navig_mpu6050_return_id &rArr; IhuDebugPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_usleep
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_navig_mpu6050_angle_caculate_by_acc_xyz
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_vmmw_navig_mpu6050_acc_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_i2caries_ccl_sensor_status_req
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_fall_state
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_hand_active_trigger_to_work
</UL>

<P><STRONG><a name="[c7]"></a>main</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1424<LI>Call Chain = main &rArr; MX_FREERTOS_Init &rArr; ihu_vm_main &rArr; ihu_task_create_all &rArr; ihu_vm_send_init_msg_to_app_task &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive_IT
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Slave_Receive_IT
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_NVIC_Init
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[1ef]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_InterfaceInit
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MTP_InterfaceInit
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CDC_InterfaceInit
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AUDIO_InterfaceInit
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_InterfaceInit
</UL>

<P><STRONG><a name="[1d9]"></a>osDelay</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cmsis_os.o(i.osDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTask02
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MTP_Process
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AUDIO_Transmit
</UL>

<P><STRONG><a name="[34f]"></a>osKernelStart</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmsis_os.o(i.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = osKernelStart &rArr; vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[262]"></a>osKernelSysTick</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, cmsis_os.o(i.osKernelSysTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osKernelSysTick &rArr; xTaskGetTickCountFromISR &rArr; vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_gprsmod_tcp_u8_data_transmit_with_receive
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_gprsmod_http_data_transmit_with_receive
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_send_AT_command
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_period_report_trigger
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_hand_active_trigger_to_work
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_sensor_status_req
</UL>

<P><STRONG><a name="[1b3]"></a>osMessageCreate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cmsis_os.o(i.osMessageCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = osMessageCreate &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Init
</UL>

<P><STRONG><a name="[244]"></a>osMessageGet</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, cmsis_os.o(i.osMessageGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = osMessageGet &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process_OS
</UL>

<P><STRONG><a name="[10c]"></a>osMessagePut</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, cmsis_os.o(i.osMessagePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inHandlerMode
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_NotifyURBChange
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Disconnect
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Connect
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PTP_Process
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Process
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Process
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PTP_OpenSession
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PTP_GetStorageInfo
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PTP_GetStorageIds
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PTP_GetDeviceInfo
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MTP_Process
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MTP_ClassRequest
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_ProcessTransmission
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_ProcessReception
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AUDIO_Transmit
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AUDIO_OutputStream
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AUDIO_HandleCSRequest
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AUDIO_ClassRequest
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_SOFProcess
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_Process
</UL>

<P><STRONG><a name="[1da]"></a>osSystickHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cmsis_os.o(i.osSystickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osSystickHandler &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1b2]"></a>osThreadCreate</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, cmsis_os.o(i.osThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = osThreadCreate &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeFreeRtosPriority
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Init
</UL>

<P><STRONG><a name="[1b1]"></a>osTimerCreate</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, cmsis_os.o(i.osTimerCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = osTimerCreate &rArr; xTimerCreate &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FREERTOS_Init
</UL>

<P><STRONG><a name="[35b]"></a>pvPortMalloc</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationMallocFailedHook
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAllocateTCBAndStack
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
</UL>

<P><STRONG><a name="[398]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tasks.o(i.pvTaskIncrementMutexHeldCount))
<BR><BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[39b]"></a>pxPortInitialiseStack</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[34a]"></a>sqrt</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_navig_mpu6050_angle_caculate_by_acc_xyz
</UL>

<P><STRONG><a name="[366]"></a>uxListRemove</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>

<P><STRONG><a name="[36c]"></a>vApplicationIdleHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, freertos.o(i.vApplicationIdleHook))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[381]"></a>vApplicationMallocFailedHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, freertos.o(i.vApplicationMallocFailedHook))
<BR><BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[393]"></a>vApplicationStackOverflowHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, freertos.o(i.vApplicationStackOverflowHook))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[39c]"></a>vApplicationTickHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, freertos.o(i.vApplicationTickHook))
<BR><BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[35f]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[370]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTCBVariables
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
</UL>

<P><STRONG><a name="[359]"></a>vListInsert</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>

<P><STRONG><a name="[38c]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[35e]"></a>vPortEnterCritical</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[361]"></a>vPortExitCritical</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortClearInterruptMask
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[35c]"></a>vPortFree</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAllocateTCBAndStack
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[394]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortSetupTimerInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[36e]"></a>vPortSuppressTicksAndSleep</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, port.o(i.vPortSuppressTicksAndSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vPortSuppressTicksAndSleep &rArr; vTaskStepTick
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreSleepProcessing
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostSleepProcessing
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStepTick
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskConfirmSleepModeStatus
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[388]"></a>vPortValidateInterruptPriority</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, port.o(i.vPortValidateInterruptPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortGetIPSR
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[36b]"></a>vPortYield</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, port.o(i.vPortYield))
<BR><BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[360]"></a>vQueueAddToRegistry</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, queue.o(i.vQueueAddToRegistry))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vQueueAddToRegistry
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[379]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, queue.o(i.vQueueWaitForMessageRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[33a]"></a>vTaskDelay</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_usleep
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_sleep
</UL>

<P><STRONG><a name="[37e]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[38b]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[38a]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventListRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[38d]"></a>vTaskPriorityInherit</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, tasks.o(i.vTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[38e]"></a>vTaskSetTimeOutState</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, tasks.o(i.vTaskSetTimeOutState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vTaskSetTimeOutState
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[350]"></a>vTaskStartScheduler</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureTimerForRunTimeStats
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[387]"></a>vTaskStepTick</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tasks.o(i.vTaskStepTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vTaskStepTick
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
</UL>

<P><STRONG><a name="[364]"></a>vTaskSuspendAll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[e1]"></a>vTaskSwitchContext</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRunTimeCounterValue
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[391]"></a>xPortStartScheduler</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xPortStartScheduler &rArr; vPortSetupTimerInterrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[356]"></a>xPortSysTickHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, port.o(i.xPortSysTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortClearInterruptMask
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSystickHandler
</UL>

<P><STRONG><a name="[343]"></a>xQueueCreateMutex</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, queue.o(i.xQueueCreateMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vm_system_ctr_table_init
</UL>

<P><STRONG><a name="[333]"></a>xQueueGenericCreate</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageCreate
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_queue_create
</UL>

<P><STRONG><a name="[335]"></a>xQueueGenericReceive</STRONG> (Thumb, 300 bytes, Stack size 48 bytes, queue.o(i.xQueueGenericReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_rcv
</UL>

<P><STRONG><a name="[397]"></a>xQueueGenericReset</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[336]"></a>xQueueGenericSend</STRONG> (Thumb, 272 bytes, Stack size 48 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
</UL>

<P><STRONG><a name="[354]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, queue.o(i.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortClearInterruptMask
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
</UL>

<P><STRONG><a name="[1aa]"></a>xQueueGiveMutexRecursive</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, queue.o(i.xQueueGiveMutexRecursive))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
</UL>

<P><STRONG><a name="[353]"></a>xQueueReceiveFromISR</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, queue.o(i.xQueueReceiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xQueueReceiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortClearInterruptMask
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
</UL>

<P><STRONG><a name="[1a8]"></a>xQueueTakeMutexRecursive</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, queue.o(i.xQueueTakeMutexRecursive))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
</UL>

<P><STRONG><a name="[399]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskCheckForTimeOut &rArr; vTaskSetTimeOutState
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[33f]"></a>xTaskGenericCreate</STRONG> (Thumb, 236 bytes, Stack size 56 bytes, tasks.o(i.xTaskGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTCBVariables
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAllocateTCBAndStack
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_task_create
</UL>

<P><STRONG><a name="[39a]"></a>xTaskGetCurrentTaskHandle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetCurrentTaskHandle))
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
</UL>

<P><STRONG><a name="[355]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSystickHandler
</UL>

<P><STRONG><a name="[297]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_timer_init
</UL>

<P><STRONG><a name="[352]"></a>xTaskGetTickCountFromISR</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tasks.o(i.xTaskGetTickCountFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskGetTickCountFromISR &rArr; vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
</UL>

<P><STRONG><a name="[396]"></a>xTaskIncrementTick</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationTickHook
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[36a]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[37d]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[365]"></a>xTaskResumeAll</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[296]"></a>xTimerCreate</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, timers.o(i.xTimerCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTimerCreate &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerCreate
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_timer_init
</UL>

<P><STRONG><a name="[38f]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, timers.o(i.xTimerCreateTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = xTimerCreateTimerTask &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[298]"></a>xTimerGenericCommand</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, timers.o(i.xTimerGenericCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_timer_init
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[169]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f2xx_hal_cortex.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[cc]"></a>SPI_2linesRxISR_16BIT</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f2xx_hal_spi.o(i.SPI_2linesRxISR_16BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = SPI_2linesRxISR_16BIT &rArr; SPI_CloseRxTx_ISR &rArr; HAL_SPI_ErrorCallback &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRxTx_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f2xx_hal_spi.o(i.HAL_SPI_TransmitReceive_IT)
</UL>
<P><STRONG><a name="[ce]"></a>SPI_2linesRxISR_8BIT</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f2xx_hal_spi.o(i.SPI_2linesRxISR_8BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = SPI_2linesRxISR_8BIT &rArr; SPI_CloseRxTx_ISR &rArr; HAL_SPI_ErrorCallback &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRxTx_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f2xx_hal_spi.o(i.HAL_SPI_TransmitReceive_IT)
</UL>
<P><STRONG><a name="[cd]"></a>SPI_2linesTxISR_16BIT</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f2xx_hal_spi.o(i.SPI_2linesTxISR_16BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = SPI_2linesTxISR_16BIT &rArr; SPI_CloseRxTx_ISR &rArr; HAL_SPI_ErrorCallback &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRxTx_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f2xx_hal_spi.o(i.HAL_SPI_TransmitReceive_IT)
</UL>
<P><STRONG><a name="[cf]"></a>SPI_2linesTxISR_8BIT</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f2xx_hal_spi.o(i.SPI_2linesTxISR_8BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = SPI_2linesTxISR_8BIT &rArr; SPI_CloseRxTx_ISR &rArr; HAL_SPI_ErrorCallback &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRxTx_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f2xx_hal_spi.o(i.HAL_SPI_TransmitReceive_IT)
</UL>
<P><STRONG><a name="[180]"></a>SPI_CheckFlag_BSY</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32f2xx_hal_spi.o(i.SPI_CheckFlag_BSY))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRxTx_ISR
</UL>

<P><STRONG><a name="[1d4]"></a>SPI_CloseRxTx_ISR</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, stm32f2xx_hal_spi.o(i.SPI_CloseRxTx_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = SPI_CloseRxTx_ISR &rArr; HAL_SPI_ErrorCallback &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxRxCpltCallback
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CheckFlag_BSY
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_RxCpltCallback
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_2linesTxISR_8BIT
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_2linesTxISR_16BIT
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_2linesRxISR_8BIT
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_2linesRxISR_16BIT
</UL>

<P><STRONG><a name="[1d7]"></a>SPI_CloseRx_ISR</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, stm32f2xx_hal_spi.o(i.SPI_CloseRx_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = SPI_CloseRx_ISR &rArr; HAL_SPI_ErrorCallback &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_RxCpltCallback
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RxISR_8BIT
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RxISR_16BIT
</UL>

<P><STRONG><a name="[ca]"></a>SPI_RxISR_16BIT</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f2xx_hal_spi.o(i.SPI_RxISR_16BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = SPI_RxISR_16BIT &rArr; SPI_CloseRx_ISR &rArr; HAL_SPI_ErrorCallback &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRx_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f2xx_hal_spi.o(i.HAL_SPI_Receive_IT)
</UL>
<P><STRONG><a name="[cb]"></a>SPI_RxISR_8BIT</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f2xx_hal_spi.o(i.SPI_RxISR_8BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = SPI_RxISR_8BIT &rArr; SPI_CloseRx_ISR &rArr; HAL_SPI_ErrorCallback &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRx_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f2xx_hal_spi.o(i.HAL_SPI_Receive_IT)
</UL>
<P><STRONG><a name="[17f]"></a>SPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, stm32f2xx_hal_spi.o(i.SPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CheckFlag_BSY
</UL>

<P><STRONG><a name="[103]"></a>ADC_Init</STRONG> (Thumb, 328 bytes, Stack size 8 bytes, stm32f2xx_hal_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[1a3]"></a>I2C_IsAcknowledgeFailed</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f2xx_hal_i2c.o(i.I2C_IsAcknowledgeFailed))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnBTFFlagUntilTimeout
</UL>

<P><STRONG><a name="[15b]"></a>I2C_RequestMemoryRead</STRONG> (Thumb, 318 bytes, Stack size 40 bytes, stm32f2xx_hal_i2c.o(i.I2C_RequestMemoryRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[15e]"></a>I2C_RequestMemoryWrite</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, stm32f2xx_hal_i2c.o(i.I2C_RequestMemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[160]"></a>I2C_WaitOnBTFFlagUntilTimeout</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32f2xx_hal_i2c.o(i.I2C_WaitOnBTFFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_WaitOnBTFFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[15a]"></a>I2C_WaitOnFlagUntilTimeout</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, stm32f2xx_hal_i2c.o(i.I2C_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[1a2]"></a>I2C_WaitOnMasterAddressFlagUntilTimeout</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, stm32f2xx_hal_i2c.o(i.I2C_WaitOnMasterAddressFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[15c]"></a>I2C_WaitOnRXNEFlagUntilTimeout</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, stm32f2xx_hal_i2c.o(i.I2C_WaitOnRXNEFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_WaitOnRXNEFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[15f]"></a>I2C_WaitOnTXEFlagUntilTimeout</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32f2xx_hal_i2c.o(i.I2C_WaitOnTXEFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_WaitOnTXEFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[d0]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f2xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f2xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[190]"></a>UART_EndRxTransfer</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f2xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[194]"></a>UART_EndTransmit_IT</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f2xx_hal_uart.o(i.UART_EndTransmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_EndTransmit_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[18f]"></a>UART_Receive_IT</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, stm32f2xx_hal_uart.o(i.UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 1920<LI>Call Chain = UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[197]"></a>UART_SetConfig</STRONG> (Thumb, 866 bytes, Stack size 24 bytes, stm32f2xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UART_SetConfig &rArr; HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[193]"></a>UART_Transmit_IT</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, stm32f2xx_hal_uart.o(i.UART_Transmit_IT))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[199]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, stm32f2xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
</UL>

<P><STRONG><a name="[140]"></a>HCD_HC_IN_IRQHandler</STRONG> (Thumb, 558 bytes, Stack size 40 bytes, stm32f2xx_hal_hcd.o(i.HCD_HC_IN_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = HCD_HC_IN_IRQHandler &rArr; HAL_HCD_HC_NotifyURBChange_Callback &rArr; USBH_LL_NotifyURBChange &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HC_Halt
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_HC_NotifyURBChange_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>

<P><STRONG><a name="[141]"></a>HCD_HC_OUT_IRQHandler</STRONG> (Thumb, 538 bytes, Stack size 32 bytes, stm32f2xx_hal_hcd.o(i.HCD_HC_OUT_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HCD_HC_OUT_IRQHandler &rArr; HAL_HCD_HC_NotifyURBChange_Callback &rArr; USBH_LL_NotifyURBChange &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HC_Halt
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_HC_NotifyURBChange_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>

<P><STRONG><a name="[13d]"></a>HCD_Port_IRQHandler</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, stm32f2xx_hal_hcd.o(i.HCD_Port_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = HCD_Port_IRQHandler &rArr; HAL_HCD_Connect_Callback &rArr; USBH_LL_Connect &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_InitFSLSPClkSel
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Connect_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>

<P><STRONG><a name="[142]"></a>HCD_RXQLVL_IRQHandler</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, stm32f2xx_hal_hcd.o(i.HCD_RXQLVL_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HCD_RXQLVL_IRQHandler &rArr; USB_ReadPacket
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>

<P><STRONG><a name="[245]"></a>USB_CoreReset</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f2xx_ll_usb.o(i.USB_CoreReset))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CoreInit
</UL>

<P><STRONG><a name="[35d]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, timers.o(i.prvCheckForValidListAndQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
</UL>

<P><STRONG><a name="[37b]"></a>prvGetNextExpireTime</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, timers.o(i.prvGetNextExpireTime))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[372]"></a>prvInsertTimerInActiveList</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, timers.o(i.prvInsertTimerInActiveList))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>

<P><STRONG><a name="[375]"></a>prvProcessExpiredTimer</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, timers.o(i.prvProcessExpiredTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = prvProcessExpiredTimer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[376]"></a>prvProcessReceivedCommands</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, timers.o(i.prvProcessReceivedCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[378]"></a>prvProcessTimerOrBlockTask</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, timers.o(i.prvProcessTimerOrBlockTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = prvProcessTimerOrBlockTask &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[377]"></a>prvSampleTimeNow</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, timers.o(i.prvSampleTimeNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[37a]"></a>prvSwitchTimerLists</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, timers.o(i.prvSwitchTimerLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[da]"></a>prvTimerTask</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, timers.o(i.prvTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = prvTimerTask &rArr; prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetNextExpireTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(i.xTimerCreateTimerTask)
</UL>
<P><STRONG><a name="[368]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvCopyDataFromQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[369]"></a>prvCopyDataToQueue</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[373]"></a>prvIsQueueEmpty</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, queue.o(i.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueEmpty &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[374]"></a>prvIsQueueFull</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, queue.o(i.prvIsQueueFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueFull &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[37c]"></a>prvUnlockQueue</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[358]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[35a]"></a>prvAllocateTCBAndStack</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, tasks.o(i.prvAllocateTCBAndStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[363]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[367]"></a>prvDeleteTCB</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[36d]"></a>prvGetExpectedIdleTime</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, tasks.o(i.prvGetExpectedIdleTime))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[d9]"></a>prvIdleTask</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationIdleHook
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetExpectedIdleTime
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[36f]"></a>prvInitialiseTCBVariables</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, tasks.o(i.prvInitialiseTCBVariables))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvInitialiseTCBVariables
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[371]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, tasks.o(i.prvInitialiseTaskLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[39d]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
</UL>

<P><STRONG><a name="[d8]"></a>prvTaskExitError</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR><BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[351]"></a>inHandlerMode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cmsis_os.o(i.inHandlerMode))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSysTick
</UL>

<P><STRONG><a name="[357]"></a>makeFreeRtosPriority</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cmsis_os.o(i.makeFreeRtosPriority))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>

<P><STRONG><a name="[37f]"></a>prvHeapInit</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[380]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 78 bytes, Stack size 12 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[1b6]"></a>MX_NVIC_Init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, main.o(i.MX_NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MX_NVIC_Init &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d1]"></a>USBH_UserProcess</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, usb_host.o(i.USBH_UserProcess))
<BR>[Address Reference Count : 1]<UL><LI> usb_host.o(i.MX_USB_HOST_Init)
</UL>
<P><STRONG><a name="[32e]"></a>I2C_BSP_STM32_MPU6050_Error</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp_i2c.o(i.I2C_BSP_STM32_MPU6050_Error))
<BR><BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_i2c_mpu6050_write_data
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_i2c_mpu6050_read_buffer
</UL>

<P><STRONG><a name="[2a5]"></a>DHT11_Delay</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, bsp_dido.o(i.DHT11_Delay))
<BR><BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_bsp_stm32_dido_dht11_read_temp_and_humidity
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_bsp_stm32_dido_dht11_read_byte
</UL>

<P><STRONG><a name="[2a9]"></a>DS18B20_Delay</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, bsp_dido.o(i.DS18B20_Delay))
<BR><BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_bsp_stm32_dido_ds18b20_reset
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_bsp_stm32_dido_ds18b20_presence
</UL>

<P><STRONG><a name="[2a2]"></a>func_bsp_stm32_dido_dht11_mode_IPU</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, bsp_dido.o(i.func_bsp_stm32_dido_dht11_mode_IPU))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = func_bsp_stm32_dido_dht11_mode_IPU &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_bsp_stm32_dido_dht11_read_temp_and_humidity
</UL>

<P><STRONG><a name="[2a3]"></a>func_bsp_stm32_dido_dht11_mode_out_PP</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, bsp_dido.o(i.func_bsp_stm32_dido_dht11_mode_out_PP))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = func_bsp_stm32_dido_dht11_mode_out_PP &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_f2board_dht11_init
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_bsp_stm32_dido_dht11_read_temp_and_humidity
</UL>

<P><STRONG><a name="[2a4]"></a>func_bsp_stm32_dido_dht11_read_byte</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, bsp_dido.o(i.func_bsp_stm32_dido_dht11_read_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = func_bsp_stm32_dido_dht11_read_byte &rArr; HAL_GPIO_ReadPin
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DHT11_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_bsp_stm32_dido_dht11_read_temp_and_humidity
</UL>

<P><STRONG><a name="[2a7]"></a>func_bsp_stm32_dido_ds18b20_presence</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, bsp_dido.o(i.func_bsp_stm32_dido_ds18b20_presence))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = func_bsp_stm32_dido_ds18b20_presence &rArr; func_bsp_stm32_dido_ds18b20_set_mode_IPU &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_bsp_stm32_dido_ds18b20_set_mode_IPU
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_ds18b20_init
</UL>

<P><STRONG><a name="[2aa]"></a>func_bsp_stm32_dido_ds18b20_reset</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, bsp_dido.o(i.func_bsp_stm32_dido_ds18b20_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = func_bsp_stm32_dido_ds18b20_reset &rArr; func_bsp_stm32_dido_ds18b20_set_mode_out_PP &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_bsp_stm32_dido_ds18b20_set_mode_out_PP
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS18B20_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_ds18b20_init
</UL>

<P><STRONG><a name="[2a8]"></a>func_bsp_stm32_dido_ds18b20_set_mode_IPU</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, bsp_dido.o(i.func_bsp_stm32_dido_ds18b20_set_mode_IPU))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = func_bsp_stm32_dido_ds18b20_set_mode_IPU &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_bsp_stm32_dido_ds18b20_presence
</UL>

<P><STRONG><a name="[2ab]"></a>func_bsp_stm32_dido_ds18b20_set_mode_out_PP</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, bsp_dido.o(i.func_bsp_stm32_dido_ds18b20_set_mode_out_PP))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = func_bsp_stm32_dido_ds18b20_set_mode_out_PP &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_dido_ds18b20_init
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_bsp_stm32_dido_ds18b20_reset
</UL>

<P><STRONG><a name="[1c3]"></a>RTC_Bcd2ToBin</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, vmmw_pcf8563.o(i.RTC_Bcd2ToBin))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_GetTime
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_GetDate
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_GetAlarm
</UL>

<P><STRONG><a name="[1c7]"></a>RTC_BinToBcd2</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, vmmw_pcf8563.o(i.RTC_BinToBcd2))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_SetTime
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_SetDate
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCF8563_SetAlarm
</UL>

<P><STRONG><a name="[207]"></a>USBH_HandleControl</STRONG> (Thumb, 628 bytes, Stack size 40 bytes, usbh_ctlreq.o(i.USBH_HandleControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = USBH_HandleControl &rArr; USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Stop
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_GetURBState
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlSendSetup
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlSendData
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReceiveData
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>

<P><STRONG><a name="[20d]"></a>USBH_ParseCfgDesc</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, usbh_ctlreq.o(i.USBH_ParseCfgDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBH_ParseCfgDesc
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetNextDesc
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseInterfaceDesc
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseEPDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_CfgDesc
</UL>

<P><STRONG><a name="[20f]"></a>USBH_ParseDevDesc</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, usbh_ctlreq.o(i.USBH_ParseDevDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_ParseDevDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_DevDesc
</UL>

<P><STRONG><a name="[241]"></a>USBH_ParseEPDesc</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usbh_ctlreq.o(i.USBH_ParseEPDesc))
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseCfgDesc
</UL>

<P><STRONG><a name="[240]"></a>USBH_ParseInterfaceDesc</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, usbh_ctlreq.o(i.USBH_ParseInterfaceDesc))
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseCfgDesc
</UL>

<P><STRONG><a name="[211]"></a>USBH_ParseStringDesc</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usbh_ctlreq.o(i.USBH_ParseStringDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_ParseStringDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_StringDesc
</UL>

<P><STRONG><a name="[105]"></a>AUDIO_SetVolume</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, usbh_audio.o(i.AUDIO_SetVolume))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = AUDIO_SetVolume &rArr; USBH_AC_SetCur &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AC_SetCur
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AUDIO_SetControlAttribute
</UL>

<P><STRONG><a name="[1fc]"></a>ParseCSDescriptors</STRONG> (Thumb, 166 bytes, Stack size 0 bytes, usbh_audio.o(i.ParseCSDescriptors))
<BR><BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AUDIO_ParseCSDescriptors
</UL>

<P><STRONG><a name="[1dd]"></a>USBH_AC_GetCur</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, usbh_audio.o(i.USBH_AC_GetCur))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = USBH_AC_GetCur &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AUDIO_CSRequest
</UL>

<P><STRONG><a name="[1de]"></a>USBH_AC_GetMax</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, usbh_audio.o(i.USBH_AC_GetMax))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = USBH_AC_GetMax &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AUDIO_CSRequest
</UL>

<P><STRONG><a name="[1df]"></a>USBH_AC_GetMin</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, usbh_audio.o(i.USBH_AC_GetMin))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = USBH_AC_GetMin &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AUDIO_CSRequest
</UL>

<P><STRONG><a name="[1e0]"></a>USBH_AC_GetRes</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, usbh_audio.o(i.USBH_AC_GetRes))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = USBH_AC_GetRes &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AUDIO_CSRequest
</UL>

<P><STRONG><a name="[106]"></a>USBH_AC_SetCur</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, usbh_audio.o(i.USBH_AC_SetCur))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = USBH_AC_SetCur &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_SetVolume
</UL>

<P><STRONG><a name="[1e1]"></a>USBH_AUDIO_BuildHeadphonePath</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, usbh_audio.o(i.USBH_AUDIO_BuildHeadphonePath))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USBH_AUDIO_BuildHeadphonePath &rArr; USBH_AUDIO_FindLinkedUnit
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AUDIO_FindLinkedUnit
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AUDIO_InterfaceInit
</UL>

<P><STRONG><a name="[1e3]"></a>USBH_AUDIO_BuildMicrophonePath</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, usbh_audio.o(i.USBH_AUDIO_BuildMicrophonePath))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USBH_AUDIO_BuildMicrophonePath &rArr; USBH_AUDIO_FindLinkedUnit
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AUDIO_FindLinkedUnit
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AUDIO_InterfaceInit
</UL>

<P><STRONG><a name="[1e4]"></a>USBH_AUDIO_CSRequest</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, usbh_audio.o(i.USBH_AUDIO_CSRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = USBH_AUDIO_CSRequest &rArr; USBH_AC_GetRes &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AC_GetRes
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AC_GetMin
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AC_GetMax
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AC_GetCur
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AUDIO_HandleCSRequest
</UL>

<P><STRONG><a name="[56]"></a>USBH_AUDIO_ClassRequest</STRONG> (Thumb, 288 bytes, Stack size 24 bytes, usbh_audio.o(i.USBH_AUDIO_ClassRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = USBH_AUDIO_ClassRequest &rArr; USBH_AUDIO_HandleCSRequest &rArr; USBH_AUDIO_CSRequest &rArr; USBH_AC_GetRes &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AUDIO_HandleCSRequest
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetInterface
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_audio.o(.data)
</UL>
<P><STRONG><a name="[1e7]"></a>USBH_AUDIO_Control</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, usbh_audio.o(i.USBH_AUDIO_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = USBH_AUDIO_Control &rArr; USBH_AUDIO_SetControlAttribute &rArr; AUDIO_SetVolume &rArr; USBH_AC_SetCur &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_GetURBState
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AUDIO_SetControlAttribute
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_InterruptReceiveData
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AUDIO_Transmit
</UL>

<P><STRONG><a name="[1f0]"></a>USBH_AUDIO_FindAudioStreamingIN</STRONG> (Thumb, 110 bytes, Stack size 20 bytes, usbh_audio.o(i.USBH_AUDIO_FindAudioStreamingIN))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USBH_AUDIO_FindAudioStreamingIN
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AUDIO_InterfaceInit
</UL>

<P><STRONG><a name="[1f1]"></a>USBH_AUDIO_FindAudioStreamingOUT</STRONG> (Thumb, 112 bytes, Stack size 20 bytes, usbh_audio.o(i.USBH_AUDIO_FindAudioStreamingOUT))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USBH_AUDIO_FindAudioStreamingOUT
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AUDIO_InterfaceInit
</UL>

<P><STRONG><a name="[1ea]"></a>USBH_AUDIO_FindHIDControl</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, usbh_audio.o(i.USBH_AUDIO_FindHIDControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBH_AUDIO_FindHIDControl &rArr; USBH_FindInterface
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_FindInterface
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AUDIO_InterfaceInit
</UL>

<P><STRONG><a name="[1e2]"></a>USBH_AUDIO_FindLinkedUnit</STRONG> (Thumb, 220 bytes, Stack size 12 bytes, usbh_audio.o(i.USBH_AUDIO_FindLinkedUnit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USBH_AUDIO_FindLinkedUnit
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AUDIO_BuildMicrophonePath
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AUDIO_BuildHeadphonePath
</UL>

<P><STRONG><a name="[1e6]"></a>USBH_AUDIO_HandleCSRequest</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, usbh_audio.o(i.USBH_AUDIO_HandleCSRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = USBH_AUDIO_HandleCSRequest &rArr; USBH_AUDIO_CSRequest &rArr; USBH_AC_GetRes &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AUDIO_CSRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AUDIO_ClassRequest
</UL>

<P><STRONG><a name="[1fd]"></a>USBH_AUDIO_InputStream</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbh_audio.o(i.USBH_AUDIO_InputStream))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AUDIO_Process
</UL>

<P><STRONG><a name="[55]"></a>USBH_AUDIO_InterfaceDeInit</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, usbh_audio.o(i.USBH_AUDIO_InterfaceDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBH_AUDIO_InterfaceDeInit &rArr; USBH_ClosePipe &rArr; USBH_LL_ClosePipe &rArr; HAL_HCD_HC_Halt &rArr; USB_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_FreePipe
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ClosePipe
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_audio.o(.data)
</UL>
<P><STRONG><a name="[54]"></a>USBH_AUDIO_InterfaceInit</STRONG> (Thumb, 432 bytes, Stack size 40 bytes, usbh_audio.o(i.USBH_AUDIO_InterfaceInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = USBH_AUDIO_InterfaceInit &rArr; USBH_OpenPipe &rArr; USBH_LL_OpenPipe &rArr; HAL_HCD_HC_Init &rArr; USB_HC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_SetToggle
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OpenPipe
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_FindInterface
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AllocPipe
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AUDIO_ParseCSDescriptors
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AUDIO_FindHIDControl
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AUDIO_FindAudioStreamingOUT
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AUDIO_FindAudioStreamingIN
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AUDIO_BuildMicrophonePath
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AUDIO_BuildHeadphonePath
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_audio.o(.data)
</UL>
<P><STRONG><a name="[1f6]"></a>USBH_AUDIO_OutputStream</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, usbh_audio.o(i.USBH_AUDIO_OutputStream))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = USBH_AUDIO_OutputStream &rArr; USBH_AUDIO_Transmit &rArr; USBH_AUDIO_Control &rArr; USBH_AUDIO_SetControlAttribute &rArr; AUDIO_SetVolume &rArr; USBH_AC_SetCur &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AUDIO_FrequencySet
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AUDIO_Transmit
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AUDIO_SetEndpointControls
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AUDIO_Process
</UL>

<P><STRONG><a name="[1f2]"></a>USBH_AUDIO_ParseCSDescriptors</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, usbh_audio.o(i.USBH_AUDIO_ParseCSDescriptors))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USBH_AUDIO_ParseCSDescriptors &rArr; USBH_FindInterfaceIndex
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_FindInterfaceIndex
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCSDescriptors
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetNextDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AUDIO_InterfaceInit
</UL>

<P><STRONG><a name="[57]"></a>USBH_AUDIO_Process</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, usbh_audio.o(i.USBH_AUDIO_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = USBH_AUDIO_Process &rArr; USBH_AUDIO_OutputStream &rArr; USBH_AUDIO_Transmit &rArr; USBH_AUDIO_Control &rArr; USBH_AUDIO_SetControlAttribute &rArr; AUDIO_SetVolume &rArr; USBH_AC_SetCur &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AUDIO_OutputStream
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AUDIO_InputStream
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_audio.o(.data)
</UL>
<P><STRONG><a name="[58]"></a>USBH_AUDIO_SOFProcess</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbh_audio.o(i.USBH_AUDIO_SOFProcess))
<BR>[Address Reference Count : 1]<UL><LI> usbh_audio.o(.data)
</UL>
<P><STRONG><a name="[1e9]"></a>USBH_AUDIO_SetControlAttribute</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, usbh_audio.o(i.USBH_AUDIO_SetControlAttribute))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = USBH_AUDIO_SetControlAttribute &rArr; AUDIO_SetVolume &rArr; USBH_AC_SetCur &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUDIO_SetVolume
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AUDIO_Control
</UL>

<P><STRONG><a name="[1f7]"></a>USBH_AUDIO_SetEndpointControls</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usbh_audio.o(i.USBH_AUDIO_SetEndpointControls))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = USBH_AUDIO_SetEndpointControls &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AUDIO_OutputStream
</UL>

<P><STRONG><a name="[1f9]"></a>USBH_AUDIO_Transmit</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, usbh_audio.o(i.USBH_AUDIO_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = USBH_AUDIO_Transmit &rArr; USBH_AUDIO_Control &rArr; USBH_AUDIO_SetControlAttribute &rArr; AUDIO_SetVolume &rArr; USBH_AC_SetCur &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_GetURBState
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AUDIO_BufferEmptyCallback
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AUDIO_Control
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_IsocSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AUDIO_OutputStream
</UL>

<P><STRONG><a name="[107]"></a>CDC_ProcessReception</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, usbh_cdc.o(i.CDC_ProcessReception))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = CDC_ProcessReception &rArr; USBH_BulkReceiveData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_GetURBState
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_GetLastXferSize
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CDC_ReceiveCallback
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_BulkReceiveData
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CDC_Process
</UL>

<P><STRONG><a name="[10d]"></a>CDC_ProcessTransmission</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, usbh_cdc.o(i.CDC_ProcessTransmission))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = CDC_ProcessTransmission &rArr; USBH_BulkSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_GetURBState
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CDC_TransmitCallback
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_BulkSendData
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CDC_Process
</UL>

<P><STRONG><a name="[11c]"></a>GetLineCoding</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usbh_cdc.o(i.GetLineCoding))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = GetLineCoding &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CDC_Process
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CDC_ClassRequest
</UL>

<P><STRONG><a name="[1d8]"></a>SetLineCoding</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usbh_cdc.o(i.SetLineCoding))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = SetLineCoding &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CDC_Process
</UL>

<P><STRONG><a name="[5b]"></a>USBH_CDC_ClassRequest</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, usbh_cdc.o(i.USBH_CDC_ClassRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = USBH_CDC_ClassRequest &rArr; GetLineCoding &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLineCoding
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_cdc.o(.data)
</UL>
<P><STRONG><a name="[5a]"></a>USBH_CDC_InterfaceDeInit</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, usbh_cdc.o(i.USBH_CDC_InterfaceDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBH_CDC_InterfaceDeInit &rArr; USBH_ClosePipe &rArr; USBH_LL_ClosePipe &rArr; HAL_HCD_HC_Halt &rArr; USB_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_FreePipe
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ClosePipe
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_cdc.o(.data)
</UL>
<P><STRONG><a name="[59]"></a>USBH_CDC_InterfaceInit</STRONG> (Thumb, 312 bytes, Stack size 32 bytes, usbh_cdc.o(i.USBH_CDC_InterfaceInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = USBH_CDC_InterfaceInit &rArr; USBH_OpenPipe &rArr; USBH_LL_OpenPipe &rArr; HAL_HCD_HC_Init &rArr; USB_HC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_SetToggle
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SelectInterface
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OpenPipe
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_FindInterface
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AllocPipe
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_cdc.o(.data)
</UL>
<P><STRONG><a name="[5c]"></a>USBH_CDC_Process</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, usbh_cdc.o(i.USBH_CDC_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = USBH_CDC_Process &rArr; SetLineCoding &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CDC_LineCodingChanged
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetLineCoding
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLineCoding
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_ProcessTransmission
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CDC_ProcessReception
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ClrFeature
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_cdc.o(.data)
</UL>
<P><STRONG><a name="[5d]"></a>USBH_CDC_SOFProcess</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbh_cdc.o(i.USBH_CDC_SOFProcess))
<BR>[Address Reference Count : 1]<UL><LI> usbh_cdc.o(.data)
</UL>
<P><STRONG><a name="[1ad]"></a>MTP_DecodeEvent</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usbh_mtp.o(i.MTP_DecodeEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MTP_DecodeEvent
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MTP_EventsCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MTP_Events
</UL>

<P><STRONG><a name="[235]"></a>MTP_FindCtlEndpoint</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, usbh_mtp.o(i.MTP_FindCtlEndpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MTP_FindCtlEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MTP_InterfaceInit
</UL>

<P><STRONG><a name="[236]"></a>MTP_FindDataInEndpoint</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, usbh_mtp.o(i.MTP_FindDataInEndpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MTP_FindDataInEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MTP_InterfaceInit
</UL>

<P><STRONG><a name="[237]"></a>MTP_FindDataOutEndpoint</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, usbh_mtp.o(i.MTP_FindDataOutEndpoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MTP_FindDataOutEndpoint
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MTP_InterfaceInit
</UL>

<P><STRONG><a name="[60]"></a>USBH_MTP_ClassRequest</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbh_mtp.o(i.USBH_MTP_ClassRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = USBH_MTP_ClassRequest &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_mtp.o(.data)
</UL>
<P><STRONG><a name="[234]"></a>USBH_MTP_Events</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, usbh_mtp.o(i.USBH_MTP_Events))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = USBH_MTP_Events &rArr; USBH_InterruptReceiveData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_GetURBState
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MTP_DecodeEvent
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_InterruptReceiveData
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MTP_Process
</UL>

<P><STRONG><a name="[5f]"></a>USBH_MTP_InterfaceDeInit</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, usbh_mtp.o(i.USBH_MTP_InterfaceDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBH_MTP_InterfaceDeInit &rArr; USBH_ClosePipe &rArr; USBH_LL_ClosePipe &rArr; HAL_HCD_HC_Halt &rArr; USB_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_FreePipe
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ClosePipe
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_mtp.o(.data)
</UL>
<P><STRONG><a name="[5e]"></a>USBH_MTP_InterfaceInit</STRONG> (Thumb, 316 bytes, Stack size 40 bytes, usbh_mtp.o(i.USBH_MTP_InterfaceInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = USBH_MTP_InterfaceInit &rArr; USBH_OpenPipe &rArr; USBH_LL_OpenPipe &rArr; HAL_HCD_HC_Init &rArr; USB_HC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_SetToggle
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PTP_Init
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MTP_FindDataOutEndpoint
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MTP_FindDataInEndpoint
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MTP_FindCtlEndpoint
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SelectInterface
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OpenPipe
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_FindInterface
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AllocPipe
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_mtp.o(.data)
</UL>
<P><STRONG><a name="[61]"></a>USBH_MTP_Process</STRONG> (Thumb, 300 bytes, Stack size 32 bytes, usbh_mtp.o(i.USBH_MTP_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = USBH_MTP_Process &rArr; USBH_PTP_GetStorageInfo &rArr; USBH_PTP_Process &rArr; USBH_BulkSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PTP_OpenSession
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PTP_GetStorageInfo
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PTP_GetStorageIds
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PTP_GetDeviceInfo
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MTP_Events
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_mtp.o(.data)
</UL>
<P><STRONG><a name="[62]"></a>USBH_MTP_SOFProcess</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbh_mtp.o(i.USBH_MTP_SOFProcess))
<BR>[Address Reference Count : 1]<UL><LI> usbh_mtp.o(.data)
</UL>
<P><STRONG><a name="[229]"></a>USBH_MSC_BOT_Abort</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, usbh_msc_bot.o(i.USBH_MSC_BOT_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = USBH_MSC_BOT_Abort &rArr; USBH_ClrFeature &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ClrFeature
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Process
</UL>

<P><STRONG><a name="[22b]"></a>USBH_MSC_DecodeCSW</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, usbh_msc_bot.o(i.USBH_MSC_DecodeCSW))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_MSC_DecodeCSW
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_GetLastXferSize
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Process
</UL>

<P><STRONG><a name="[21e]"></a>DeInitStateMachine</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, usbh_core.o(i.DeInitStateMachine))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DeInitStateMachine
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Init
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[21c]"></a>USBH_HandleEnum</STRONG> (Thumb, 360 bytes, Stack size 32 bytes, usbh_core.o(i.USBH_HandleEnum))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = USBH_HandleEnum &rArr; USBH_Get_StringDesc &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Delay
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OpenPipe
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetAddress
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_StringDesc
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_DevDesc
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_CfgDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[225]"></a>USBH_HandleSof</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usbh_core.o(i.USBH_HandleSof))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_IncTimer
</UL>

<P><STRONG><a name="[de]"></a>USBH_Process_OS</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, usbh_core.o(i.USBH_Process_OS))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = USBH_Process_OS &rArr; USBH_Process &rArr; USBH_HandleEnum &rArr; USBH_Get_StringDesc &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageGet
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_core.o(.constdata)
</UL>
<P><STRONG><a name="[65]"></a>USBH_MSC_ClassRequest</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, usbh_msc.o(i.USBH_MSC_ClassRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = USBH_MSC_ClassRequest &rArr; USBH_MSC_BOT_REQ_GetMaxLUN &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_REQ_GetMaxLUN
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ClrFeature
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc.o(.data)
</UL>
<P><STRONG><a name="[64]"></a>USBH_MSC_InterfaceDeInit</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, usbh_msc.o(i.USBH_MSC_InterfaceDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBH_MSC_InterfaceDeInit &rArr; USBH_ClosePipe &rArr; USBH_LL_ClosePipe &rArr; HAL_HCD_HC_Halt &rArr; USB_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_FreePipe
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ClosePipe
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc.o(.data)
</UL>
<P><STRONG><a name="[63]"></a>USBH_MSC_InterfaceInit</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, usbh_msc.o(i.USBH_MSC_InterfaceInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = USBH_MSC_InterfaceInit &rArr; USBH_OpenPipe &rArr; USBH_LL_OpenPipe &rArr; HAL_HCD_HC_Init &rArr; USB_HC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_SetToggle
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Init
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SelectInterface
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OpenPipe
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_FindInterface
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AllocPipe
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc.o(.data)
</UL>
<P><STRONG><a name="[66]"></a>USBH_MSC_Process</STRONG> (Thumb, 850 bytes, Stack size 32 bytes, usbh_msc.o(i.USBH_MSC_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = USBH_MSC_Process &rArr; USBH_MSC_SCSI_TestUnitReady &rArr; USBH_MSC_BOT_Process &rArr; USBH_MSC_BOT_REQ_Reset &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_TestUnitReady
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_RequestSense
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_ReadCapacity
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_Inquiry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc.o(.data)
</UL>
<P><STRONG><a name="[67]"></a>USBH_MSC_SOFProcess</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbh_msc.o(i.USBH_MSC_SOFProcess))
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc.o(.data)
</UL>
<P><STRONG><a name="[1cd]"></a>PTP_BufferFullCallback</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, usbh_mtp_ptp.o(i.PTP_BufferFullCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PTP_BufferFullCallback &rArr; PTP_DecodeDeviceInfo &rArr; PTP_GetArray16
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTP_DecodeDeviceInfo
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PTP_Process
</UL>

<P><STRONG><a name="[1ce]"></a>PTP_DecodeDeviceInfo</STRONG> (Thumb, 320 bytes, Stack size 24 bytes, usbh_mtp_ptp.o(i.PTP_DecodeDeviceInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PTP_DecodeDeviceInfo &rArr; PTP_GetArray16
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTP_GetString
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTP_GetArray16
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTP_BufferFullCallback
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PTP_GetDeviceInfo
</UL>

<P><STRONG><a name="[1d0]"></a>PTP_GetArray16</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, usbh_mtp_ptp.o(i.PTP_GetArray16))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PTP_GetArray16
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTP_DecodeDeviceInfo
</UL>

<P><STRONG><a name="[1d2]"></a>PTP_GetArray32</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, usbh_mtp_ptp.o(i.PTP_GetArray32))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PTP_GetArray32
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTP_GetStorageIDs
</UL>

<P><STRONG><a name="[1d1]"></a>PTP_GetStorageIDs</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usbh_mtp_ptp.o(i.PTP_GetStorageIDs))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = PTP_GetStorageIDs &rArr; PTP_GetArray32
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTP_GetArray32
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PTP_GetStorageIds
</UL>

<P><STRONG><a name="[1d3]"></a>PTP_GetStorageInfo</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, usbh_mtp_ptp.o(i.PTP_GetStorageInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PTP_GetStorageInfo &rArr; PTP_GetString
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTP_GetString
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_PTP_GetStorageInfo
</UL>

<P><STRONG><a name="[1cf]"></a>PTP_GetString</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, usbh_mtp_ptp.o(i.PTP_GetString))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PTP_GetString
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTP_GetStorageInfo
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PTP_DecodeDeviceInfo
</UL>

<P><STRONG><a name="[6a]"></a>USBH_HID_ClassRequest</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, usbh_hid.o(i.USBH_HID_ClassRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = USBH_HID_ClassRequest &rArr; USBH_HID_GetHIDReportDescriptor &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_SetProtocol
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_SetIdle
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_GetHIDReportDescriptor
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_GetHIDDescriptor
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_ParseHIDDesc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hid.o(.data)
</UL>
<P><STRONG><a name="[69]"></a>USBH_HID_InterfaceDeInit</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, usbh_hid.o(i.USBH_HID_InterfaceDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBH_HID_InterfaceDeInit &rArr; USBH_ClosePipe &rArr; USBH_LL_ClosePipe &rArr; HAL_HCD_HC_Halt &rArr; USB_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_FreePipe
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ClosePipe
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hid.o(.data)
</UL>
<P><STRONG><a name="[68]"></a>USBH_HID_InterfaceInit</STRONG> (Thumb, 352 bytes, Stack size 40 bytes, usbh_hid.o(i.USBH_HID_InterfaceInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = USBH_HID_InterfaceInit &rArr; USBH_OpenPipe &rArr; USBH_LL_OpenPipe &rArr; HAL_HCD_HC_Init &rArr; USB_HC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_SetToggle
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SelectInterface
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OpenPipe
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_FindInterface
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AllocPipe
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hid.o(.data)
</UL>
<P><STRONG><a name="[213]"></a>USBH_HID_ParseHIDDesc</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, usbh_hid.o(i.USBH_HID_ParseHIDDesc))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_ClassRequest
</UL>

<P><STRONG><a name="[6b]"></a>USBH_HID_Process</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, usbh_hid.o(i.USBH_HID_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = USBH_HID_Process &rArr; USBH_HID_GetReport &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_GetURBState
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_InterruptReceiveData
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ClrFeature
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_EventCallback
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_write
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HID_GetReport
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hid.o(.data)
</UL>
<P><STRONG><a name="[6c]"></a>USBH_HID_SOFProcess</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usbh_hid.o(i.USBH_HID_SOFProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = USBH_HID_SOFProcess &rArr; osMessagePut &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessagePut
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_hid.o(.data)
</UL>
<P><STRONG><a name="[200]"></a>USBH_GetFreePipe</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, usbh_pipes.o(i.USBH_GetFreePipe))
<BR><BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AllocPipe
</UL>

<P><STRONG><a name="[252]"></a>_fp_digits</STRONG> (Thumb, 334 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[24b]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf
</UL>

<P><STRONG><a name="[255]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[254]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[d4]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0vsnprintf)
<LI> printfa.o(i.__0snprintf)
</UL>
<P><STRONG><a name="[d5]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>

<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [PrjCclFo@207VC\PrjCclFo@207VC.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image PrjCclFo@207VC\PrjCclFo@207VC.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060061: Last Updated: Sat Dec 31 13:46:17 2016
<BR><P>
<H3>Maximum Stack Usage =       3072 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
fsm_spsvirgo_ccl_event_report_send &rArr; ihu_vmmw_gprsmod_http_data_transmit_with_receive &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[75]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[75]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[75]">ADC_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[5d]">BusFault_Handler</a> from stm32f2xx_it.o(i.BusFault_Handler) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[77]">CAN1_RX0_IRQHandler</a> from stm32f2xx_it.o(i.CAN1_RX0_IRQHandler) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[78]">CAN1_RX1_IRQHandler</a> from stm32f2xx_it.o(i.CAN1_RX1_IRQHandler) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[79]">CAN1_SCE_IRQHandler</a> from stm32f2xx_it.o(i.CAN1_SCE_IRQHandler) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[76]">CAN1_TX_IRQHandler</a> from stm32f2xx_it.o(i.CAN1_TX_IRQHandler) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[a3]">CAN2_RX0_IRQHandler</a> from stm32f2xx_it.o(i.CAN2_RX0_IRQHandler) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[a4]">CAN2_RX1_IRQHandler</a> from stm32f2xx_it.o(i.CAN2_RX1_IRQHandler) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[a5]">CAN2_SCE_IRQHandler</a> from stm32f2xx_it.o(i.CAN2_SCE_IRQHandler) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[a2]">CAN2_TX_IRQHandler</a> from stm32f2xx_it.o(i.CAN2_TX_IRQHandler) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[c6]">Callback01</a> from main.o(i.Callback01) referenced from main.o(.constdata)
 <LI><a href="#[b1]">DCMI_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[6e]">DMA1_Stream0_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[6f]">DMA1_Stream1_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[70]">DMA1_Stream2_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[71]">DMA1_Stream3_IRQHandler</a> from stm32f2xx_it.o(i.DMA1_Stream3_IRQHandler) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[72]">DMA1_Stream4_IRQHandler</a> from stm32f2xx_it.o(i.DMA1_Stream4_IRQHandler) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[73]">DMA1_Stream5_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[74]">DMA1_Stream6_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[92]">DMA1_Stream7_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[9b]">DMA2_Stream0_IRQHandler</a> from stm32f2xx_it.o(i.DMA2_Stream0_IRQHandler) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[9c]">DMA2_Stream1_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[9d]">DMA2_Stream2_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[9e]">DMA2_Stream3_IRQHandler</a> from stm32f2xx_it.o(i.DMA2_Stream3_IRQHandler) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[9f]">DMA2_Stream4_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[a7]">DMA2_Stream5_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[a8]">DMA2_Stream6_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[a9]">DMA2_Stream7_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[60]">DebugMon_Handler</a> from stm32f2xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[a0]">ETH_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[a1]">ETH_WKUP_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[69]">EXTI0_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[8b]">EXTI15_10_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[6a]">EXTI1_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[6b]">EXTI2_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[6c]">EXTI3_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[6d]">EXTI4_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[7a]">EXTI9_5_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[67]">FLASH_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[93]">FSMC_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[c2]">FsmProcessingLaunch</a> from vmfreeoslayer.o(i.FsmProcessingLaunch) referenced from vmfreeoslayer.o(i.ihu_task_create_and_run)
 <LI><a href="#[b2]">HASH_RNG_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[5b]">HardFault_Handler</a> from stm32f2xx_it.o(i.HardFault_Handler) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[83]">I2C1_ER_IRQHandler</a> from stm32f2xx_it.o(i.I2C1_ER_IRQHandler) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[82]">I2C1_EV_IRQHandler</a> from stm32f2xx_it.o(i.I2C1_EV_IRQHandler) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[85]">I2C2_ER_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[84]">I2C2_EV_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[ac]">I2C3_ER_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[ab]">I2C3_EV_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[be]">I2C_DMAAbort</a> from stm32f2xx_hal_i2c.o(i.I2C_DMAAbort) referenced from stm32f2xx_hal_i2c.o(i.I2C_ITError)
 <LI><a href="#[5c]">MemManage_Handler</a> from stm32f2xx_it.o(i.MemManage_Handler) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[5a]">NMI_Handler</a> from stm32f2xx_it.o(i.NMI_Handler) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[a6]">OTG_FS_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[8d]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[ae]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[ad]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[b0]">OTG_HS_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[af]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[64]">PVD_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[61]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[68]">RCC_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[8c]">RTC_Alarm_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[66]">RTC_WKUP_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[59]">Reset_Handler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[94]">SDIO_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[86]">SPI1_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[87]">SPI2_IRQHandler</a> from stm32f2xx_it.o(i.SPI2_IRQHandler) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[96]">SPI3_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[b9]">SPI_2linesRxISR_16BIT</a> from stm32f2xx_hal_spi.o(i.SPI_2linesRxISR_16BIT) referenced from stm32f2xx_hal_spi.o(i.HAL_SPI_TransmitReceive_IT)
 <LI><a href="#[bb]">SPI_2linesRxISR_8BIT</a> from stm32f2xx_hal_spi.o(i.SPI_2linesRxISR_8BIT) referenced from stm32f2xx_hal_spi.o(i.HAL_SPI_TransmitReceive_IT)
 <LI><a href="#[ba]">SPI_2linesTxISR_16BIT</a> from stm32f2xx_hal_spi.o(i.SPI_2linesTxISR_16BIT) referenced from stm32f2xx_hal_spi.o(i.HAL_SPI_TransmitReceive_IT)
 <LI><a href="#[bc]">SPI_2linesTxISR_8BIT</a> from stm32f2xx_hal_spi.o(i.SPI_2linesTxISR_8BIT) referenced from stm32f2xx_hal_spi.o(i.HAL_SPI_TransmitReceive_IT)
 <LI><a href="#[b6]">SPI_DMAAbortOnError</a> from stm32f2xx_hal_spi.o(i.SPI_DMAAbortOnError) referenced from stm32f2xx_hal_spi.o(i.HAL_SPI_IRQHandler)
 <LI><a href="#[b7]">SPI_RxISR_16BIT</a> from stm32f2xx_hal_spi.o(i.SPI_RxISR_16BIT) referenced from stm32f2xx_hal_spi.o(i.HAL_SPI_Receive_IT)
 <LI><a href="#[b8]">SPI_RxISR_8BIT</a> from stm32f2xx_hal_spi.o(i.SPI_RxISR_8BIT) referenced from stm32f2xx_hal_spi.o(i.HAL_SPI_Receive_IT)
 <LI><a href="#[5f]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[c7]">StartDefaultTask</a> from main.o(i.StartDefaultTask) referenced from main.o(.constdata)
 <LI><a href="#[c8]">StartTask02</a> from main.o(i.StartTask02) referenced from main.o(.constdata)
 <LI><a href="#[62]">SysTick_Handler</a> from stm32f2xx_it.o(i.SysTick_Handler) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[b4]">SystemInit</a> from system_stm32f2xx.o(i.SystemInit) referenced from startup_stm32f207xx.o(.text)
 <LI><a href="#[65]">TAMP_STAMP_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[7b]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[7e]">TIM1_CC_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[7d]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[7c]">TIM1_UP_TIM10_IRQHandler</a> from stm32f2xx_it.o(i.TIM1_UP_TIM10_IRQHandler) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[7f]">TIM2_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[80]">TIM3_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[81]">TIM4_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[95]">TIM5_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[99]">TIM6_DAC_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[9a]">TIM7_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[8e]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[91]">TIM8_CC_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[90]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[8f]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[97]">UART4_IRQHandler</a> from stm32f2xx_it.o(i.UART4_IRQHandler) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[98]">UART5_IRQHandler</a> from stm32f2xx_it.o(i.UART5_IRQHandler) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[bd]">UART_DMAAbortOnError</a> from stm32f2xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32f2xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[88]">USART1_IRQHandler</a> from stm32f2xx_it.o(i.USART1_IRQHandler) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[89]">USART2_IRQHandler</a> from stm32f2xx_it.o(i.USART2_IRQHandler) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[8a]">USART3_IRQHandler</a> from stm32f2xx_it.o(i.USART3_IRQHandler) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[aa]">USART6_IRQHandler</a> from stm32f2xx_it.o(i.USART6_IRQHandler) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[5e]">UsageFault_Handler</a> from stm32f2xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[63]">WWDG_IRQHandler</a> from startup_stm32f207xx.o(.text) referenced from startup_stm32f207xx.o(RESET)
 <LI><a href="#[b5]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f207xx.o(.text)
 <LI><a href="#[bf]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0snprintf)
 <LI><a href="#[bf]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[c0]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[d]">fsm_adclibra_init</a> from l2adclibra.o(i.fsm_adclibra_init) referenced 2 times from l2adclibra.o(.data)
 <LI><a href="#[e]">fsm_adclibra_restart</a> from l2adclibra.o(i.fsm_adclibra_restart) referenced 6 times from l2adclibra.o(.data)
 <LI><a href="#[f]">fsm_adclibra_stop_rcv</a> from l2adclibra.o(i.fsm_adclibra_stop_rcv) referenced 4 times from l2adclibra.o(.data)
 <LI><a href="#[c]">fsm_adclibra_task_entry</a> from l2adclibra.o(i.fsm_adclibra_task_entry) referenced 2 times from l2adclibra.o(.data)
 <LI><a href="#[10]">fsm_adclibra_time_out</a> from l2adclibra.o(i.fsm_adclibra_time_out) referenced 2 times from l2adclibra.o(.data)
 <LI><a href="#[3c]">fsm_canvela_init</a> from l2canvela.o(i.fsm_canvela_init) referenced 2 times from l2canvela.o(.data)
 <LI><a href="#[3d]">fsm_canvela_restart</a> from l2canvela.o(i.fsm_canvela_restart) referenced 6 times from l2canvela.o(.data)
 <LI><a href="#[3e]">fsm_canvela_stop_rcv</a> from l2canvela.o(i.fsm_canvela_stop_rcv) referenced 4 times from l2canvela.o(.data)
 <LI><a href="#[3b]">fsm_canvela_task_entry</a> from l2canvela.o(i.fsm_canvela_task_entry) referenced 2 times from l2canvela.o(.data)
 <LI><a href="#[3f]">fsm_canvela_time_out</a> from l2canvela.o(i.fsm_canvela_time_out) referenced 4 times from l2canvela.o(.data)
 <LI><a href="#[4f]">fsm_ccl_dcmi_sensor_status_resp</a> from l3ccl.o(i.fsm_ccl_dcmi_sensor_status_resp) referenced 2 times from l3ccl.o(.data)
 <LI><a href="#[52]">fsm_ccl_dido_door_open_event</a> from l3ccl.o(i.fsm_ccl_dido_door_open_event) referenced 2 times from l3ccl.o(.data)
 <LI><a href="#[53]">fsm_ccl_dido_event_status_update</a> from l3ccl.o(i.fsm_ccl_dido_event_status_update) referenced 4 times from l3ccl.o(.data)
 <LI><a href="#[4c]">fsm_ccl_dido_sensor_status_resp</a> from l3ccl.o(i.fsm_ccl_dido_sensor_status_resp) referenced 2 times from l3ccl.o(.data)
 <LI><a href="#[56]">fsm_ccl_event_fault_trigger_to_stop</a> from l3ccl.o(i.fsm_ccl_event_fault_trigger_to_stop) referenced 4 times from l3ccl.o(.data)
 <LI><a href="#[58]">fsm_ccl_event_lock_trigger_to_work</a> from l3ccl.o(i.fsm_ccl_event_lock_trigger_to_work) referenced 2 times from l3ccl.o(.data)
 <LI><a href="#[4e]">fsm_ccl_i2c_sensor_status_resp</a> from l3ccl.o(i.fsm_ccl_i2c_sensor_status_resp) referenced 2 times from l3ccl.o(.data)
 <LI><a href="#[48]">fsm_ccl_init</a> from l3ccl.o(i.fsm_ccl_init) referenced 2 times from l3ccl.o(.data)
 <LI><a href="#[55]">fsm_ccl_lock_and_door_close_event</a> from l3ccl.o(i.fsm_ccl_lock_and_door_close_event) referenced 4 times from l3ccl.o(.data)
 <LI><a href="#[49]">fsm_ccl_restart</a> from l3ccl.o(i.fsm_ccl_restart) referenced 16 times from l3ccl.o(.data)
 <LI><a href="#[54]">fsm_ccl_sps_close_door_report_cfm</a> from l3ccl.o(i.fsm_ccl_sps_close_door_report_cfm) referenced 8 times from l3ccl.o(.data)
 <LI><a href="#[51]">fsm_ccl_sps_cloud_fb</a> from l3ccl.o(i.fsm_ccl_sps_cloud_fb) referenced 2 times from l3ccl.o(.data)
 <LI><a href="#[50]">fsm_ccl_sps_event_report_cfm</a> from l3ccl.o(i.fsm_ccl_sps_event_report_cfm) referenced 2 times from l3ccl.o(.data)
 <LI><a href="#[57]">fsm_ccl_sps_fault_report_cfm</a> from l3ccl.o(i.fsm_ccl_sps_fault_report_cfm) referenced 4 times from l3ccl.o(.data)
 <LI><a href="#[4d]">fsm_ccl_sps_sensor_status_resp</a> from l3ccl.o(i.fsm_ccl_sps_sensor_status_resp) referenced 2 times from l3ccl.o(.data)
 <LI><a href="#[4a]">fsm_ccl_stop_rcv</a> from l3ccl.o(i.fsm_ccl_stop_rcv) referenced 2 times from l3ccl.o(.data)
 <LI><a href="#[47]">fsm_ccl_task_entry</a> from l3ccl.o(i.fsm_ccl_task_entry) referenced 2 times from l3ccl.o(.data)
 <LI><a href="#[4b]">fsm_ccl_time_out</a> from l3ccl.o(i.fsm_ccl_time_out) referenced 12 times from l3ccl.o(.data)
 <LI><a href="#[3]">fsm_com_do_nothing</a> from vmfreeoslayer.o(i.fsm_com_do_nothing) referenced 4 times from l1timer_freeos.o(.data)
 <LI><a href="#[46]">fsm_dcmiaris_ccl_ctrl_cmd</a> from l2dcmiaris.o(i.fsm_dcmiaris_ccl_ctrl_cmd) referenced 2 times from l2dcmiaris.o(.data)
 <LI><a href="#[45]">fsm_dcmiaris_ccl_sensor_status_req</a> from l2dcmiaris.o(i.fsm_dcmiaris_ccl_sensor_status_req) referenced 2 times from l2dcmiaris.o(.data)
 <LI><a href="#[41]">fsm_dcmiaris_init</a> from l2dcmiaris.o(i.fsm_dcmiaris_init) referenced 2 times from l2dcmiaris.o(.data)
 <LI><a href="#[42]">fsm_dcmiaris_restart</a> from l2dcmiaris.o(i.fsm_dcmiaris_restart) referenced 6 times from l2dcmiaris.o(.data)
 <LI><a href="#[43]">fsm_dcmiaris_stop_rcv</a> from l2dcmiaris.o(i.fsm_dcmiaris_stop_rcv) referenced 4 times from l2dcmiaris.o(.data)
 <LI><a href="#[40]">fsm_dcmiaris_task_entry</a> from l2dcmiaris.o(i.fsm_dcmiaris_task_entry) referenced 2 times from l2dcmiaris.o(.data)
 <LI><a href="#[44]">fsm_dcmiaris_time_out</a> from l2dcmiaris.o(i.fsm_dcmiaris_time_out) referenced 2 times from l2dcmiaris.o(.data)
 <LI><a href="#[17]">fsm_didocap_ccl_ctrl_cmd</a> from l2didocap.o(i.fsm_didocap_ccl_ctrl_cmd) referenced 2 times from l2didocap.o(.data)
 <LI><a href="#[16]">fsm_didocap_ccl_sensor_status_req</a> from l2didocap.o(i.fsm_didocap_ccl_sensor_status_req) referenced 2 times from l2didocap.o(.data)
 <LI><a href="#[12]">fsm_didocap_init</a> from l2didocap.o(i.fsm_didocap_init) referenced 2 times from l2didocap.o(.data)
 <LI><a href="#[13]">fsm_didocap_restart</a> from l2didocap.o(i.fsm_didocap_restart) referenced 6 times from l2didocap.o(.data)
 <LI><a href="#[14]">fsm_didocap_stop_rcv</a> from l2didocap.o(i.fsm_didocap_stop_rcv) referenced 4 times from l2didocap.o(.data)
 <LI><a href="#[11]">fsm_didocap_task_entry</a> from l2didocap.o(i.fsm_didocap_task_entry) referenced 2 times from l2didocap.o(.data)
 <LI><a href="#[15]">fsm_didocap_time_out</a> from l2didocap.o(i.fsm_didocap_time_out) referenced 2 times from l2didocap.o(.data)
 <LI><a href="#[19]">fsm_ethorion_init</a> from l2ethorion.o(i.fsm_ethorion_init) referenced 2 times from l2ethorion.o(.data)
 <LI><a href="#[1a]">fsm_ethorion_restart</a> from l2ethorion.o(i.fsm_ethorion_restart) referenced 6 times from l2ethorion.o(.data)
 <LI><a href="#[1b]">fsm_ethorion_stop_rcv</a> from l2ethorion.o(i.fsm_ethorion_stop_rcv) referenced 4 times from l2ethorion.o(.data)
 <LI><a href="#[18]">fsm_ethorion_task_entry</a> from l2ethorion.o(i.fsm_ethorion_task_entry) referenced 2 times from l2ethorion.o(.data)
 <LI><a href="#[1c]">fsm_ethorion_time_out</a> from l2ethorion.o(i.fsm_ethorion_time_out) referenced 2 times from l2ethorion.o(.data)
 <LI><a href="#[23]">fsm_i2caries_ccl_ctrl_cmd</a> from l2i2caries.o(i.fsm_i2caries_ccl_ctrl_cmd) referenced 2 times from l2i2caries.o(.data)
 <LI><a href="#[22]">fsm_i2caries_ccl_sensor_status_req</a> from l2i2caries.o(i.fsm_i2caries_ccl_sensor_status_req) referenced 2 times from l2i2caries.o(.data)
 <LI><a href="#[1e]">fsm_i2caries_init</a> from l2i2caries.o(i.fsm_i2caries_init) referenced 2 times from l2i2caries.o(.data)
 <LI><a href="#[1f]">fsm_i2caries_restart</a> from l2i2caries.o(i.fsm_i2caries_restart) referenced 6 times from l2i2caries.o(.data)
 <LI><a href="#[20]">fsm_i2caries_stop_rcv</a> from l2i2caries.o(i.fsm_i2caries_stop_rcv) referenced 4 times from l2i2caries.o(.data)
 <LI><a href="#[1d]">fsm_i2caries_task_entry</a> from l2i2caries.o(i.fsm_i2caries_task_entry) referenced 2 times from l2i2caries.o(.data)
 <LI><a href="#[21]">fsm_i2caries_time_out</a> from l2i2caries.o(i.fsm_i2caries_time_out) referenced 2 times from l2i2caries.o(.data)
 <LI><a href="#[25]">fsm_ledpisces_init</a> from l2ledpisces.o(i.fsm_ledpisces_init) referenced 2 times from l2ledpisces.o(.data)
 <LI><a href="#[26]">fsm_ledpisces_restart</a> from l2ledpisces.o(i.fsm_ledpisces_restart) referenced 6 times from l2ledpisces.o(.data)
 <LI><a href="#[27]">fsm_ledpisces_stop_rcv</a> from l2ledpisces.o(i.fsm_ledpisces_stop_rcv) referenced 4 times from l2ledpisces.o(.data)
 <LI><a href="#[24]">fsm_ledpisces_task_entry</a> from l2ledpisces.o(i.fsm_ledpisces_task_entry) referenced 2 times from l2ledpisces.o(.data)
 <LI><a href="#[28]">fsm_ledpisces_time_out</a> from l2ledpisces.o(i.fsm_ledpisces_time_out) referenced 2 times from l2ledpisces.o(.data)
 <LI><a href="#[2a]">fsm_spileo_init</a> from l2spileo.o(i.fsm_spileo_init) referenced 2 times from l2spileo.o(.data)
 <LI><a href="#[2e]">fsm_spileo_l2frame_rcv</a> from l2spileo.o(i.fsm_spileo_l2frame_rcv) referenced 2 times from l2spileo.o(.data)
 <LI><a href="#[2b]">fsm_spileo_restart</a> from l2spileo.o(i.fsm_spileo_restart) referenced 6 times from l2spileo.o(.data)
 <LI><a href="#[2c]">fsm_spileo_stop_rcv</a> from l2spileo.o(i.fsm_spileo_stop_rcv) referenced 4 times from l2spileo.o(.data)
 <LI><a href="#[29]">fsm_spileo_task_entry</a> from l2spileo.o(i.fsm_spileo_task_entry) referenced 2 times from l2spileo.o(.data)
 <LI><a href="#[2d]">fsm_spileo_time_out</a> from l2spileo.o(i.fsm_spileo_time_out) referenced 2 times from l2spileo.o(.data)
 <LI><a href="#[3a]">fsm_spsvirgo_ccl_close_door_report_send</a> from l2spsvirgo.o(i.fsm_spsvirgo_ccl_close_door_report_send) referenced 4 times from l2spsvirgo.o(.data)
 <LI><a href="#[38]">fsm_spsvirgo_ccl_ctrl_cmd</a> from l2spsvirgo.o(i.fsm_spsvirgo_ccl_ctrl_cmd) referenced 4 times from l2spsvirgo.o(.data)
 <LI><a href="#[37]">fsm_spsvirgo_ccl_event_report_send</a> from l2spsvirgo.o(i.fsm_spsvirgo_ccl_event_report_send) referenced 4 times from l2spsvirgo.o(.data)
 <LI><a href="#[39]">fsm_spsvirgo_ccl_fault_report_send</a> from l2spsvirgo.o(i.fsm_spsvirgo_ccl_fault_report_send) referenced 4 times from l2spsvirgo.o(.data)
 <LI><a href="#[35]">fsm_spsvirgo_ccl_open_auth_inq</a> from l2spsvirgo.o(i.fsm_spsvirgo_ccl_open_auth_inq) referenced 4 times from l2spsvirgo.o(.data)
 <LI><a href="#[36]">fsm_spsvirgo_ccl_sensor_status_req</a> from l2spsvirgo.o(i.fsm_spsvirgo_ccl_sensor_status_req) referenced 4 times from l2spsvirgo.o(.data)
 <LI><a href="#[30]">fsm_spsvirgo_init</a> from l2spsvirgo.o(i.fsm_spsvirgo_init) referenced 2 times from l2spsvirgo.o(.data)
 <LI><a href="#[34]">fsm_spsvirgo_l2frame_rcv</a> from l2spsvirgo.o(i.fsm_spsvirgo_l2frame_rcv) referenced 2 times from l2spsvirgo.o(.data)
 <LI><a href="#[31]">fsm_spsvirgo_restart</a> from l2spsvirgo.o(i.fsm_spsvirgo_restart) referenced 10 times from l2spsvirgo.o(.data)
 <LI><a href="#[32]">fsm_spsvirgo_stop_rcv</a> from l2spsvirgo.o(i.fsm_spsvirgo_stop_rcv) referenced 4 times from l2spsvirgo.o(.data)
 <LI><a href="#[2f]">fsm_spsvirgo_task_entry</a> from l2spsvirgo.o(i.fsm_spsvirgo_task_entry) referenced 2 times from l2spsvirgo.o(.data)
 <LI><a href="#[33]">fsm_spsvirgo_time_out</a> from l2spsvirgo.o(i.fsm_spsvirgo_time_out) referenced 4 times from l2spsvirgo.o(.data)
 <LI><a href="#[1]">fsm_timer_init</a> from l1timer_freeos.o(i.fsm_timer_init) referenced 2 times from l1timer_freeos.o(.data)
 <LI><a href="#[2]">fsm_timer_restart</a> from l1timer_freeos.o(i.fsm_timer_restart) referenced 4 times from l1timer_freeos.o(.data)
 <LI><a href="#[4]">fsm_timer_stop_rcv</a> from l1timer_freeos.o(i.fsm_timer_stop_rcv) referenced 2 times from l1timer_freeos.o(.data)
 <LI><a href="#[0]">fsm_timer_task_entry</a> from l1timer_freeos.o(i.fsm_timer_task_entry) referenced 2 times from l1timer_freeos.o(.data)
 <LI><a href="#[b]">fsm_vmfo_heart_beat</a> from l1vmfo.o(i.fsm_vmfo_heart_beat) referenced 2 times from l1vmfo.o(.data)
 <LI><a href="#[6]">fsm_vmfo_init</a> from l1vmfo.o(i.fsm_vmfo_init) referenced 2 times from l1vmfo.o(.data)
 <LI><a href="#[a]">fsm_vmfo_init_fb</a> from l1vmfo.o(i.fsm_vmfo_init_fb) referenced 2 times from l1vmfo.o(.data)
 <LI><a href="#[7]">fsm_vmfo_restart</a> from l1vmfo.o(i.fsm_vmfo_restart) referenced 6 times from l1vmfo.o(.data)
 <LI><a href="#[8]">fsm_vmfo_stop_rcv</a> from l1vmfo.o(i.fsm_vmfo_stop_rcv) referenced 4 times from l1vmfo.o(.data)
 <LI><a href="#[5]">fsm_vmfo_task_entry</a> from l1vmfo.o(i.fsm_vmfo_task_entry) referenced 2 times from l1vmfo.o(.data)
 <LI><a href="#[9]">fsm_vmfo_time_out</a> from l1vmfo.o(i.fsm_vmfo_time_out) referenced 2 times from l1vmfo.o(.data)
 <LI><a href="#[c1]">func_timer_routine_handler_1s</a> from l1timer_freeos.o(i.func_timer_routine_handler_1s) referenced from l1timer_freeos.o(i.fsm_timer_init)
 <LI><a href="#[b3]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[c4]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[c3]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[c5]">prvTimerTask</a> from timers.o(i.prvTimerTask) referenced from timers.o(i.xTimerCreateTimerTask)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[b5]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(.text)
</UL>
<P><STRONG><a name="[26e]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[c9]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[e7]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[26f]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[270]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[271]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[272]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[273]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[5f]"></a>SVC_Handler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[264]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[61]"></a>PendSV_Handler</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[230]"></a>ulPortSetInterruptMask</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStepTick
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskExitError
</UL>

<P><STRONG><a name="[252]"></a>vPortClearInterruptMask</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>

<P><STRONG><a name="[258]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>

<P><STRONG><a name="[59]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[b1]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[a7]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[a8]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[a9]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[a0]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[a1]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[b2]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[ac]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[ab]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[a6]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[ae]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[ad]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[b0]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[af]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[9a]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f207xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[21e]"></a>tolower</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tolower.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_gprsmod_http_data_transmit_with_receive
</UL>

<P><STRONG><a name="[1a3]"></a>rand</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_timer_init
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_dcmi_value
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_sensor_status_req
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_rsv2_value
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_rsv1_value
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_i2caries_ccl_sensor_status_req
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_water_state
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_temp_value
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_smoke_state
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_shake_state
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_lock_open_state
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_humid_value
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_fall_state
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_door_open_state
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_bat_value
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_bat_state
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_didocap_time_out_external_trigger_period_scan
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_didocap_ccl_work_mode_ul_scan_enable_lock_trigger
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_didocap_ccl_work_mode_ul_scan_door_and_lock_status_change
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_didocap_ccl_work_mode_ul_scan_any_door_open
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_didocap_ccl_sleep_mode_ul_scan_shake_trigger
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_didocap_ccl_sleep_mode_ul_scan_lock_trigger
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_ccl_sensor_status_req
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_dcmiaris_ccl_sensor_status_req
</UL>

<P><STRONG><a name="[274]"></a>srand</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rand.o(.text), UNUSED)

<P><STRONG><a name="[103]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxCpltCallback
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_adclibra_time_out
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_pack
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_gprsmod_http_data_transmit_with_receive
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_time_out
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_init_fb
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_heart_beat
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_canvela_time_out
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_time_out
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_l2frame_rcv
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_sensor_status_req
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_open_auth_inq
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_fault_report_send
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_event_report_send
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_ctrl_cmd
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_close_door_report_send
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spileo_time_out
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spileo_l2frame_rcv
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ledpisces_time_out
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_i2caries_time_out
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_i2caries_ccl_sensor_status_req
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_i2caries_ccl_ctrl_cmd
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ethorion_time_out
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_didocap_time_out_external_trigger_period_scan
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_time_out
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_ccl_sensor_status_req
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_ccl_ctrl_cmd
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_time_out
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_sps_sensor_status_resp
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_sps_fault_report_cfm
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_sps_event_report_cfm
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_sps_cloud_fb
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_sps_close_door_report_cfm
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_lock_and_door_close_event
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_i2c_sensor_status_resp
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_event_lock_trigger_to_work
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_event_fault_trigger_to_stop
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_dido_sensor_status_resp
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_dido_event_status_update
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_dido_door_open_event
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_dcmi_sensor_status_resp
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_dcmiaris_time_out
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_dcmiaris_ccl_sensor_status_req
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_dcmiaris_ccl_ctrl_cmd
</UL>

<P><STRONG><a name="[1c3]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_gprsmod_http_data_transmit_with_receive
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_open_auth_inq
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_fault_report_send
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_event_report_send
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_close_door_report_send
</UL>

<P><STRONG><a name="[275]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[cd]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAllocateTCBAndStack
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[276]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[277]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[cc]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_adclibra_init
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_pack
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_init
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_l2frame_rcv
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_init
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_i2caries_init
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_init
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_time_out_event_report_period_scan
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_init
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_dcmiaris_init
</UL>

<P><STRONG><a name="[f5]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_timer_init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxCpltCallback
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_pack
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_gprsmod_http_data_transmit_with_receive
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vm_system_init
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_msgid_to_string
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmProcessingLaunch
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_l2frame_rcv
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_sensor_status_req
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_open_auth_inq
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_fault_report_send
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_event_report_send
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_close_door_report_send
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spileo_l2frame_rcv
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_i2caries_ccl_sensor_status_req
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_didocap_time_out_external_trigger_period_scan
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_ccl_sensor_status_req
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_time_out_lock_work_active
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_sps_sensor_status_resp
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_i2c_sensor_status_resp
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_event_lock_trigger_to_work
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_event_fault_trigger_to_stop
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_dido_sensor_status_resp
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_dcmi_sensor_status_resp
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_dcmiaris_ccl_sensor_status_req
</UL>

<P><STRONG><a name="[278]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[ce]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[169]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_pack
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_gprsmod_http_data_transmit_with_receive
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_taskid_to_string
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_msgid_to_string
</UL>

<P><STRONG><a name="[1f1]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_gprsmod_http_data_transmit_with_receive
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_gprsmod_get_rssi_value
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_send_AT_command
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_module_info_retrieve
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_gsm_info_retrieve
</UL>

<P><STRONG><a name="[1f3]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_gprsmod_get_rssi_value
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_module_info_retrieve
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_gsm_info_retrieve
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_taskid_to_string
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_msgid_to_string
</UL>

<P><STRONG><a name="[163]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_sps_print_send_data
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_pack
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_gprsmod_http_data_transmit_with_receive
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_send_AT_command
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_taskid_to_string
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_msgid_to_string
</UL>

<P><STRONG><a name="[1f2]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
</UL>

<P><STRONG><a name="[164]"></a>strncat</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, strncat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncat
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
</UL>

<P><STRONG><a name="[21b]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vm_system_init
</UL>

<P><STRONG><a name="[20c]"></a>strerror</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, strerror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_task_create
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_rcv
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_queue_create
</UL>

<P><STRONG><a name="[cf]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_gprsmod_get_rssi_value
</UL>

<P><STRONG><a name="[d3]"></a>strtoul</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
</UL>

<P><STRONG><a name="[d4]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_gprsmod_get_rssi_value
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>

<P><STRONG><a name="[d7]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[d8]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[21c]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_gprsmod_get_rssi_value
</UL>

<P><STRONG><a name="[d9]"></a>__aeabi_i2f</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_gprsmod_get_rssi_value
</UL>

<P><STRONG><a name="[21d]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_gprsmod_get_rssi_value
</UL>

<P><STRONG><a name="[279]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[194]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[da]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[d0]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[d1]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[27a]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[d6]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[d5]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[de]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>

<P><STRONG><a name="[e2]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[e3]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[e4]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[e5]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[e6]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[191]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[ca]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[27b]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[dc]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[27c]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[db]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[27d]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[df]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[27e]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[dd]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[e1]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[e0]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[27f]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[280]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[5d]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f2xx_it.o(i.CAN1_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1784<LI>Call Chain = CAN1_RX0_IRQHandler &rArr; HAL_CAN_IRQHandler &rArr; CAN_Receive_IT &rArr; HAL_CAN_RxCpltCallback &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f2xx_it.o(i.CAN1_RX1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1784<LI>Call Chain = CAN1_RX1_IRQHandler &rArr; HAL_CAN_IRQHandler &rArr; CAN_Receive_IT &rArr; HAL_CAN_RxCpltCallback &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f2xx_it.o(i.CAN1_SCE_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1784<LI>Call Chain = CAN1_SCE_IRQHandler &rArr; HAL_CAN_IRQHandler &rArr; CAN_Receive_IT &rArr; HAL_CAN_RxCpltCallback &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f2xx_it.o(i.CAN1_TX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1784<LI>Call Chain = CAN1_TX_IRQHandler &rArr; HAL_CAN_IRQHandler &rArr; CAN_Receive_IT &rArr; HAL_CAN_RxCpltCallback &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[a3]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f2xx_it.o(i.CAN2_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1784<LI>Call Chain = CAN2_RX0_IRQHandler &rArr; HAL_CAN_IRQHandler &rArr; CAN_Receive_IT &rArr; HAL_CAN_RxCpltCallback &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[a4]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f2xx_it.o(i.CAN2_RX1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1784<LI>Call Chain = CAN2_RX1_IRQHandler &rArr; HAL_CAN_IRQHandler &rArr; CAN_Receive_IT &rArr; HAL_CAN_RxCpltCallback &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[a5]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f2xx_it.o(i.CAN2_SCE_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1784<LI>Call Chain = CAN2_SCE_IRQHandler &rArr; HAL_CAN_IRQHandler &rArr; CAN_Receive_IT &rArr; HAL_CAN_RxCpltCallback &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[a2]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f2xx_it.o(i.CAN2_TX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1784<LI>Call Chain = CAN2_TX_IRQHandler &rArr; HAL_CAN_IRQHandler &rArr; CAN_Receive_IT &rArr; HAL_CAN_RxCpltCallback &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[c6]"></a>Callback01</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.Callback01))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[71]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f2xx_it.o(i.DMA1_Stream3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Stream3_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f2xx_it.o(i.DMA1_Stream4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Stream4_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f2xx_it.o(i.DMA2_Stream0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream0_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[9e]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f2xx_it.o(i.DMA2_Stream3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream3_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[13b]"></a>Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART6_UART_Init
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART5_Init
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM7_Init
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM6_Init
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN2_Init
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN1_Init
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC3_Init
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC2_Init
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>

<P><STRONG><a name="[ee]"></a>FsmAddNew</STRONG> (Thumb, 682 bytes, Stack size 56 bytes, vmfreeoslayer.o(i.FsmAddNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = FsmAddNew &rArr; FsmSetState &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_task_create_and_run
</UL>

<P><STRONG><a name="[f3]"></a>FsmGetState</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, vmfreeoslayer.o(i.FsmGetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = FsmGetState &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_adclibra_time_out
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_time_out
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmRunEngine
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_canvela_time_out
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_time_out
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spileo_time_out
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ledpisces_time_out
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_i2caries_time_out
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ethorion_time_out
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_didocap_time_out_work_mode_period_scan
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_time_out
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_time_out_lock_work_active
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_time_out
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_event_fault_trigger_to_stop
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_dcmiaris_time_out
</UL>

<P><STRONG><a name="[f4]"></a>FsmInit</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, vmfreeoslayer.o(i.FsmInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = FsmInit &rArr; IhuDebugPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vm_system_init
</UL>

<P><STRONG><a name="[c2]"></a>FsmProcessingLaunch</STRONG> (Thumb, 264 bytes, Stack size 536 bytes, vmfreeoslayer.o(i.FsmProcessingLaunch))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072<LI>Call Chain = FsmProcessingLaunch &rArr; FsmRunEngine &rArr; FsmGetState &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_sleep
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_rcv
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmRunEngine
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vmfreeoslayer.o(i.ihu_task_create_and_run)
</UL>
<P><STRONG><a name="[f8]"></a>FsmRunEngine</STRONG> (Thumb, 584 bytes, Stack size 64 bytes, vmfreeoslayer.o(i.FsmRunEngine))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = FsmRunEngine &rArr; FsmGetState &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmProcessingLaunch
</UL>

<P><STRONG><a name="[f2]"></a>FsmSetState</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, vmfreeoslayer.o(i.FsmSetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = FsmSetState &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_timer_task_entry
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_timer_stop_rcv
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_timer_init
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_adclibra_time_out
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_adclibra_task_entry
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_adclibra_stop_rcv
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_adclibra_init
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_time_out
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_task_entry
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_stop_rcv
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmAddNew
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_canvela_time_out
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_canvela_task_entry
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_canvela_stop_rcv
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_canvela_init
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_time_out
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_task_entry
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_stop_rcv
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_init
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_open_auth_inq
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_fault_report_send
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_event_report_send
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_close_door_report_send
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spileo_time_out
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spileo_task_entry
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spileo_stop_rcv
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spileo_init
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ledpisces_time_out
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ledpisces_task_entry
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ledpisces_stop_rcv
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ledpisces_init
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_i2caries_time_out
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_i2caries_task_entry
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_i2caries_stop_rcv
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_i2caries_init
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ethorion_time_out
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ethorion_task_entry
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ethorion_stop_rcv
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ethorion_init
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_time_out
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_task_entry
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_stop_rcv
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_init
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_time_out_lock_work_active
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_time_out_event_report_period_scan
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_task_entry
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_stop_rcv
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_sps_event_report_cfm
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_sps_cloud_fb
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_sps_close_door_report_cfm
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_event_lock_trigger_to_work
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_event_fault_trigger_to_stop
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_dido_door_open_event
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_dcmiaris_time_out
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_dcmiaris_task_entry
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_dcmiaris_stop_rcv
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_dcmiaris_init
</UL>

<P><STRONG><a name="[16b]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 386 bytes, Stack size 12 bytes, stm32f2xx_hal_adc.o(i.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_ADC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC3_Init
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC2_Init
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[f9]"></a>HAL_ADC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, stm32f2xx_hal_adc.o(i.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC3_Init
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC2_Init
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[fa]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, stm32f2xx_hal_msp.o(i.HAL_ADC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[fd]"></a>HAL_CAN_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_hal_can.o(i.HAL_CAN_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[e8]"></a>HAL_CAN_IRQHandler</STRONG> (Thumb, 446 bytes, Stack size 24 bytes, stm32f2xx_hal_can.o(i.HAL_CAN_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1776<LI>Call Chain = HAL_CAN_IRQHandler &rArr; CAN_Receive_IT &rArr; HAL_CAN_RxCpltCallback &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmit_IT
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Receive_IT
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_TX_IRQHandler
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_SCE_IRQHandler
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX1_IRQHandler
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_TX_IRQHandler
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_SCE_IRQHandler
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX1_IRQHandler
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[fe]"></a>HAL_CAN_Init</STRONG> (Thumb, 448 bytes, Stack size 16 bytes, stm32f2xx_hal_can.o(i.HAL_CAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_CAN_Init &rArr; HAL_CAN_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN2_Init
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN1_Init
</UL>

<P><STRONG><a name="[ff]"></a>HAL_CAN_MspInit</STRONG> (Thumb, 346 bytes, Stack size 32 bytes, stm32f2xx_hal_msp.o(i.HAL_CAN_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_CAN_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
</UL>

<P><STRONG><a name="[105]"></a>HAL_CAN_Receive_IT</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, stm32f2xx_hal_can.o(i.HAL_CAN_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_CAN_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxCpltCallback
</UL>

<P><STRONG><a name="[ea]"></a>HAL_CAN_RxCpltCallback</STRONG> (Thumb, 412 bytes, Stack size 528 bytes, bsp_can.o(i.HAL_CAN_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1736<LI>Call Chain = HAL_CAN_RxCpltCallback &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Receive_IT
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Receive_IT
</UL>

<P><STRONG><a name="[ec]"></a>HAL_CAN_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_hal_can.o(i.HAL_CAN_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmit_IT
</UL>

<P><STRONG><a name="[138]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f2xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[ed]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 574 bytes, Stack size 24 bytes, stm32f2xx_hal_dma.o(i.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream3_IRQHandler
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream0_IRQHandler
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream4_IRQHandler
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream3_IRQHandler
</UL>

<P><STRONG><a name="[106]"></a>HAL_DMA_Init</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, stm32f2xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CheckFifoParam
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>

<P><STRONG><a name="[fc]"></a>HAL_GPIO_Init</STRONG> (Thumb, 476 bytes, Stack size 24 bytes, stm32f2xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>

<P><STRONG><a name="[208]"></a>HAL_GPIO_TogglePin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_hal_gpio.o(i.HAL_GPIO_TogglePin))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_led_f2board_timer_ind_negation
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_led_f2board_negation
</UL>

<P><STRONG><a name="[172]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[100]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRxTx_ISR
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_SetWakeUpTimer
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
</UL>

<P><STRONG><a name="[157]"></a>HAL_I2C_AbortCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_hal_i2c.o(i.HAL_I2C_AbortCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMAAbort
</UL>

<P><STRONG><a name="[160]"></a>HAL_I2C_AddrCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_hal_i2c.o(i.HAL_I2C_AddrCallback))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_ADDR
</UL>

<P><STRONG><a name="[109]"></a>HAL_I2C_ER_IRQHandler</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, stm32f2xx_hal_i2c.o(i.HAL_I2C_ER_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_I2C_ER_IRQHandler &rArr; I2C_Slave_AF
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_AF
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_ER_IRQHandler
</UL>

<P><STRONG><a name="[10c]"></a>HAL_I2C_EV_IRQHandler</STRONG> (Thumb, 368 bytes, Stack size 24 bytes, stm32f2xx_hal_i2c.o(i.HAL_I2C_EV_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_I2C_EV_IRQHandler &rArr; I2C_Slave_STOPF &rArr; I2C_ITError
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_STOPF
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_ADDR
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveTransmit_TXE
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveTransmit_BTF
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveReceive_RXNE
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveReceive_BTF
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_SB
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_ADDR
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_ADD10
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransmit_TXE
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransmit_BTF
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReceive_RXNE
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReceive_BTF
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_EV_IRQHandler
</UL>

<P><STRONG><a name="[158]"></a>HAL_I2C_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_hal_i2c.o(i.HAL_I2C_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMAAbort
</UL>

<P><STRONG><a name="[11a]"></a>HAL_I2C_Init</STRONG> (Thumb, 286 bytes, Stack size 16 bytes, stm32f2xx_hal_i2c.o(i.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[159]"></a>HAL_I2C_ListenCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_hal_i2c.o(i.HAL_I2C_ListenCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_STOPF
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_AF
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
</UL>

<P><STRONG><a name="[15b]"></a>HAL_I2C_MasterRxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_hal_i2c.o(i.HAL_I2C_MasterRxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReceive_RXNE
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReceive_BTF
</UL>

<P><STRONG><a name="[15c]"></a>HAL_I2C_MasterTxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_hal_i2c.o(i.HAL_I2C_MasterTxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransmit_TXE
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransmit_BTF
</UL>

<P><STRONG><a name="[15a]"></a>HAL_I2C_MemRxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_hal_i2c.o(i.HAL_I2C_MemRxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReceive_RXNE
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReceive_BTF
</UL>

<P><STRONG><a name="[15d]"></a>HAL_I2C_MemTxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_hal_i2c.o(i.HAL_I2C_MemTxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransmit_TXE
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransmit_BTF
</UL>

<P><STRONG><a name="[11b]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, stm32f2xx_hal_msp.o(i.HAL_I2C_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[15e]"></a>HAL_I2C_SlaveRxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_hal_i2c.o(i.HAL_I2C_SlaveRxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_STOPF
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveReceive_RXNE
</UL>

<P><STRONG><a name="[15f]"></a>HAL_I2C_SlaveTxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_hal_i2c.o(i.HAL_I2C_SlaveTxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_AF
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveTransmit_TXE
</UL>

<P><STRONG><a name="[21f]"></a>HAL_I2C_Slave_Receive_IT</STRONG> (Thumb, 222 bytes, Stack size 12 bytes, stm32f2xx_hal_i2c.o(i.HAL_I2C_Slave_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_I2C_Slave_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[149]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[11d]"></a>HAL_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f2xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11f]"></a>HAL_InitTick</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, stm32f2xx_hal_timebase_tim.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetClockConfig
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[120]"></a>HAL_MspInit</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, stm32f2xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[102]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_NVIC_Init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
</UL>

<P><STRONG><a name="[101]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32f2xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_GetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_NVIC_Init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
</UL>

<P><STRONG><a name="[11e]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f2xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>

<P><STRONG><a name="[127]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 416 bytes, Stack size 24 bytes, stm32f2xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[128]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 400 bytes, Stack size 16 bytes, stm32f2xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[121]"></a>HAL_RCC_GetClockConfig</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, stm32f2xx_hal_rcc.o(i.HAL_RCC_GetClockConfig))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[12a]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[11c]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, stm32f2xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[122]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, stm32f2xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[129]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, stm32f2xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[12b]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 906 bytes, Stack size 16 bytes, stm32f2xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[12c]"></a>HAL_RTCEx_SetWakeUpTimer</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, stm32f2xx_hal_rtc_ex.o(i.HAL_RTCEx_SetWakeUpTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RTCEx_SetWakeUpTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[12d]"></a>HAL_RTC_Init</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, stm32f2xx_hal_rtc.o(i.HAL_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RTC_Init &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[12e]"></a>HAL_RTC_MspInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f2xx_hal_msp.o(i.HAL_RTC_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[130]"></a>HAL_RTC_SetAlarm</STRONG> (Thumb, 458 bytes, Stack size 24 bytes, stm32f2xx_hal_rtc.o(i.HAL_RTC_SetAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RTC_SetAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[133]"></a>HAL_RTC_SetDate</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, stm32f2xx_hal_rtc.o(i.HAL_RTC_SetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RTC_SetDate &rArr; HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[135]"></a>HAL_RTC_SetTime</STRONG> (Thumb, 294 bytes, Stack size 24 bytes, stm32f2xx_hal_rtc.o(i.HAL_RTC_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RTC_SetTime &rArr; HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
</UL>

<P><STRONG><a name="[134]"></a>HAL_RTC_WaitForSynchro</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32f2xx_hal_rtc.o(i.HAL_RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
</UL>

<P><STRONG><a name="[136]"></a>HAL_SPI_ErrorCallback</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, bsp_spi.o(i.HAL_SPI_ErrorCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = HAL_SPI_ErrorCallback &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMAAbortOnError
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRx_ISR
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRxTx_ISR
</UL>

<P><STRONG><a name="[137]"></a>HAL_SPI_IRQHandler</STRONG> (Thumb, 308 bytes, Stack size 24 bytes, stm32f2xx_hal_spi.o(i.HAL_SPI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = HAL_SPI_IRQHandler &rArr; HAL_SPI_ErrorCallback &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_IRQHandler
</UL>

<P><STRONG><a name="[139]"></a>HAL_SPI_Init</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, stm32f2xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[13a]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 412 bytes, Stack size 32 bytes, stm32f2xx_hal_msp.o(i.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[13c]"></a>HAL_SPI_Receive_IT</STRONG> (Thumb, 194 bytes, Stack size 20 bytes, stm32f2xx_hal_spi.o(i.HAL_SPI_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_SPI_Receive_IT &rArr; HAL_SPI_TransmitReceive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[184]"></a>HAL_SPI_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_hal_spi.o(i.HAL_SPI_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRx_ISR
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRxTx_ISR
</UL>

<P><STRONG><a name="[13d]"></a>HAL_SPI_TransmitReceive_IT</STRONG> (Thumb, 182 bytes, Stack size 20 bytes, stm32f2xx_hal_spi.o(i.HAL_SPI_TransmitReceive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_SPI_TransmitReceive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive_IT
</UL>

<P><STRONG><a name="[185]"></a>HAL_SPI_TxRxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_hal_spi.o(i.HAL_SPI_TxRxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRxTx_ISR
</UL>

<P><STRONG><a name="[18a]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f2xx_hal_cortex.o(i.HAL_SYSTICK_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[13e]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f2xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Config &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[146]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[148]"></a>HAL_TIMEx_CommutationCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_hal_tim_ex.o(i.HAL_TIMEx_CommutationCallback))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[179]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, stm32f2xx_hal_tim_ex.o(i.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM7_Init
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM6_Init
</UL>

<P><STRONG><a name="[123]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f2xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM7_Init
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM6_Init
</UL>

<P><STRONG><a name="[13f]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, stm32f2xx_hal_msp.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_Base_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[124]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f2xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[142]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[141]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 406 bytes, Stack size 8 bytes, stm32f2xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutationCallback
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_TIM10_IRQHandler
</UL>

<P><STRONG><a name="[143]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[144]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[145]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, main.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[147]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[14d]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[14a]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 326 bytes, Stack size 32 bytes, stm32f2xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1784<LI>Call Chain = HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_IT
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_IRQHandler
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[150]"></a>HAL_UART_Init</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, stm32f2xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART6_UART_Init
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART5_Init
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
</UL>

<P><STRONG><a name="[151]"></a>HAL_UART_MspInit</STRONG> (Thumb, 486 bytes, Stack size 32 bytes, stm32f2xx_hal_msp.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[154]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, stm32f2xx_hal_uart.o(i.HAL_UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[153]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 694 bytes, Stack size 528 bytes, bsp_usart.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1736<LI>Call Chain = HAL_UART_RxCpltCallback &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[155]"></a>HAL_UART_Transmit</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, stm32f2xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_sps_print_send_data
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_sps_gprs_send_data
</UL>

<P><STRONG><a name="[18b]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_hal_uart.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
</UL>

<P><STRONG><a name="[5b]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f2xx_it.o(i.I2C1_ER_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = I2C1_ER_IRQHandler &rArr; HAL_I2C_ER_IRQHandler &rArr; I2C_Slave_AF
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ER_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f2xx_it.o(i.I2C1_EV_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2C1_EV_IRQHandler &rArr; HAL_I2C_EV_IRQHandler &rArr; I2C_Slave_STOPF &rArr; I2C_ITError
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[f0]"></a>IhuDebugPrintFo</STRONG> (Thumb, 286 bytes, Stack size 336 bytes, vmfreeoslayer.o(i.IhuDebugPrintFo))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = IhuDebugPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_sps_print_send_data
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncat
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_timer_init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_adclibra_init
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_gprsmod_http_data_transmit_with_receive
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_module_session_init
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_module_info_retrieve
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_gsm_info_retrieve
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_init_fb
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_init
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vm_system_init
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_task_create_and_run
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_task_create_all
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_task_create
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_system_task_init_call
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmRunEngine
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmProcessingLaunch
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmInit
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmAddNew
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_canvela_init
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_spsvirgo_time_out_period_scan
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_init
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spileo_init
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ledpisces_init
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_i2caries_init
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ethorion_init
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_init
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_init
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_dcmiaris_init
</UL>

<P><STRONG><a name="[ef]"></a>IhuDebugPrintId</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, vmfreeoslayer.o(i.IhuDebugPrintId))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = IhuDebugPrintId &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_timer_stop
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_timer_start
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_timer_routine_handler_1s
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_timer_task_entry
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_timer_stop_rcv
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_timer_restart
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_timer_init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_adclibra_time_out_period_scan
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_adclibra_time_out
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_adclibra_task_entry
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_adclibra_stop_rcv
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_adclibra_restart
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_adclibra_init
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_sw_package_req_received_handle
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_sw_package_confirm_received_handle
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_inventory_req_received_handle
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_inventory_confirm_received_handle
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_heart_beat_req_received_handle
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_heart_beat_confirm_received_handle
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_water_req_received_handle
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_water_confirm_received_handle
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_temp_req_received_handle
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_temp_confirm_received_handle
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_state_req_received_handle
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_state_confirm_received_handle
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_smoke_req_received_handle
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_smoke_confirm_received_handle
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_shake_req_received_handle
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_shake_confirm_received_handle
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_rfid_req_received_handle
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_rfid_confirm_received_handle
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_lock_req_received_handle
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_lock_confirm_received_handle
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_lock_auth_resp_received_handle
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_humid_req_received_handle
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_humid_confirm_received_handle
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_gprs_req_received_handle
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_gprs_confirm_received_handle
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_fall_req_received_handle
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_fall_confirm_received_handle
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_door_req_received_handle
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_door_confirm_received_handle
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_ble_req_received_handle
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_ble_confirm_received_handle
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_battery_req_received_handle
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_battery_confirm_received_handle
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_pack
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_gprsmod_http_data_transmit_with_receive
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_module_session_init
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_module_info_retrieve
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_gsm_info_retrieve
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_time_out
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_task_entry
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_stop_rcv
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_restart
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_init_fb
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_init
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_heart_beat
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vm_system_init
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vm_send_init_msg_to_app_task
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_taskid_to_string
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_task_create_and_run
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_task_create_all
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_task_create
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_system_task_init_call
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_msgid_to_string
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_rcv
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_queue_create
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmRunEngine
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmProcessingLaunch
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmInit
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmGetState
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmAddNew
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_canvela_time_out_period_scan
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_canvela_time_out
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_canvela_task_entry
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_canvela_stop_rcv
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_canvela_restart
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_canvela_init
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_spsvirgo_time_out_period_scan
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_time_out
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_task_entry
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_stop_rcv
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_restart
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_l2frame_rcv
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_init
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_sensor_status_req
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_open_auth_inq
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_fault_report_send
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_event_report_send
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_ctrl_cmd
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_close_door_report_send
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_spileo_time_out_period_scan
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spileo_time_out
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spileo_task_entry
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spileo_stop_rcv
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spileo_restart
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spileo_l2frame_rcv
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spileo_init
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ledpisces_time_out_period_scan
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ledpisces_time_out
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ledpisces_task_entry
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ledpisces_stop_rcv
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ledpisces_restart
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ledpisces_init
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_i2caries_time_out_period_scan
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_i2caries_time_out
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_i2caries_task_entry
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_i2caries_stop_rcv
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_i2caries_restart
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_i2caries_init
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_i2caries_ccl_sensor_status_req
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_i2caries_ccl_ctrl_cmd
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ethorion_time_out_period_scan
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ethorion_time_out
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ethorion_task_entry
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ethorion_stop_rcv
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ethorion_restart
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ethorion_init
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_didocap_time_out_work_mode_period_scan
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_didocap_time_out_period_scan
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_didocap_time_out_external_trigger_period_scan
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_time_out
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_task_entry
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_stop_rcv
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_restart
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_init
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_ccl_sensor_status_req
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_ccl_ctrl_cmd
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_time_out_period_event_report
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_time_out_lock_work_wait_door_for_open
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_time_out_lock_work_active
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_time_out_event_report_period_scan
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_time_out
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_task_entry
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_stop_rcv
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_sps_sensor_status_resp
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_sps_fault_report_cfm
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_sps_event_report_cfm
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_sps_cloud_fb
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_sps_close_door_report_cfm
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_restart
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_lock_and_door_close_event
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_init
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_i2c_sensor_status_resp
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_event_lock_trigger_to_work
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_event_fault_trigger_to_stop
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_dido_sensor_status_resp
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_dido_event_status_update
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_dido_door_open_event
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_dcmi_sensor_status_resp
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_dcmiaris_time_out_period_scan
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_dcmiaris_time_out
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_dcmiaris_task_entry
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_dcmiaris_stop_rcv
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_dcmiaris_restart
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_dcmiaris_init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_dcmiaris_ccl_sensor_status_req
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_dcmiaris_ccl_ctrl_cmd
</UL>

<P><STRONG><a name="[f1]"></a>IhuErrorPrintFo</STRONG> (Thumb, 286 bytes, Stack size 336 bytes, vmfreeoslayer.o(i.IhuErrorPrintFo))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_sps_print_send_data
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncat
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_timer_stop
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_timer_start
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_timer_routine_handler_1s
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_timer_task_entry
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_timer_stop_rcv
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_timer_restart
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_timer_init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_adclibra_time_out_period_scan
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_adclibra_time_out
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_adclibra_task_entry
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_adclibra_stop_rcv
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_adclibra_restart
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_adclibra_init
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_sw_package_req_received_handle
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_sw_package_confirm_received_handle
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_inventory_req_received_handle
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_inventory_confirm_received_handle
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_heart_beat_req_received_handle
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_heart_beat_confirm_received_handle
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_water_req_received_handle
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_water_confirm_received_handle
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_temp_req_received_handle
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_temp_confirm_received_handle
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_state_req_received_handle
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_state_confirm_received_handle
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_smoke_req_received_handle
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_smoke_confirm_received_handle
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_shake_req_received_handle
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_shake_confirm_received_handle
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_rfid_req_received_handle
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_rfid_confirm_received_handle
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_lock_req_received_handle
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_lock_confirm_received_handle
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_lock_auth_resp_received_handle
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_humid_req_received_handle
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_humid_confirm_received_handle
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_gprs_req_received_handle
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_gprs_confirm_received_handle
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_fall_req_received_handle
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_fall_confirm_received_handle
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_door_req_received_handle
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_door_confirm_received_handle
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_ble_req_received_handle
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_ble_confirm_received_handle
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_battery_req_received_handle
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_battery_confirm_received_handle
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_pack
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_gprsmod_http_data_transmit_with_receive
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_module_session_init
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_module_info_retrieve
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_gsm_info_retrieve
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_time_out
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_task_entry
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_stop_rcv
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_restart
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_init_fb
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_init
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_heart_beat
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vm_send_init_msg_to_app_task
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_taskid_to_string
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_task_create_and_run
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_task_create
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_system_task_init_call
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_msgid_to_string
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_rcv
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_queue_create
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmRunEngine
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmProcessingLaunch
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmGetState
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmAddNew
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_canvela_time_out_period_scan
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_canvela_time_out
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_canvela_task_entry
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_canvela_stop_rcv
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_canvela_restart
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_canvela_init
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_spsvirgo_time_out_period_scan
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_time_out
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_task_entry
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_stop_rcv
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_restart
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_l2frame_rcv
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_init
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_sensor_status_req
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_open_auth_inq
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_fault_report_send
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_event_report_send
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_ctrl_cmd
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_close_door_report_send
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_spileo_time_out_period_scan
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spileo_time_out
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spileo_task_entry
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spileo_stop_rcv
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spileo_restart
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spileo_l2frame_rcv
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spileo_init
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ledpisces_time_out_period_scan
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ledpisces_time_out
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ledpisces_task_entry
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ledpisces_stop_rcv
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ledpisces_restart
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ledpisces_init
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_i2caries_time_out_period_scan
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_i2caries_time_out
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_i2caries_task_entry
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_i2caries_stop_rcv
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_i2caries_restart
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_i2caries_init
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_i2caries_ccl_sensor_status_req
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_i2caries_ccl_ctrl_cmd
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ethorion_time_out_period_scan
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ethorion_time_out
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ethorion_task_entry
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ethorion_stop_rcv
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ethorion_restart
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ethorion_init
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_didocap_time_out_work_mode_period_scan
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_didocap_time_out_period_scan
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_didocap_time_out_external_trigger_period_scan
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_time_out
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_task_entry
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_stop_rcv
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_restart
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_init
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_ccl_sensor_status_req
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_ccl_ctrl_cmd
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_time_out_period_event_report
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_time_out_lock_work_wait_door_for_open
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_time_out_lock_work_active
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_time_out_event_report_period_scan
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_time_out
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_task_entry
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_stop_rcv
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_sps_sensor_status_resp
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_sps_fault_report_cfm
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_sps_event_report_cfm
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_sps_cloud_fb
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_sps_close_door_report_cfm
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_restart
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_lock_and_door_close_event
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_init
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_i2c_sensor_status_resp
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_event_lock_trigger_to_work
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_event_fault_trigger_to_stop
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_dido_sensor_status_resp
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_dido_event_status_update
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_dido_door_open_event
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_dcmi_sensor_status_resp
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_dcmiaris_time_out_period_scan
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_dcmiaris_time_out
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_dcmiaris_task_entry
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_dcmiaris_stop_rcv
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_dcmiaris_restart
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_dcmiaris_init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_dcmiaris_ccl_sensor_status_req
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_dcmiaris_ccl_ctrl_cmd
</UL>

<P><STRONG><a name="[5c]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[255]"></a>PostSleepProcessing</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, freertos.o(i.PostSleepProcessing))
<BR><BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
</UL>

<P><STRONG><a name="[254]"></a>PreSleepProcessing</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, freertos.o(i.PreSleepProcessing))
<BR><BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
</UL>

<P><STRONG><a name="[132]"></a>RTC_Bcd2ToByte</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_hal_rtc.o(i.RTC_Bcd2ToByte))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm
</UL>

<P><STRONG><a name="[131]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_hal_rtc.o(i.RTC_ByteToBcd2))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm
</UL>

<P><STRONG><a name="[12f]"></a>RTC_EnterInitMode</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm32f2xx_hal_rtc.o(i.RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[87]"></a>SPI2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f2xx_it.o(i.SPI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = SPI2_IRQHandler &rArr; HAL_SPI_IRQHandler &rArr; HAL_SPI_ErrorCallback &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[c7]"></a>StartDefaultTask</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(i.StartDefaultTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = StartDefaultTask &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[c8]"></a>StartTask02</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(i.StartTask02))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = StartTask02 &rArr; osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[62]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f2xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SysTick_Handler &rArr; osSystickHandler &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSystickHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[189]"></a>SystemClock_Config</STRONG> (Thumb, 122 bytes, Stack size 96 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b4]"></a>SystemInit</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, system_stm32f2xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(.text)
</UL>
<P><STRONG><a name="[7c]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f2xx_it.o(i.TIM1_UP_TIM10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM1_UP_TIM10_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[140]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 184 bytes, Stack size 0 bytes, stm32f2xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[97]"></a>UART4_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f2xx_it.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1792<LI>Call Chain = UART4_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>UART5_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f2xx_it.o(i.UART5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1792<LI>Call Chain = UART5_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>USART1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f2xx_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1792<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>USART2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f2xx_it.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1792<LI>Call Chain = USART2_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>USART3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f2xx_it.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1792<LI>Call Chain = USART3_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[aa]"></a>USART6_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f2xx_it.o(i.USART6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1792<LI>Call Chain = USART6_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f207xx.o(RESET)
</UL>
<P><STRONG><a name="[18c]"></a>__0snprintf</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[281]"></a>__1snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[168]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>

<P><STRONG><a name="[282]"></a>__c89snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[283]"></a>snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[18e]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[284]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[162]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_pack
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_gprsmod_http_data_transmit_with_receive
</UL>

<P><STRONG><a name="[285]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[286]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[18f]"></a>__0vsnprintf</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[287]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[288]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[289]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[161]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
</UL>

<P><STRONG><a name="[d2]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_task_create
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_rcv
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_queue_create
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[28a]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[28b]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[28c]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[28d]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[25f]"></a>configureTimerForRunTimeStats</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, freertos.o(i.configureTimerForRunTimeStats))
<BR><BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[253]"></a>eTaskConfirmSleepModeStatus</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, tasks.o(i.eTaskConfirmSleepModeStatus))
<BR><BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
</UL>

<P><STRONG><a name="[d]"></a>fsm_adclibra_init</STRONG> (Thumb, 318 bytes, Stack size 40 bytes, l2adclibra.o(i.fsm_adclibra_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248<LI>Call Chain = fsm_adclibra_init &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_usleep
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_timer_start
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_adclibra_hw_init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_adclibra_restart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2adclibra.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>fsm_adclibra_restart</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, l2adclibra.o(i.fsm_adclibra_restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = fsm_adclibra_restart &rArr; fsm_adclibra_init &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_adclibra_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2adclibra.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>fsm_adclibra_stop_rcv</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, l2adclibra.o(i.fsm_adclibra_stop_rcv))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = fsm_adclibra_stop_rcv &rArr; FsmSetState &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2adclibra.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>fsm_adclibra_task_entry</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, l2adclibra.o(i.fsm_adclibra_task_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = fsm_adclibra_task_entry &rArr; FsmSetState &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2adclibra.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>fsm_adclibra_time_out</STRONG> (Thumb, 278 bytes, Stack size 48 bytes, l2adclibra.o(i.fsm_adclibra_time_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = fsm_adclibra_time_out &rArr; func_adclibra_time_out_period_scan &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_adclibra_time_out_period_scan
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmGetState
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2adclibra.o(.data)
</UL>
<P><STRONG><a name="[3c]"></a>fsm_canvela_init</STRONG> (Thumb, 304 bytes, Stack size 40 bytes, l2canvela.o(i.fsm_canvela_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248<LI>Call Chain = fsm_canvela_init &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_usleep
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_timer_start
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_canvela_hw_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_canvela_restart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2canvela.o(.data)
</UL>
<P><STRONG><a name="[3d]"></a>fsm_canvela_restart</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, l2canvela.o(i.fsm_canvela_restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = fsm_canvela_restart &rArr; fsm_canvela_init &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_canvela_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2canvela.o(.data)
</UL>
<P><STRONG><a name="[3e]"></a>fsm_canvela_stop_rcv</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, l2canvela.o(i.fsm_canvela_stop_rcv))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = fsm_canvela_stop_rcv &rArr; FsmSetState &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2canvela.o(.data)
</UL>
<P><STRONG><a name="[3b]"></a>fsm_canvela_task_entry</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, l2canvela.o(i.fsm_canvela_task_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = fsm_canvela_task_entry &rArr; FsmSetState &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2canvela.o(.data)
</UL>
<P><STRONG><a name="[3f]"></a>fsm_canvela_time_out</STRONG> (Thumb, 244 bytes, Stack size 48 bytes, l2canvela.o(i.fsm_canvela_time_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = fsm_canvela_time_out &rArr; func_canvela_time_out_period_scan &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmGetState
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_canvela_time_out_period_scan
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2canvela.o(.data)
</UL>
<P><STRONG><a name="[4f]"></a>fsm_ccl_dcmi_sensor_status_resp</STRONG> (Thumb, 236 bytes, Stack size 104 bytes, l3ccl.o(i.fsm_ccl_dcmi_sensor_status_resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312<LI>Call Chain = fsm_ccl_dcmi_sensor_status_resp &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l3ccl.o(.data)
</UL>
<P><STRONG><a name="[52]"></a>fsm_ccl_dido_door_open_event</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, l3ccl.o(i.fsm_ccl_dido_door_open_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = fsm_ccl_dido_door_open_event &rArr; ihu_timer_stop &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_timer_stop
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l3ccl.o(.data)
</UL>
<P><STRONG><a name="[53]"></a>fsm_ccl_dido_event_status_update</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, l3ccl.o(i.fsm_ccl_dido_event_status_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = fsm_ccl_dido_event_status_update &rArr; ihu_timer_start &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_timer_start
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l3ccl.o(.data)
</UL>
<P><STRONG><a name="[4c]"></a>fsm_ccl_dido_sensor_status_resp</STRONG> (Thumb, 266 bytes, Stack size 72 bytes, l3ccl.o(i.fsm_ccl_dido_sensor_status_resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = fsm_ccl_dido_sensor_status_resp &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l3ccl.o(.data)
</UL>
<P><STRONG><a name="[56]"></a>fsm_ccl_event_fault_trigger_to_stop</STRONG> (Thumb, 660 bytes, Stack size 112 bytes, l3ccl.o(i.fsm_ccl_event_fault_trigger_to_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320<LI>Call Chain = fsm_ccl_event_fault_trigger_to_stop &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmGetState
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_open_all_sensor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l3ccl.o(.data)
</UL>
<P><STRONG><a name="[58]"></a>fsm_ccl_event_lock_trigger_to_work</STRONG> (Thumb, 586 bytes, Stack size 72 bytes, l3ccl.o(i.fsm_ccl_event_lock_trigger_to_work))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = fsm_ccl_event_lock_trigger_to_work &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_timer_start
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_open_all_sensor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l3ccl.o(.data)
</UL>
<P><STRONG><a name="[4e]"></a>fsm_ccl_i2c_sensor_status_resp</STRONG> (Thumb, 210 bytes, Stack size 72 bytes, l3ccl.o(i.fsm_ccl_i2c_sensor_status_resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = fsm_ccl_i2c_sensor_status_resp &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l3ccl.o(.data)
</UL>
<P><STRONG><a name="[48]"></a>fsm_ccl_init</STRONG> (Thumb, 370 bytes, Stack size 40 bytes, l3ccl.o(i.fsm_ccl_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248<LI>Call Chain = fsm_ccl_init &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_usleep
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_timer_start
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_hw_init
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_close_all_sensor
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_restart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l3ccl.o(.data)
</UL>
<P><STRONG><a name="[55]"></a>fsm_ccl_lock_and_door_close_event</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, l3ccl.o(i.fsm_ccl_lock_and_door_close_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248<LI>Call Chain = fsm_ccl_lock_and_door_close_event &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l3ccl.o(.data)
</UL>
<P><STRONG><a name="[49]"></a>fsm_ccl_restart</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, l3ccl.o(i.fsm_ccl_restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = fsm_ccl_restart &rArr; fsm_ccl_init &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l3ccl.o(.data)
</UL>
<P><STRONG><a name="[54]"></a>fsm_ccl_sps_close_door_report_cfm</STRONG> (Thumb, 418 bytes, Stack size 48 bytes, l3ccl.o(i.fsm_ccl_sps_close_door_report_cfm))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256<LI>Call Chain = fsm_ccl_sps_close_door_report_cfm &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_timer_stop
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_close_all_sensor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l3ccl.o(.data)
</UL>
<P><STRONG><a name="[51]"></a>fsm_ccl_sps_cloud_fb</STRONG> (Thumb, 666 bytes, Stack size 48 bytes, l3ccl.o(i.fsm_ccl_sps_cloud_fb))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256<LI>Call Chain = fsm_ccl_sps_cloud_fb &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_timer_stop
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_timer_start
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_close_all_sensor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l3ccl.o(.data)
</UL>
<P><STRONG><a name="[50]"></a>fsm_ccl_sps_event_report_cfm</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, l3ccl.o(i.fsm_ccl_sps_event_report_cfm))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = fsm_ccl_sps_event_report_cfm &rArr; FsmSetState &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_close_all_sensor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l3ccl.o(.data)
</UL>
<P><STRONG><a name="[57]"></a>fsm_ccl_sps_fault_report_cfm</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, l3ccl.o(i.fsm_ccl_sps_fault_report_cfm))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = fsm_ccl_sps_fault_report_cfm &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l3ccl.o(.data)
</UL>
<P><STRONG><a name="[4d]"></a>fsm_ccl_sps_sensor_status_resp</STRONG> (Thumb, 204 bytes, Stack size 72 bytes, l3ccl.o(i.fsm_ccl_sps_sensor_status_resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = fsm_ccl_sps_sensor_status_resp &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l3ccl.o(.data)
</UL>
<P><STRONG><a name="[4a]"></a>fsm_ccl_stop_rcv</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, l3ccl.o(i.fsm_ccl_stop_rcv))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = fsm_ccl_stop_rcv &rArr; FsmSetState &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l3ccl.o(.data)
</UL>
<P><STRONG><a name="[47]"></a>fsm_ccl_task_entry</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, l3ccl.o(i.fsm_ccl_task_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = fsm_ccl_task_entry &rArr; FsmSetState &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l3ccl.o(.data)
</UL>
<P><STRONG><a name="[4b]"></a>fsm_ccl_time_out</STRONG> (Thumb, 292 bytes, Stack size 48 bytes, l3ccl.o(i.fsm_ccl_time_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320<LI>Call Chain = fsm_ccl_time_out &rArr; func_ccl_time_out_lock_work_active &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmGetState
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_time_out_period_event_report
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_time_out_lock_work_wait_door_for_open
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_time_out_lock_work_active
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_time_out_event_report_period_scan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l3ccl.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>fsm_com_do_nothing</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, vmfreeoslayer.o(i.fsm_com_do_nothing))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fsm_com_do_nothing
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l1timer_freeos.o(.data)
</UL>
<P><STRONG><a name="[46]"></a>fsm_dcmiaris_ccl_ctrl_cmd</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, l2dcmiaris.o(i.fsm_dcmiaris_ccl_ctrl_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = fsm_dcmiaris_ccl_ctrl_cmd &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2dcmiaris.o(.data)
</UL>
<P><STRONG><a name="[45]"></a>fsm_dcmiaris_ccl_sensor_status_req</STRONG> (Thumb, 250 bytes, Stack size 72 bytes, l2dcmiaris.o(i.fsm_dcmiaris_ccl_sensor_status_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = fsm_dcmiaris_ccl_sensor_status_req &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2dcmiaris.o(.data)
</UL>
<P><STRONG><a name="[41]"></a>fsm_dcmiaris_init</STRONG> (Thumb, 318 bytes, Stack size 40 bytes, l2dcmiaris.o(i.fsm_dcmiaris_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248<LI>Call Chain = fsm_dcmiaris_init &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_usleep
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_timer_start
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_dcmiaris_hw_init
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_dcmiaris_restart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2dcmiaris.o(.data)
</UL>
<P><STRONG><a name="[42]"></a>fsm_dcmiaris_restart</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, l2dcmiaris.o(i.fsm_dcmiaris_restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = fsm_dcmiaris_restart &rArr; fsm_dcmiaris_init &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_dcmiaris_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2dcmiaris.o(.data)
</UL>
<P><STRONG><a name="[43]"></a>fsm_dcmiaris_stop_rcv</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, l2dcmiaris.o(i.fsm_dcmiaris_stop_rcv))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = fsm_dcmiaris_stop_rcv &rArr; FsmSetState &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2dcmiaris.o(.data)
</UL>
<P><STRONG><a name="[40]"></a>fsm_dcmiaris_task_entry</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, l2dcmiaris.o(i.fsm_dcmiaris_task_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = fsm_dcmiaris_task_entry &rArr; FsmSetState &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2dcmiaris.o(.data)
</UL>
<P><STRONG><a name="[44]"></a>fsm_dcmiaris_time_out</STRONG> (Thumb, 244 bytes, Stack size 48 bytes, l2dcmiaris.o(i.fsm_dcmiaris_time_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = fsm_dcmiaris_time_out &rArr; func_dcmiaris_time_out_period_scan &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmGetState
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_dcmiaris_time_out_period_scan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2dcmiaris.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>fsm_didocap_ccl_ctrl_cmd</STRONG> (Thumb, 454 bytes, Stack size 48 bytes, l2didocap.o(i.fsm_didocap_ccl_ctrl_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = fsm_didocap_ccl_ctrl_cmd &rArr; ihu_timer_start &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_timer_stop
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_timer_start
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_didocap_ccl_work_mode_dl_cmd_open_lock
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_didocap_ccl_work_mode_dl_cmd_enable_lock
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_didocap_ccl_work_mode_dl_cmd_close_lock
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2didocap.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>fsm_didocap_ccl_sensor_status_req</STRONG> (Thumb, 480 bytes, Stack size 72 bytes, l2didocap.o(i.fsm_didocap_ccl_sensor_status_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = fsm_didocap_ccl_sensor_status_req &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2didocap.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>fsm_didocap_init</STRONG> (Thumb, 374 bytes, Stack size 40 bytes, l2didocap.o(i.fsm_didocap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248<LI>Call Chain = fsm_didocap_init &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_usleep
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_timer_start
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_didocap_hw_init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_restart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2didocap.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>fsm_didocap_restart</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, l2didocap.o(i.fsm_didocap_restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = fsm_didocap_restart &rArr; fsm_didocap_init &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2didocap.o(.data)
</UL>
<P><STRONG><a name="[14]"></a>fsm_didocap_stop_rcv</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, l2didocap.o(i.fsm_didocap_stop_rcv))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = fsm_didocap_stop_rcv &rArr; FsmSetState &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2didocap.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>fsm_didocap_task_entry</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, l2didocap.o(i.fsm_didocap_task_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = fsm_didocap_task_entry &rArr; FsmSetState &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2didocap.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>fsm_didocap_time_out</STRONG> (Thumb, 370 bytes, Stack size 48 bytes, l2didocap.o(i.fsm_didocap_time_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 1312<LI>Call Chain = fsm_didocap_time_out &rArr; func_didocap_time_out_external_trigger_period_scan &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmGetState
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_didocap_time_out_work_mode_period_scan
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_didocap_time_out_period_scan
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_didocap_time_out_external_trigger_period_scan
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2didocap.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>fsm_ethorion_init</STRONG> (Thumb, 304 bytes, Stack size 40 bytes, l2ethorion.o(i.fsm_ethorion_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248<LI>Call Chain = fsm_ethorion_init &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_usleep
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_timer_start
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ethorion_hw_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ethorion_restart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2ethorion.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>fsm_ethorion_restart</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, l2ethorion.o(i.fsm_ethorion_restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = fsm_ethorion_restart &rArr; fsm_ethorion_init &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ethorion_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2ethorion.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>fsm_ethorion_stop_rcv</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, l2ethorion.o(i.fsm_ethorion_stop_rcv))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = fsm_ethorion_stop_rcv &rArr; FsmSetState &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2ethorion.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>fsm_ethorion_task_entry</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, l2ethorion.o(i.fsm_ethorion_task_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = fsm_ethorion_task_entry &rArr; FsmSetState &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2ethorion.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>fsm_ethorion_time_out</STRONG> (Thumb, 244 bytes, Stack size 48 bytes, l2ethorion.o(i.fsm_ethorion_time_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = fsm_ethorion_time_out &rArr; func_ethorion_time_out_period_scan &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmGetState
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ethorion_time_out_period_scan
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2ethorion.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>fsm_i2caries_ccl_ctrl_cmd</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, l2i2caries.o(i.fsm_i2caries_ccl_ctrl_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = fsm_i2caries_ccl_ctrl_cmd &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2i2caries.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>fsm_i2caries_ccl_sensor_status_req</STRONG> (Thumb, 248 bytes, Stack size 72 bytes, l2i2caries.o(i.fsm_i2caries_ccl_sensor_status_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = fsm_i2caries_ccl_sensor_status_req &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2i2caries.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>fsm_i2caries_init</STRONG> (Thumb, 318 bytes, Stack size 40 bytes, l2i2caries.o(i.fsm_i2caries_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248<LI>Call Chain = fsm_i2caries_init &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_usleep
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_timer_start
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_i2caries_hw_init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_i2caries_restart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2i2caries.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>fsm_i2caries_restart</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, l2i2caries.o(i.fsm_i2caries_restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = fsm_i2caries_restart &rArr; fsm_i2caries_init &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_i2caries_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2i2caries.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>fsm_i2caries_stop_rcv</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, l2i2caries.o(i.fsm_i2caries_stop_rcv))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = fsm_i2caries_stop_rcv &rArr; FsmSetState &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2i2caries.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>fsm_i2caries_task_entry</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, l2i2caries.o(i.fsm_i2caries_task_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = fsm_i2caries_task_entry &rArr; FsmSetState &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2i2caries.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>fsm_i2caries_time_out</STRONG> (Thumb, 244 bytes, Stack size 48 bytes, l2i2caries.o(i.fsm_i2caries_time_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = fsm_i2caries_time_out &rArr; func_i2caries_time_out_period_scan &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmGetState
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_i2caries_time_out_period_scan
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2i2caries.o(.data)
</UL>
<P><STRONG><a name="[25]"></a>fsm_ledpisces_init</STRONG> (Thumb, 304 bytes, Stack size 40 bytes, l2ledpisces.o(i.fsm_ledpisces_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248<LI>Call Chain = fsm_ledpisces_init &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_usleep
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_timer_start
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ledpisces_hw_init
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ledpisces_restart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2ledpisces.o(.data)
</UL>
<P><STRONG><a name="[26]"></a>fsm_ledpisces_restart</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, l2ledpisces.o(i.fsm_ledpisces_restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = fsm_ledpisces_restart &rArr; fsm_ledpisces_init &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ledpisces_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2ledpisces.o(.data)
</UL>
<P><STRONG><a name="[27]"></a>fsm_ledpisces_stop_rcv</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, l2ledpisces.o(i.fsm_ledpisces_stop_rcv))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = fsm_ledpisces_stop_rcv &rArr; FsmSetState &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2ledpisces.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>fsm_ledpisces_task_entry</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, l2ledpisces.o(i.fsm_ledpisces_task_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = fsm_ledpisces_task_entry &rArr; FsmSetState &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2ledpisces.o(.data)
</UL>
<P><STRONG><a name="[28]"></a>fsm_ledpisces_time_out</STRONG> (Thumb, 244 bytes, Stack size 48 bytes, l2ledpisces.o(i.fsm_ledpisces_time_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = fsm_ledpisces_time_out &rArr; func_ledpisces_time_out_period_scan &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmGetState
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ledpisces_time_out_period_scan
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2ledpisces.o(.data)
</UL>
<P><STRONG><a name="[2a]"></a>fsm_spileo_init</STRONG> (Thumb, 302 bytes, Stack size 40 bytes, l2spileo.o(i.fsm_spileo_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248<LI>Call Chain = fsm_spileo_init &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_usleep
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_timer_start
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_spileo_hw_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spileo_restart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2spileo.o(.data)
</UL>
<P><STRONG><a name="[2e]"></a>fsm_spileo_l2frame_rcv</STRONG> (Thumb, 86 bytes, Stack size 536 bytes, l2spileo.o(i.fsm_spileo_l2frame_rcv))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = fsm_spileo_l2frame_rcv &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2spileo.o(.data)
</UL>
<P><STRONG><a name="[2b]"></a>fsm_spileo_restart</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, l2spileo.o(i.fsm_spileo_restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = fsm_spileo_restart &rArr; fsm_spileo_init &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spileo_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2spileo.o(.data)
</UL>
<P><STRONG><a name="[2c]"></a>fsm_spileo_stop_rcv</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, l2spileo.o(i.fsm_spileo_stop_rcv))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = fsm_spileo_stop_rcv &rArr; FsmSetState &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2spileo.o(.data)
</UL>
<P><STRONG><a name="[29]"></a>fsm_spileo_task_entry</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, l2spileo.o(i.fsm_spileo_task_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = fsm_spileo_task_entry &rArr; FsmSetState &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2spileo.o(.data)
</UL>
<P><STRONG><a name="[2d]"></a>fsm_spileo_time_out</STRONG> (Thumb, 244 bytes, Stack size 48 bytes, l2spileo.o(i.fsm_spileo_time_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = fsm_spileo_time_out &rArr; func_spileo_time_out_period_scan &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmGetState
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_spileo_time_out_period_scan
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2spileo.o(.data)
</UL>
<P><STRONG><a name="[3a]"></a>fsm_spsvirgo_ccl_close_door_report_send</STRONG> (Thumb, 822 bytes, Stack size 784 bytes, l2spsvirgo.o(i.fsm_spsvirgo_ccl_close_door_report_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 3040<LI>Call Chain = fsm_spsvirgo_ccl_close_door_report_send &rArr; ihu_vmmw_gprsmod_http_data_transmit_with_receive &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_pack
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_gprsmod_http_data_transmit_with_receive
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_sleep
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_dcmi_value
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_rssi_value
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_rsv2_value
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_rsv1_value
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_water_state
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_temp_value
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_smoke_state
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_shake_state
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_lock_open_state
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_humid_value
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_fall_state
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_door_open_state
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_bat_value
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_bat_state
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2spsvirgo.o(.data)
</UL>
<P><STRONG><a name="[38]"></a>fsm_spsvirgo_ccl_ctrl_cmd</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, l2spsvirgo.o(i.fsm_spsvirgo_ccl_ctrl_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = fsm_spsvirgo_ccl_ctrl_cmd &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2spsvirgo.o(.data)
</UL>
<P><STRONG><a name="[37]"></a>fsm_spsvirgo_ccl_event_report_send</STRONG> (Thumb, 870 bytes, Stack size 816 bytes, l2spsvirgo.o(i.fsm_spsvirgo_ccl_event_report_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 3072<LI>Call Chain = fsm_spsvirgo_ccl_event_report_send &rArr; ihu_vmmw_gprsmod_http_data_transmit_with_receive &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_pack
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_gprsmod_http_data_transmit_with_receive
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_sleep
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_dcmi_value
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_rssi_value
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_rsv2_value
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_rsv1_value
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_water_state
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_temp_value
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_smoke_state
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_shake_state
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_lock_open_state
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_humid_value
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_fall_state
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_door_open_state
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_bat_value
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_bat_state
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2spsvirgo.o(.data)
</UL>
<P><STRONG><a name="[39]"></a>fsm_spsvirgo_ccl_fault_report_send</STRONG> (Thumb, 830 bytes, Stack size 816 bytes, l2spsvirgo.o(i.fsm_spsvirgo_ccl_fault_report_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 3072<LI>Call Chain = fsm_spsvirgo_ccl_fault_report_send &rArr; ihu_vmmw_gprsmod_http_data_transmit_with_receive &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_pack
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_gprsmod_http_data_transmit_with_receive
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_sleep
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_dcmi_value
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_rssi_value
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_rsv2_value
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_rsv1_value
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_water_state
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_temp_value
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_smoke_state
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_shake_state
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_lock_open_state
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_humid_value
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_fall_state
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_door_open_state
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_bat_value
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_bat_state
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2spsvirgo.o(.data)
</UL>
<P><STRONG><a name="[35]"></a>fsm_spsvirgo_ccl_open_auth_inq</STRONG> (Thumb, 394 bytes, Stack size 736 bytes, l2spsvirgo.o(i.fsm_spsvirgo_ccl_open_auth_inq))
<BR><BR>[Stack]<UL><LI>Max Depth = 2992<LI>Call Chain = fsm_spsvirgo_ccl_open_auth_inq &rArr; ihu_vmmw_gprsmod_http_data_transmit_with_receive &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_pack
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_gprsmod_http_data_transmit_with_receive
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_sleep
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2spsvirgo.o(.data)
</UL>
<P><STRONG><a name="[36]"></a>fsm_spsvirgo_ccl_sensor_status_req</STRONG> (Thumb, 236 bytes, Stack size 72 bytes, l2spsvirgo.o(i.fsm_spsvirgo_ccl_sensor_status_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = fsm_spsvirgo_ccl_sensor_status_req &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_usleep
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2spsvirgo.o(.data)
</UL>
<P><STRONG><a name="[30]"></a>fsm_spsvirgo_init</STRONG> (Thumb, 322 bytes, Stack size 40 bytes, l2spsvirgo.o(i.fsm_spsvirgo_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248<LI>Call Chain = fsm_spsvirgo_init &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_usleep
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_timer_start
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_spsvirgo_hw_init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_restart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2spsvirgo.o(.data)
</UL>
<P><STRONG><a name="[34]"></a>fsm_spsvirgo_l2frame_rcv</STRONG> (Thumb, 154 bytes, Stack size 544 bytes, l2spsvirgo.o(i.fsm_spsvirgo_l2frame_rcv))
<BR><BR>[Stack]<UL><LI>Max Depth = 2304<LI>Call Chain = fsm_spsvirgo_l2frame_rcv &rArr; func_cloud_standard_xml_unpack &rArr; func_cloud_spsvirgo_ccl_msg_ccl_state_confirm_received_handle &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2spsvirgo.o(.data)
</UL>
<P><STRONG><a name="[31]"></a>fsm_spsvirgo_restart</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, l2spsvirgo.o(i.fsm_spsvirgo_restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = fsm_spsvirgo_restart &rArr; fsm_spsvirgo_init &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2spsvirgo.o(.data)
</UL>
<P><STRONG><a name="[32]"></a>fsm_spsvirgo_stop_rcv</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, l2spsvirgo.o(i.fsm_spsvirgo_stop_rcv))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = fsm_spsvirgo_stop_rcv &rArr; FsmSetState &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2spsvirgo.o(.data)
</UL>
<P><STRONG><a name="[2f]"></a>fsm_spsvirgo_task_entry</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, l2spsvirgo.o(i.fsm_spsvirgo_task_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = fsm_spsvirgo_task_entry &rArr; FsmSetState &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2spsvirgo.o(.data)
</UL>
<P><STRONG><a name="[33]"></a>fsm_spsvirgo_time_out</STRONG> (Thumb, 244 bytes, Stack size 48 bytes, l2spsvirgo.o(i.fsm_spsvirgo_time_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 1280<LI>Call Chain = fsm_spsvirgo_time_out &rArr; func_spsvirgo_time_out_period_scan &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmGetState
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_spsvirgo_time_out_period_scan
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l2spsvirgo.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>fsm_timer_init</STRONG> (Thumb, 408 bytes, Stack size 40 bytes, l1timer_freeos.o(i.fsm_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248<LI>Call Chain = fsm_timer_init &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_usleep
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_timer_hw_init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_timer_restart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l1timer_freeos.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>fsm_timer_restart</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, l1timer_freeos.o(i.fsm_timer_restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = fsm_timer_restart &rArr; fsm_timer_init &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_timer_init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l1timer_freeos.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>fsm_timer_stop_rcv</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, l1timer_freeos.o(i.fsm_timer_stop_rcv))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = fsm_timer_stop_rcv &rArr; FsmSetState &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l1timer_freeos.o(.data)
</UL>
<P><STRONG><a name="[0]"></a>fsm_timer_task_entry</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, l1timer_freeos.o(i.fsm_timer_task_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = fsm_timer_task_entry &rArr; FsmSetState &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l1timer_freeos.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>fsm_vmfo_heart_beat</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, l1vmfo.o(i.fsm_vmfo_heart_beat))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = fsm_vmfo_heart_beat &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l1vmfo.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>fsm_vmfo_init</STRONG> (Thumb, 462 bytes, Stack size 32 bytes, l1vmfo.o(i.fsm_vmfo_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = fsm_vmfo_init &rArr; ihu_timer_start &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_timer_start
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_vmfo_hw_init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_restart
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l1vmfo.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>fsm_vmfo_init_fb</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, l1vmfo.o(i.fsm_vmfo_init_fb))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = fsm_vmfo_init_fb &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_vmfo_init_caculate_all_fb
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l1vmfo.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>fsm_vmfo_restart</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, l1vmfo.o(i.fsm_vmfo_restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = fsm_vmfo_restart &rArr; fsm_vmfo_init &rArr; ihu_timer_start &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l1vmfo.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>fsm_vmfo_stop_rcv</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, l1vmfo.o(i.fsm_vmfo_stop_rcv))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = fsm_vmfo_stop_rcv &rArr; FsmSetState &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l1vmfo.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>fsm_vmfo_task_entry</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, l1vmfo.o(i.fsm_vmfo_task_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = fsm_vmfo_task_entry &rArr; FsmSetState &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l1vmfo.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>fsm_vmfo_time_out</STRONG> (Thumb, 246 bytes, Stack size 48 bytes, l1vmfo.o(i.fsm_vmfo_time_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 1256<LI>Call Chain = fsm_vmfo_time_out &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_vmfo_time_out_period_scan
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmGetState
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l1vmfo.o(.data)
</UL>
<P><STRONG><a name="[196]"></a>func_adclibra_hw_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, l2adclibra.o(i.func_adclibra_hw_init))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_adclibra_init
</UL>

<P><STRONG><a name="[198]"></a>func_adclibra_time_out_period_scan</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, l2adclibra.o(i.func_adclibra_time_out_period_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232<LI>Call Chain = func_adclibra_time_out_period_scan &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_adclibra_time_out
</UL>

<P><STRONG><a name="[199]"></a>func_canvela_hw_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, l2canvela.o(i.func_canvela_hw_init))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_canvela_init
</UL>

<P><STRONG><a name="[19a]"></a>func_canvela_time_out_period_scan</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, l2canvela.o(i.func_canvela_time_out_period_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232<LI>Call Chain = func_canvela_time_out_period_scan &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_canvela_time_out
</UL>

<P><STRONG><a name="[19e]"></a>func_ccl_close_all_sensor</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, l3ccl.o(i.func_ccl_close_all_sensor))
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_time_out_lock_work_active
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_sps_event_report_cfm
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_sps_cloud_fb
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_sps_close_door_report_cfm
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_init
</UL>

<P><STRONG><a name="[19d]"></a>func_ccl_hw_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, l3ccl.o(i.func_ccl_hw_init))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_init
</UL>

<P><STRONG><a name="[19c]"></a>func_ccl_open_all_sensor</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, l3ccl.o(i.func_ccl_open_all_sensor))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_time_out_event_report_period_scan
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_event_lock_trigger_to_work
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_event_fault_trigger_to_stop
</UL>

<P><STRONG><a name="[1a0]"></a>func_ccl_time_out_event_report_period_scan</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, l3ccl.o(i.func_ccl_time_out_event_report_period_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232<LI>Call Chain = func_ccl_time_out_event_report_period_scan &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_open_all_sensor
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_time_out
</UL>

<P><STRONG><a name="[1a1]"></a>func_ccl_time_out_lock_work_active</STRONG> (Thumb, 866 bytes, Stack size 64 bytes, l3ccl.o(i.func_ccl_time_out_lock_work_active))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = func_ccl_time_out_lock_work_active &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmSetState
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_timer_stop
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmGetState
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_close_all_sensor
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_time_out
</UL>

<P><STRONG><a name="[1a2]"></a>func_ccl_time_out_lock_work_wait_door_for_open</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, l3ccl.o(i.func_ccl_time_out_lock_work_wait_door_for_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240<LI>Call Chain = func_ccl_time_out_lock_work_wait_door_for_open &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_time_out
</UL>

<P><STRONG><a name="[19f]"></a>func_ccl_time_out_period_event_report</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, l3ccl.o(i.func_ccl_time_out_period_event_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232<LI>Call Chain = func_ccl_time_out_period_event_report &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_time_out
</UL>

<P><STRONG><a name="[1d0]"></a>func_cloud_spsvirgo_ccl_msg_ccl_battery_confirm_received_handle</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, l2spsvirgo.o(i.func_cloud_spsvirgo_ccl_msg_ccl_battery_confirm_received_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = func_cloud_spsvirgo_ccl_msg_ccl_battery_confirm_received_handle &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
</UL>

<P><STRONG><a name="[1d1]"></a>func_cloud_spsvirgo_ccl_msg_ccl_battery_req_received_handle</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, l2spsvirgo.o(i.func_cloud_spsvirgo_ccl_msg_ccl_battery_req_received_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = func_cloud_spsvirgo_ccl_msg_ccl_battery_req_received_handle &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
</UL>

<P><STRONG><a name="[1d2]"></a>func_cloud_spsvirgo_ccl_msg_ccl_ble_confirm_received_handle</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, l2spsvirgo.o(i.func_cloud_spsvirgo_ccl_msg_ccl_ble_confirm_received_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = func_cloud_spsvirgo_ccl_msg_ccl_ble_confirm_received_handle &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
</UL>

<P><STRONG><a name="[1d3]"></a>func_cloud_spsvirgo_ccl_msg_ccl_ble_req_received_handle</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, l2spsvirgo.o(i.func_cloud_spsvirgo_ccl_msg_ccl_ble_req_received_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = func_cloud_spsvirgo_ccl_msg_ccl_ble_req_received_handle &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
</UL>

<P><STRONG><a name="[1d4]"></a>func_cloud_spsvirgo_ccl_msg_ccl_door_confirm_received_handle</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, l2spsvirgo.o(i.func_cloud_spsvirgo_ccl_msg_ccl_door_confirm_received_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = func_cloud_spsvirgo_ccl_msg_ccl_door_confirm_received_handle &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
</UL>

<P><STRONG><a name="[1d5]"></a>func_cloud_spsvirgo_ccl_msg_ccl_door_req_received_handle</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, l2spsvirgo.o(i.func_cloud_spsvirgo_ccl_msg_ccl_door_req_received_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = func_cloud_spsvirgo_ccl_msg_ccl_door_req_received_handle &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
</UL>

<P><STRONG><a name="[1d6]"></a>func_cloud_spsvirgo_ccl_msg_ccl_fall_confirm_received_handle</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, l2spsvirgo.o(i.func_cloud_spsvirgo_ccl_msg_ccl_fall_confirm_received_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = func_cloud_spsvirgo_ccl_msg_ccl_fall_confirm_received_handle &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
</UL>

<P><STRONG><a name="[1d7]"></a>func_cloud_spsvirgo_ccl_msg_ccl_fall_req_received_handle</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, l2spsvirgo.o(i.func_cloud_spsvirgo_ccl_msg_ccl_fall_req_received_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = func_cloud_spsvirgo_ccl_msg_ccl_fall_req_received_handle &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
</UL>

<P><STRONG><a name="[1d8]"></a>func_cloud_spsvirgo_ccl_msg_ccl_gprs_confirm_received_handle</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, l2spsvirgo.o(i.func_cloud_spsvirgo_ccl_msg_ccl_gprs_confirm_received_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = func_cloud_spsvirgo_ccl_msg_ccl_gprs_confirm_received_handle &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
</UL>

<P><STRONG><a name="[1d9]"></a>func_cloud_spsvirgo_ccl_msg_ccl_gprs_req_received_handle</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, l2spsvirgo.o(i.func_cloud_spsvirgo_ccl_msg_ccl_gprs_req_received_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = func_cloud_spsvirgo_ccl_msg_ccl_gprs_req_received_handle &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
</UL>

<P><STRONG><a name="[1da]"></a>func_cloud_spsvirgo_ccl_msg_ccl_humid_confirm_received_handle</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, l2spsvirgo.o(i.func_cloud_spsvirgo_ccl_msg_ccl_humid_confirm_received_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = func_cloud_spsvirgo_ccl_msg_ccl_humid_confirm_received_handle &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
</UL>

<P><STRONG><a name="[1db]"></a>func_cloud_spsvirgo_ccl_msg_ccl_humid_req_received_handle</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, l2spsvirgo.o(i.func_cloud_spsvirgo_ccl_msg_ccl_humid_req_received_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = func_cloud_spsvirgo_ccl_msg_ccl_humid_req_received_handle &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
</UL>

<P><STRONG><a name="[1dc]"></a>func_cloud_spsvirgo_ccl_msg_ccl_lock_auth_resp_received_handle</STRONG> (Thumb, 246 bytes, Stack size 24 bytes, l2spsvirgo.o(i.func_cloud_spsvirgo_ccl_msg_ccl_lock_auth_resp_received_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232<LI>Call Chain = func_cloud_spsvirgo_ccl_msg_ccl_lock_auth_resp_received_handle &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
</UL>

<P><STRONG><a name="[1dd]"></a>func_cloud_spsvirgo_ccl_msg_ccl_lock_confirm_received_handle</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, l2spsvirgo.o(i.func_cloud_spsvirgo_ccl_msg_ccl_lock_confirm_received_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = func_cloud_spsvirgo_ccl_msg_ccl_lock_confirm_received_handle &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
</UL>

<P><STRONG><a name="[1de]"></a>func_cloud_spsvirgo_ccl_msg_ccl_lock_req_received_handle</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, l2spsvirgo.o(i.func_cloud_spsvirgo_ccl_msg_ccl_lock_req_received_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = func_cloud_spsvirgo_ccl_msg_ccl_lock_req_received_handle &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
</UL>

<P><STRONG><a name="[1df]"></a>func_cloud_spsvirgo_ccl_msg_ccl_rfid_confirm_received_handle</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, l2spsvirgo.o(i.func_cloud_spsvirgo_ccl_msg_ccl_rfid_confirm_received_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = func_cloud_spsvirgo_ccl_msg_ccl_rfid_confirm_received_handle &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
</UL>

<P><STRONG><a name="[1e0]"></a>func_cloud_spsvirgo_ccl_msg_ccl_rfid_req_received_handle</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, l2spsvirgo.o(i.func_cloud_spsvirgo_ccl_msg_ccl_rfid_req_received_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = func_cloud_spsvirgo_ccl_msg_ccl_rfid_req_received_handle &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
</UL>

<P><STRONG><a name="[1e1]"></a>func_cloud_spsvirgo_ccl_msg_ccl_shake_confirm_received_handle</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, l2spsvirgo.o(i.func_cloud_spsvirgo_ccl_msg_ccl_shake_confirm_received_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = func_cloud_spsvirgo_ccl_msg_ccl_shake_confirm_received_handle &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
</UL>

<P><STRONG><a name="[1e2]"></a>func_cloud_spsvirgo_ccl_msg_ccl_shake_req_received_handle</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, l2spsvirgo.o(i.func_cloud_spsvirgo_ccl_msg_ccl_shake_req_received_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = func_cloud_spsvirgo_ccl_msg_ccl_shake_req_received_handle &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
</UL>

<P><STRONG><a name="[1e3]"></a>func_cloud_spsvirgo_ccl_msg_ccl_smoke_confirm_received_handle</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, l2spsvirgo.o(i.func_cloud_spsvirgo_ccl_msg_ccl_smoke_confirm_received_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = func_cloud_spsvirgo_ccl_msg_ccl_smoke_confirm_received_handle &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
</UL>

<P><STRONG><a name="[1e4]"></a>func_cloud_spsvirgo_ccl_msg_ccl_smoke_req_received_handle</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, l2spsvirgo.o(i.func_cloud_spsvirgo_ccl_msg_ccl_smoke_req_received_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = func_cloud_spsvirgo_ccl_msg_ccl_smoke_req_received_handle &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
</UL>

<P><STRONG><a name="[1e5]"></a>func_cloud_spsvirgo_ccl_msg_ccl_state_confirm_received_handle</STRONG> (Thumb, 428 bytes, Stack size 24 bytes, l2spsvirgo.o(i.func_cloud_spsvirgo_ccl_msg_ccl_state_confirm_received_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232<LI>Call Chain = func_cloud_spsvirgo_ccl_msg_ccl_state_confirm_received_handle &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
</UL>

<P><STRONG><a name="[1e6]"></a>func_cloud_spsvirgo_ccl_msg_ccl_state_req_received_handle</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, l2spsvirgo.o(i.func_cloud_spsvirgo_ccl_msg_ccl_state_req_received_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = func_cloud_spsvirgo_ccl_msg_ccl_state_req_received_handle &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
</UL>

<P><STRONG><a name="[1e7]"></a>func_cloud_spsvirgo_ccl_msg_ccl_temp_confirm_received_handle</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, l2spsvirgo.o(i.func_cloud_spsvirgo_ccl_msg_ccl_temp_confirm_received_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = func_cloud_spsvirgo_ccl_msg_ccl_temp_confirm_received_handle &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
</UL>

<P><STRONG><a name="[1e8]"></a>func_cloud_spsvirgo_ccl_msg_ccl_temp_req_received_handle</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, l2spsvirgo.o(i.func_cloud_spsvirgo_ccl_msg_ccl_temp_req_received_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = func_cloud_spsvirgo_ccl_msg_ccl_temp_req_received_handle &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
</UL>

<P><STRONG><a name="[1e9]"></a>func_cloud_spsvirgo_ccl_msg_ccl_water_confirm_received_handle</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, l2spsvirgo.o(i.func_cloud_spsvirgo_ccl_msg_ccl_water_confirm_received_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = func_cloud_spsvirgo_ccl_msg_ccl_water_confirm_received_handle &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
</UL>

<P><STRONG><a name="[1ea]"></a>func_cloud_spsvirgo_ccl_msg_ccl_water_req_received_handle</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, l2spsvirgo.o(i.func_cloud_spsvirgo_ccl_msg_ccl_water_req_received_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = func_cloud_spsvirgo_ccl_msg_ccl_water_req_received_handle &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
</UL>

<P><STRONG><a name="[1eb]"></a>func_cloud_spsvirgo_ccl_msg_heart_beat_confirm_received_handle</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, l2spsvirgo.o(i.func_cloud_spsvirgo_ccl_msg_heart_beat_confirm_received_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = func_cloud_spsvirgo_ccl_msg_heart_beat_confirm_received_handle &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
</UL>

<P><STRONG><a name="[1ec]"></a>func_cloud_spsvirgo_ccl_msg_heart_beat_req_received_handle</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, l2spsvirgo.o(i.func_cloud_spsvirgo_ccl_msg_heart_beat_req_received_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = func_cloud_spsvirgo_ccl_msg_heart_beat_req_received_handle &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
</UL>

<P><STRONG><a name="[1ed]"></a>func_cloud_spsvirgo_ccl_msg_inventory_confirm_received_handle</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, l2spsvirgo.o(i.func_cloud_spsvirgo_ccl_msg_inventory_confirm_received_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = func_cloud_spsvirgo_ccl_msg_inventory_confirm_received_handle &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
</UL>

<P><STRONG><a name="[1ee]"></a>func_cloud_spsvirgo_ccl_msg_inventory_req_received_handle</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, l2spsvirgo.o(i.func_cloud_spsvirgo_ccl_msg_inventory_req_received_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = func_cloud_spsvirgo_ccl_msg_inventory_req_received_handle &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
</UL>

<P><STRONG><a name="[1ef]"></a>func_cloud_spsvirgo_ccl_msg_sw_package_confirm_received_handle</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, l2spsvirgo.o(i.func_cloud_spsvirgo_ccl_msg_sw_package_confirm_received_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = func_cloud_spsvirgo_ccl_msg_sw_package_confirm_received_handle &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
</UL>

<P><STRONG><a name="[1f0]"></a>func_cloud_spsvirgo_ccl_msg_sw_package_req_received_handle</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, l2spsvirgo.o(i.func_cloud_spsvirgo_ccl_msg_sw_package_req_received_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = func_cloud_spsvirgo_ccl_msg_sw_package_req_received_handle &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_standard_xml_unpack
</UL>

<P><STRONG><a name="[1c4]"></a>func_cloud_standard_xml_pack</STRONG> (Thumb, 656 bytes, Stack size 352 bytes, huixmlcodec.o(i.func_cloud_standard_xml_pack))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = func_cloud_standard_xml_pack &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_open_auth_inq
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_fault_report_send
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_event_report_send
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_close_door_report_send
</UL>

<P><STRONG><a name="[1c7]"></a>func_cloud_standard_xml_unpack</STRONG> (Thumb, 5108 bytes, Stack size 528 bytes, huixmlcodec.o(i.func_cloud_standard_xml_unpack))
<BR><BR>[Stack]<UL><LI>Max Depth = 1760<LI>Call Chain = func_cloud_standard_xml_unpack &rArr; func_cloud_spsvirgo_ccl_msg_ccl_state_confirm_received_handle &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_sw_package_req_received_handle
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_sw_package_confirm_received_handle
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_inventory_req_received_handle
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_inventory_confirm_received_handle
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_heart_beat_req_received_handle
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_heart_beat_confirm_received_handle
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_water_req_received_handle
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_water_confirm_received_handle
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_temp_req_received_handle
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_temp_confirm_received_handle
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_state_req_received_handle
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_state_confirm_received_handle
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_smoke_req_received_handle
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_smoke_confirm_received_handle
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_shake_req_received_handle
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_shake_confirm_received_handle
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_rfid_req_received_handle
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_rfid_confirm_received_handle
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_lock_req_received_handle
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_lock_confirm_received_handle
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_lock_auth_resp_received_handle
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_humid_req_received_handle
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_humid_confirm_received_handle
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_gprs_req_received_handle
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_gprs_confirm_received_handle
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_fall_req_received_handle
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_fall_confirm_received_handle
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_door_req_received_handle
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_door_confirm_received_handle
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_ble_req_received_handle
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_ble_confirm_received_handle
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_battery_req_received_handle
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_battery_confirm_received_handle
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_l2frame_rcv
</UL>

<P><STRONG><a name="[1a4]"></a>func_dcmiaris_hw_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, l2dcmiaris.o(i.func_dcmiaris_hw_init))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_dcmiaris_init
</UL>

<P><STRONG><a name="[1a5]"></a>func_dcmiaris_time_out_period_scan</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, l2dcmiaris.o(i.func_dcmiaris_time_out_period_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232<LI>Call Chain = func_dcmiaris_time_out_period_scan &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_dcmiaris_time_out
</UL>

<P><STRONG><a name="[1fa]"></a>func_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_recover</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, l2didocap.o(i.func_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_recover))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_didocap_time_out_external_trigger_period_scan
</UL>

<P><STRONG><a name="[1f4]"></a>func_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_status</STRONG> (Thumb, 262 bytes, Stack size 16 bytes, l2didocap.o(i.func_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = func_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_status &rArr; ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_lock_open_state
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_water_state
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_smoke_state
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_lock_open_state
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_fall_state
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_door_open_state
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_bat_state
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_didocap_time_out_external_trigger_period_scan
</UL>

<P><STRONG><a name="[1f5]"></a>func_didocap_ccl_sleep_mode_ul_scan_lock_trigger</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, l2didocap.o(i.func_didocap_ccl_sleep_mode_ul_scan_lock_trigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = func_didocap_ccl_sleep_mode_ul_scan_lock_trigger
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_didocap_time_out_external_trigger_period_scan
</UL>

<P><STRONG><a name="[1f6]"></a>func_didocap_ccl_sleep_mode_ul_scan_shake_trigger</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, l2didocap.o(i.func_didocap_ccl_sleep_mode_ul_scan_shake_trigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = func_didocap_ccl_sleep_mode_ul_scan_shake_trigger
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_didocap_time_out_external_trigger_period_scan
</UL>

<P><STRONG><a name="[1a8]"></a>func_didocap_ccl_work_mode_dl_cmd_close_lock</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, l2didocap.o(i.func_didocap_ccl_work_mode_dl_cmd_close_lock))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_ccl_ctrl_cmd
</UL>

<P><STRONG><a name="[1a6]"></a>func_didocap_ccl_work_mode_dl_cmd_enable_lock</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, l2didocap.o(i.func_didocap_ccl_work_mode_dl_cmd_enable_lock))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_ccl_ctrl_cmd
</UL>

<P><STRONG><a name="[1a7]"></a>func_didocap_ccl_work_mode_dl_cmd_open_lock</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, l2didocap.o(i.func_didocap_ccl_work_mode_dl_cmd_open_lock))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_ccl_ctrl_cmd
</UL>

<P><STRONG><a name="[1f7]"></a>func_didocap_ccl_work_mode_ul_scan_any_door_open</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, l2didocap.o(i.func_didocap_ccl_work_mode_ul_scan_any_door_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = func_didocap_ccl_work_mode_ul_scan_any_door_open
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_didocap_time_out_work_mode_period_scan
</UL>

<P><STRONG><a name="[1f8]"></a>func_didocap_ccl_work_mode_ul_scan_door_and_lock_status_change</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, l2didocap.o(i.func_didocap_ccl_work_mode_ul_scan_door_and_lock_status_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = func_didocap_ccl_work_mode_ul_scan_door_and_lock_status_change
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_didocap_time_out_work_mode_period_scan
</UL>

<P><STRONG><a name="[1f9]"></a>func_didocap_ccl_work_mode_ul_scan_enable_lock_trigger</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, l2didocap.o(i.func_didocap_ccl_work_mode_ul_scan_enable_lock_trigger))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = func_didocap_ccl_work_mode_ul_scan_enable_lock_trigger
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_didocap_time_out_work_mode_period_scan
</UL>

<P><STRONG><a name="[1a9]"></a>func_didocap_hw_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, l2didocap.o(i.func_didocap_hw_init))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_init
</UL>

<P><STRONG><a name="[1ab]"></a>func_didocap_time_out_external_trigger_period_scan</STRONG> (Thumb, 502 bytes, Stack size 56 bytes, l2didocap.o(i.func_didocap_time_out_external_trigger_period_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264<LI>Call Chain = func_didocap_time_out_external_trigger_period_scan &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_didocap_ccl_sleep_mode_ul_scan_shake_trigger
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_didocap_ccl_sleep_mode_ul_scan_lock_trigger
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_status
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_recover
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_time_out
</UL>

<P><STRONG><a name="[1aa]"></a>func_didocap_time_out_period_scan</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, l2didocap.o(i.func_didocap_time_out_period_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232<LI>Call Chain = func_didocap_time_out_period_scan &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_time_out
</UL>

<P><STRONG><a name="[1ac]"></a>func_didocap_time_out_work_mode_period_scan</STRONG> (Thumb, 416 bytes, Stack size 24 bytes, l2didocap.o(i.func_didocap_time_out_work_mode_period_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232<LI>Call Chain = func_didocap_time_out_work_mode_period_scan &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmGetState
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_didocap_ccl_work_mode_ul_scan_enable_lock_trigger
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_didocap_ccl_work_mode_ul_scan_door_and_lock_status_change
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_didocap_ccl_work_mode_ul_scan_any_door_open
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_time_out
</UL>

<P><STRONG><a name="[1ad]"></a>func_ethorion_hw_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, l2ethorion.o(i.func_ethorion_hw_init))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ethorion_init
</UL>

<P><STRONG><a name="[1ae]"></a>func_ethorion_time_out_period_scan</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, l2ethorion.o(i.func_ethorion_time_out_period_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232<LI>Call Chain = func_ethorion_time_out_period_scan &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ethorion_time_out
</UL>

<P><STRONG><a name="[1fc]"></a>func_gprsmod_clear_receive_buffer</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, vmmw_gprs.o(i.func_gprsmod_clear_receive_buffer))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_gprsmod_http_data_transmit_with_receive
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_gprsmod_get_rssi_value
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_send_AT_command
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_module_session_init
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_module_info_retrieve
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_gsm_info_retrieve
</UL>

<P><STRONG><a name="[1fb]"></a>func_gprsmod_gsm_info_retrieve</STRONG> (Thumb, 596 bytes, Stack size 40 bytes, vmmw_gprs.o(i.func_gprsmod_gsm_info_retrieve))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = func_gprsmod_gsm_info_retrieve &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_send_AT_command
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_clear_receive_buffer
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_module_session_init
</UL>

<P><STRONG><a name="[1fe]"></a>func_gprsmod_module_info_retrieve</STRONG> (Thumb, 520 bytes, Stack size 40 bytes, vmmw_gprs.o(i.func_gprsmod_module_info_retrieve))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = func_gprsmod_module_info_retrieve &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_send_AT_command
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_clear_receive_buffer
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_module_session_init
</UL>

<P><STRONG><a name="[1ff]"></a>func_gprsmod_module_session_init</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, vmmw_gprs.o(i.func_gprsmod_module_session_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = func_gprsmod_module_session_init &rArr; func_gprsmod_module_info_retrieve &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_usleep
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_send_AT_command
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_module_info_retrieve
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_gsm_info_retrieve
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_clear_receive_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_gprsmod_http_data_transmit_with_receive
</UL>

<P><STRONG><a name="[1fd]"></a>func_gprsmod_send_AT_command</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, vmmw_gprs.o(i.func_gprsmod_send_AT_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = func_gprsmod_send_AT_command &rArr; func_gprsmod_send_string &rArr; ihu_bsp_stm32_sps_gprs_send_data &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_usleep
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_sps_gprs_send_data
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_send_string
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_clear_receive_buffer
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_gprsmod_http_data_transmit_with_receive
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_gprsmod_get_rssi_value
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_module_session_init
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_module_info_retrieve
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_gsm_info_retrieve
</UL>

<P><STRONG><a name="[201]"></a>func_gprsmod_send_string</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, vmmw_gprs.o(i.func_gprsmod_send_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = func_gprsmod_send_string &rArr; ihu_bsp_stm32_sps_gprs_send_data &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_sps_gprs_send_data
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_send_AT_command
</UL>

<P><STRONG><a name="[1af]"></a>func_i2caries_hw_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, l2i2caries.o(i.func_i2caries_hw_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = func_i2caries_hw_init
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_i2c_slave_hw_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_i2caries_init
</UL>

<P><STRONG><a name="[1b0]"></a>func_i2caries_time_out_period_scan</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, l2i2caries.o(i.func_i2caries_time_out_period_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232<LI>Call Chain = func_i2caries_time_out_period_scan &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_i2caries_time_out
</UL>

<P><STRONG><a name="[1b1]"></a>func_ledpisces_hw_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, l2ledpisces.o(i.func_ledpisces_hw_init))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ledpisces_init
</UL>

<P><STRONG><a name="[1b2]"></a>func_ledpisces_time_out_period_scan</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, l2ledpisces.o(i.func_ledpisces_time_out_period_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232<LI>Call Chain = func_ledpisces_time_out_period_scan &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_led_f2board_timer_ind_negation
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_led_f2board_negation
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ledpisces_time_out
</UL>

<P><STRONG><a name="[1b3]"></a>func_spileo_hw_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, l2spileo.o(i.func_spileo_hw_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = func_spileo_hw_init
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_spi_slave_hw_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spileo_init
</UL>

<P><STRONG><a name="[1b4]"></a>func_spileo_time_out_period_scan</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, l2spileo.o(i.func_spileo_time_out_period_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232<LI>Call Chain = func_spileo_time_out_period_scan &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spileo_time_out
</UL>

<P><STRONG><a name="[1c6]"></a>func_spsvirgo_hw_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, l2spsvirgo.o(i.func_spsvirgo_hw_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = func_spsvirgo_hw_init
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_sps_slave_hw_init
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_init
</UL>

<P><STRONG><a name="[1c8]"></a>func_spsvirgo_time_out_period_scan</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, l2spsvirgo.o(i.func_spsvirgo_time_out_period_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232<LI>Call Chain = func_spsvirgo_time_out_period_scan &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_bsp_stm32_sps_gprs_send_data
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_time_out
</UL>

<P><STRONG><a name="[1c9]"></a>func_timer_hw_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, l1timer_freeos.o(i.func_timer_hw_init))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_timer_init
</UL>

<P><STRONG><a name="[c1]"></a>func_timer_routine_handler_1s</STRONG> (Thumb, 434 bytes, Stack size 32 bytes, l1timer_freeos.o(i.func_timer_routine_handler_1s))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240<LI>Call Chain = func_timer_routine_handler_1s &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Address Reference Count : 1]<UL><LI> l1timer_freeos.o(i.fsm_timer_init)
</UL>
<P><STRONG><a name="[207]"></a>func_vmfo_heart_caculate_all_received</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, l1vmfo.o(i.func_vmfo_heart_caculate_all_received))
<BR><BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_vmfo_time_out_period_scan
</UL>

<P><STRONG><a name="[1cd]"></a>func_vmfo_hw_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, l1vmfo.o(i.func_vmfo_hw_init))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_init
</UL>

<P><STRONG><a name="[1ce]"></a>func_vmfo_init_caculate_all_fb</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, l1vmfo.o(i.func_vmfo_init_caculate_all_fb))
<BR><BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_init_fb
</UL>

<P><STRONG><a name="[1cf]"></a>func_vmfo_time_out_period_scan</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, l1vmfo.o(i.func_vmfo_time_out_period_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = func_vmfo_time_out_period_scan
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_vmfo_heart_caculate_all_received
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_time_out
</UL>

<P><STRONG><a name="[261]"></a>getRunTimeCounterValue</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, freertos.o(i.getRunTimeCounterValue))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[202]"></a>ihu_bsp_stm32_i2c_slave_hw_init</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, bsp_i2c.o(i.ihu_bsp_stm32_i2c_slave_hw_init))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_i2caries_hw_init
</UL>

<P><STRONG><a name="[203]"></a>ihu_bsp_stm32_led_f2board_negation</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp_led.o(i.ihu_bsp_stm32_led_f2board_negation))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ihu_bsp_stm32_led_f2board_negation
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ledpisces_time_out_period_scan
</UL>

<P><STRONG><a name="[204]"></a>ihu_bsp_stm32_led_f2board_timer_ind_negation</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp_led.o(i.ihu_bsp_stm32_led_f2board_timer_ind_negation))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ihu_bsp_stm32_led_f2board_timer_ind_negation
</UL>
<BR>[Calls]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_TogglePin
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ledpisces_time_out_period_scan
</UL>

<P><STRONG><a name="[205]"></a>ihu_bsp_stm32_spi_slave_hw_init</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, bsp_spi.o(i.ihu_bsp_stm32_spi_slave_hw_init))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_spileo_hw_init
</UL>

<P><STRONG><a name="[200]"></a>ihu_bsp_stm32_sps_gprs_send_data</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, bsp_usart.o(i.ihu_bsp_stm32_sps_gprs_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ihu_bsp_stm32_sps_gprs_send_data &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_send_string
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_send_AT_command
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_spsvirgo_time_out_period_scan
</UL>

<P><STRONG><a name="[166]"></a>ihu_bsp_stm32_sps_print_send_data</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, bsp_usart.o(i.ihu_bsp_stm32_sps_print_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ihu_bsp_stm32_sps_print_send_data &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
</UL>

<P><STRONG><a name="[206]"></a>ihu_bsp_stm32_sps_slave_hw_init</STRONG> (Thumb, 206 bytes, Stack size 0 bytes, bsp_usart.o(i.ihu_bsp_stm32_sps_slave_hw_init))
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_spsvirgo_hw_init
</UL>

<P><STRONG><a name="[1bb]"></a>ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_bat_state</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, l2didocap.o(i.ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_bat_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_bat_state
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_fault_report_send
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_event_report_send
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_close_door_report_send
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_status
</UL>

<P><STRONG><a name="[1be]"></a>ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_bat_value</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, l2didocap.o(i.ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_bat_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_bat_value
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_fault_report_send
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_event_report_send
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_close_door_report_send
</UL>

<P><STRONG><a name="[1c2]"></a>ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_dcmi_value</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, l2dcmiaris.o(i.ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_dcmi_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_dcmi_value
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_fault_report_send
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_event_report_send
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_close_door_report_send
</UL>

<P><STRONG><a name="[1b6]"></a>ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_door_open_state</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, l2didocap.o(i.ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_door_open_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_door_open_state
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_fault_report_send
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_event_report_send
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_close_door_report_send
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_status
</UL>

<P><STRONG><a name="[1b8]"></a>ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_fall_state</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, l2didocap.o(i.ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_fall_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_fall_state
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_fault_report_send
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_event_report_send
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_close_door_report_send
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_status
</UL>

<P><STRONG><a name="[1bd]"></a>ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_humid_value</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, l2didocap.o(i.ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_humid_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_humid_value
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_fault_report_send
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_event_report_send
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_close_door_report_send
</UL>

<P><STRONG><a name="[1b5]"></a>ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_lock_open_state</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, l2didocap.o(i.ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_lock_open_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_lock_open_state
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_fault_report_send
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_event_report_send
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_close_door_report_send
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_status
</UL>

<P><STRONG><a name="[1c1]"></a>ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_rssi_value</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, l2spsvirgo.o(i.ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_rssi_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_rssi_value &rArr; ihu_vmmw_gprsmod_get_rssi_value &rArr; func_gprsmod_send_AT_command &rArr; func_gprsmod_send_string &rArr; ihu_bsp_stm32_sps_gprs_send_data &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_gprsmod_get_rssi_value
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_fault_report_send
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_event_report_send
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_close_door_report_send
</UL>

<P><STRONG><a name="[1bf]"></a>ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_rsv1_value</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, l2i2caries.o(i.ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_rsv1_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_rsv1_value
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_fault_report_send
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_event_report_send
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_close_door_report_send
</UL>

<P><STRONG><a name="[1c0]"></a>ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_rsv2_value</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, l2i2caries.o(i.ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_rsv2_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_rsv2_value
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_fault_report_send
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_event_report_send
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_close_door_report_send
</UL>

<P><STRONG><a name="[1b9]"></a>ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_shake_state</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, l2didocap.o(i.ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_shake_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_shake_state
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_fault_report_send
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_event_report_send
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_close_door_report_send
</UL>

<P><STRONG><a name="[1ba]"></a>ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_smoke_state</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, l2didocap.o(i.ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_smoke_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_smoke_state
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_fault_report_send
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_event_report_send
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_close_door_report_send
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_status
</UL>

<P><STRONG><a name="[1bc]"></a>ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_temp_value</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, l2didocap.o(i.ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_temp_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_temp_value
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_fault_report_send
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_event_report_send
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_close_door_report_send
</UL>

<P><STRONG><a name="[1b7]"></a>ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_water_state</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, l2didocap.o(i.ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_water_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_water_state
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_fault_report_send
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_event_report_send
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_close_door_report_send
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_status
</UL>

<P><STRONG><a name="[20a]"></a>ihu_message_queue_create</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, vmfreeoslayer.o(i.ihu_message_queue_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = ihu_message_queue_create &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strerror
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_task_create_and_run
</UL>

<P><STRONG><a name="[f6]"></a>ihu_message_rcv</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, vmfreeoslayer.o(i.ihu_message_rcv))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = ihu_message_rcv &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_usleep
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strerror
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmProcessingLaunch
</UL>

<P><STRONG><a name="[104]"></a>ihu_message_send</STRONG> (Thumb, 3014 bytes, Stack size 664 bytes, vmfreeoslayer.o(i.ihu_message_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_taskid_to_string
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_msgid_to_string
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strerror
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_timer_routine_handler_1s
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_timer_init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxCpltCallback
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_adclibra_time_out_period_scan
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_adclibra_time_out
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_adclibra_init
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_state_confirm_received_handle
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_cloud_spsvirgo_ccl_msg_ccl_lock_auth_resp_received_handle
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vmmw_gprsmod_http_data_transmit_with_receive
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_time_out
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vm_send_init_msg_to_app_task
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_canvela_time_out_period_scan
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_canvela_time_out
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_canvela_init
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_spsvirgo_time_out_period_scan
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_time_out
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_init
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_sensor_status_req
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_open_auth_inq
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_fault_report_send
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_event_report_send
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_close_door_report_send
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_spileo_time_out_period_scan
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spileo_time_out
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spileo_init
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ledpisces_time_out_period_scan
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ledpisces_time_out
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ledpisces_init
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_i2caries_time_out_period_scan
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_i2caries_time_out
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_i2caries_init
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_i2caries_ccl_sensor_status_req
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ethorion_time_out_period_scan
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ethorion_time_out
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ethorion_init
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_didocap_time_out_work_mode_period_scan
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_didocap_time_out_period_scan
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_didocap_time_out_external_trigger_period_scan
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_time_out
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_init
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_ccl_sensor_status_req
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_time_out_period_event_report
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_time_out_lock_work_wait_door_for_open
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_time_out_lock_work_active
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_time_out_event_report_period_scan
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_time_out
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_sps_sensor_status_resp
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_sps_cloud_fb
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_sps_close_door_report_cfm
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_lock_and_door_close_event
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_init
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_i2c_sensor_status_resp
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_event_lock_trigger_to_work
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_event_fault_trigger_to_stop
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_dido_sensor_status_resp
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_dcmi_sensor_status_resp
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_dcmiaris_time_out_period_scan
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_dcmiaris_time_out
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_dcmiaris_init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_dcmiaris_ccl_sensor_status_req
</UL>

<P><STRONG><a name="[210]"></a>ihu_msgid_to_string</STRONG> (Thumb, 126 bytes, Stack size 88 bytes, vmfreeoslayer.o(i.ihu_msgid_to_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
</UL>

<P><STRONG><a name="[f7]"></a>ihu_sleep</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, vmfreeoslayer.o(i.ihu_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ihu_sleep &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmProcessingLaunch
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_open_auth_inq
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_fault_report_send
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_event_report_send
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_close_door_report_send
</UL>

<P><STRONG><a name="[212]"></a>ihu_system_task_init_call</STRONG> (Thumb, 294 bytes, Stack size 24 bytes, vmfreeoslayer.o(i.ihu_system_task_init_call))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = ihu_system_task_init_call &rArr; ihu_task_create_and_run &rArr; FsmAddNew &rArr; FsmSetState &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_task_create_and_run
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_task_create_all
</UL>

<P><STRONG><a name="[214]"></a>ihu_task_create</STRONG> (Thumb, 214 bytes, Stack size 48 bytes, vmfreeoslayer.o(i.ihu_task_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = ihu_task_create &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strerror
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_task_create_and_run
</UL>

<P><STRONG><a name="[216]"></a>ihu_task_create_all</STRONG> (Thumb, 308 bytes, Stack size 8 bytes, vmfreeoslayer.o(i.ihu_task_create_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240<LI>Call Chain = ihu_task_create_all &rArr; ihu_vm_send_init_msg_to_app_task &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vm_send_init_msg_to_app_task
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_system_task_init_call
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vm_main
</UL>

<P><STRONG><a name="[213]"></a>ihu_task_create_and_run</STRONG> (Thumb, 402 bytes, Stack size 24 bytes, vmfreeoslayer.o(i.ihu_task_create_and_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = ihu_task_create_and_run &rArr; FsmAddNew &rArr; FsmSetState &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_task_create
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_queue_create
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmAddNew
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_system_task_init_call
</UL>

<P><STRONG><a name="[20f]"></a>ihu_taskid_to_string</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, vmfreeoslayer.o(i.ihu_taskid_to_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = ihu_taskid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
</UL>

<P><STRONG><a name="[197]"></a>ihu_timer_start</STRONG> (Thumb, 566 bytes, Stack size 32 bytes, l1timer_freeos.o(i.ihu_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = ihu_timer_start &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_adclibra_init
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_vmfo_init
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_canvela_init
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_init
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spileo_init
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ledpisces_init
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_i2caries_init
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ethorion_init
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_init
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_ccl_ctrl_cmd
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_sps_cloud_fb
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_event_lock_trigger_to_work
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_dido_event_status_update
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_dcmiaris_init
</UL>

<P><STRONG><a name="[19b]"></a>ihu_timer_stop</STRONG> (Thumb, 442 bytes, Stack size 24 bytes, l1timer_freeos.o(i.ihu_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = ihu_timer_stop &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_ccl_ctrl_cmd
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_ccl_time_out_lock_work_active
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_sps_cloud_fb
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_sps_close_door_report_cfm
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_dido_door_open_event
</UL>

<P><STRONG><a name="[195]"></a>ihu_usleep</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, vmfreeoslayer.o(i.ihu_usleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ihu_usleep &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_timer_init
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_adclibra_init
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_send_AT_command
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_module_session_init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_rcv
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_canvela_init
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_init
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_sensor_status_req
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spileo_init
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ledpisces_init
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_i2caries_init
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ethorion_init
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_didocap_init
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_ccl_init
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_dcmiaris_init
</UL>

<P><STRONG><a name="[218]"></a>ihu_vm_main</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, vmfreeoslayer.o(i.ihu_vm_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1248<LI>Call Chain = ihu_vm_main &rArr; ihu_task_create_all &rArr; ihu_vm_send_init_msg_to_app_task &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vm_system_init
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_task_create_all
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[217]"></a>ihu_vm_send_init_msg_to_app_task</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, vmfreeoslayer.o(i.ihu_vm_send_init_msg_to_app_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232<LI>Call Chain = ihu_vm_send_init_msg_to_app_task &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_task_create_all
</UL>

<P><STRONG><a name="[219]"></a>ihu_vm_system_init</STRONG> (Thumb, 582 bytes, Stack size 24 bytes, vmfreeoslayer.o(i.ihu_vm_system_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = ihu_vm_system_init &rArr; FsmInit &rArr; IhuDebugPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FsmInit
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vm_main
</UL>

<P><STRONG><a name="[209]"></a>ihu_vmmw_gprsmod_get_rssi_value</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, vmmw_gprs.o(i.ihu_vmmw_gprsmod_get_rssi_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ihu_vmmw_gprsmod_get_rssi_value &rArr; func_gprsmod_send_AT_command &rArr; func_gprsmod_send_string &rArr; ihu_bsp_stm32_sps_gprs_send_data &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_send_AT_command
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_clear_receive_buffer
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_didocap_ccl_sleep_and_fault_mode_ul_scan_illegal_rssi_value
</UL>

<P><STRONG><a name="[1c5]"></a>ihu_vmmw_gprsmod_http_data_transmit_with_receive</STRONG> (Thumb, 730 bytes, Stack size 1048 bytes, vmmw_gprs.o(i.ihu_vmmw_gprsmod_http_data_transmit_with_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 2256<LI>Call Chain = ihu_vmmw_gprsmod_http_data_transmit_with_receive &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintId
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_send_AT_command
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_module_session_init
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;func_gprsmod_clear_receive_buffer
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_open_auth_inq
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_fault_report_send
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_event_report_send
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_spsvirgo_ccl_close_door_report_send
</UL>

<P><STRONG><a name="[b3]"></a>main</STRONG> (Thumb, 310 bytes, Stack size 56 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1304<LI>Call Chain = main &rArr; ihu_vm_main &rArr; ihu_task_create_all &rArr; ihu_vm_send_init_msg_to_app_task &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive_IT
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Slave_Receive_IT
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Receive_IT
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerCreate
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageCreate
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vm_main
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART6_UART_Init
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART5_Init
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM7_Init
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM6_Init
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_RTC_Init
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_NVIC_Init
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN2_Init
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_CAN1_Init
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC3_Init
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC2_Init
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[187]"></a>osDelay</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, cmsis_os.o(i.osDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osDelay &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartTask02
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartDefaultTask
</UL>

<P><STRONG><a name="[223]"></a>osKernelStart</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmsis_os.o(i.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = osKernelStart &rArr; vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[222]"></a>osMessageCreate</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, cmsis_os.o(i.osMessageCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = osMessageCreate &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[188]"></a>osSystickHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cmsis_os.o(i.osSystickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osSystickHandler &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[221]"></a>osThreadCreate</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, cmsis_os.o(i.osThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = osThreadCreate &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeFreeRtosPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[220]"></a>osTimerCreate</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, cmsis_os.o(i.osTimerCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = osTimerCreate &rArr; xTimerCreate &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[22b]"></a>pvPortMalloc</STRONG> (Thumb, 264 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationMallocFailedHook
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAllocateTCBAndStack
</UL>

<P><STRONG><a name="[267]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(i.pvTaskIncrementMutexHeldCount))
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[26b]"></a>pxPortInitialiseStack</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[236]"></a>uxListRemove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[23c]"></a>vApplicationIdleHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, freertos.o(i.vApplicationIdleHook))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[251]"></a>vApplicationMallocFailedHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, freertos.o(i.vApplicationMallocFailedHook))
<BR><BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[262]"></a>vApplicationStackOverflowHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, freertos.o(i.vApplicationStackOverflowHook))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[26d]"></a>vApplicationTickHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, freertos.o(i.vApplicationTickHook))
<BR><BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[22f]"></a>vListInitialise</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>

<P><STRONG><a name="[240]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTCBVariables
</UL>

<P><STRONG><a name="[229]"></a>vListInsert</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[25b]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[22e]"></a>vPortEnterCritical</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
</UL>

<P><STRONG><a name="[232]"></a>vPortExitCritical</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortClearInterruptMask
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
</UL>

<P><STRONG><a name="[22c]"></a>vPortFree</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAllocateTCBAndStack
</UL>

<P><STRONG><a name="[263]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[23e]"></a>vPortSuppressTicksAndSleep</STRONG> (Thumb, 328 bytes, Stack size 32 bytes, port.o(i.vPortSuppressTicksAndSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vPortSuppressTicksAndSleep &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStepTick
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskConfirmSleepModeStatus
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreSleepProcessing
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostSleepProcessing
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[257]"></a>vPortValidateInterruptPriority</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, port.o(i.vPortValidateInterruptPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortGetIPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[23b]"></a>vPortYield</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, port.o(i.vPortYield))
<BR><BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[231]"></a>vQueueAddToRegistry</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, queue.o(i.vQueueAddToRegistry))
<BR><BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[249]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, queue.o(i.vQueueWaitForMessageRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[211]"></a>vTaskDelay</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_usleep
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_sleep
</UL>

<P><STRONG><a name="[24e]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[25a]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[259]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, tasks.o(i.vTaskPlaceOnEventListRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[25c]"></a>vTaskPriorityInherit</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, tasks.o(i.vTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[25d]"></a>vTaskSetTimeOutState</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tasks.o(i.vTaskSetTimeOutState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vTaskSetTimeOutState
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[224]"></a>vTaskStartScheduler</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configureTimerForRunTimeStats
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[256]"></a>vTaskStepTick</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, tasks.o(i.vTaskStepTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vTaskStepTick
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
</UL>

<P><STRONG><a name="[234]"></a>vTaskSuspendAll</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[cb]"></a>vTaskSwitchContext</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getRunTimeCounterValue
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[260]"></a>xPortStartScheduler</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[226]"></a>xPortSysTickHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, port.o(i.xPortSysTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortClearInterruptMask
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSystickHandler
</UL>

<P><STRONG><a name="[21a]"></a>xQueueCreateMutex</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, queue.o(i.xQueueCreateMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_vm_system_init
</UL>

<P><STRONG><a name="[20b]"></a>xQueueGenericCreate</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageCreate
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_queue_create
</UL>

<P><STRONG><a name="[20d]"></a>xQueueGenericReceive</STRONG> (Thumb, 346 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_rcv
</UL>

<P><STRONG><a name="[266]"></a>xQueueGenericReset</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[20e]"></a>xQueueGenericSend</STRONG> (Thumb, 322 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_message_send
</UL>

<P><STRONG><a name="[269]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, queue.o(i.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortClearInterruptMask
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[167]"></a>xQueueGiveMutexRecursive</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, queue.o(i.xQueueGiveMutexRecursive))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueGiveMutexRecursive &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
</UL>

<P><STRONG><a name="[165]"></a>xQueueTakeMutexRecursive</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, queue.o(i.xQueueTakeMutexRecursive))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuErrorPrintFo
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IhuDebugPrintFo
</UL>

<P><STRONG><a name="[268]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xTaskCheckForTimeOut &rArr; vTaskSetTimeOutState
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[215]"></a>xTaskGenericCreate</STRONG> (Thumb, 288 bytes, Stack size 56 bytes, tasks.o(i.xTaskGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTCBVariables
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAllocateTCBAndStack
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ihu_task_create
</UL>

<P><STRONG><a name="[26a]"></a>xTaskGetCurrentTaskHandle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetCurrentTaskHandle))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
</UL>

<P><STRONG><a name="[225]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSystickHandler
</UL>

<P><STRONG><a name="[1cb]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_timer_init
</UL>

<P><STRONG><a name="[265]"></a>xTaskIncrementTick</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationTickHook
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>

<P><STRONG><a name="[23a]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[24d]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[235]"></a>xTaskResumeAll</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[1ca]"></a>xTimerCreate</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, timers.o(i.xTimerCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTimerCreate &rArr; prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerCreate
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_timer_init
</UL>

<P><STRONG><a name="[25e]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, timers.o(i.xTimerCreateTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = xTimerCreateTimerTask &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[1cc]"></a>xTimerGenericCommand</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, timers.o(i.xTimerGenericCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsm_timer_init
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[108]"></a>DMA_CalcBaseAndBitshift</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f2xx_hal_dma.o(i.DMA_CalcBaseAndBitshift))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[107]"></a>DMA_CheckFifoParam</STRONG> (Thumb, 186 bytes, Stack size 0 bytes, stm32f2xx_hal_dma.o(i.DMA_CheckFifoParam))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[b9]"></a>SPI_2linesRxISR_16BIT</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f2xx_hal_spi.o(i.SPI_2linesRxISR_16BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = SPI_2linesRxISR_16BIT &rArr; SPI_CloseRxTx_ISR &rArr; HAL_SPI_ErrorCallback &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRxTx_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f2xx_hal_spi.o(i.HAL_SPI_TransmitReceive_IT)
</UL>
<P><STRONG><a name="[bb]"></a>SPI_2linesRxISR_8BIT</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32f2xx_hal_spi.o(i.SPI_2linesRxISR_8BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = SPI_2linesRxISR_8BIT &rArr; SPI_CloseRxTx_ISR &rArr; HAL_SPI_ErrorCallback &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRxTx_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f2xx_hal_spi.o(i.HAL_SPI_TransmitReceive_IT)
</UL>
<P><STRONG><a name="[ba]"></a>SPI_2linesTxISR_16BIT</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f2xx_hal_spi.o(i.SPI_2linesTxISR_16BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = SPI_2linesTxISR_16BIT &rArr; SPI_CloseRxTx_ISR &rArr; HAL_SPI_ErrorCallback &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRxTx_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f2xx_hal_spi.o(i.HAL_SPI_TransmitReceive_IT)
</UL>
<P><STRONG><a name="[bc]"></a>SPI_2linesTxISR_8BIT</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32f2xx_hal_spi.o(i.SPI_2linesTxISR_8BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = SPI_2linesTxISR_8BIT &rArr; SPI_CloseRxTx_ISR &rArr; HAL_SPI_ErrorCallback &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRxTx_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f2xx_hal_spi.o(i.HAL_SPI_TransmitReceive_IT)
</UL>
<P><STRONG><a name="[182]"></a>SPI_CheckFlag_BSY</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, stm32f2xx_hal_spi.o(i.SPI_CheckFlag_BSY))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRxTx_ISR
</UL>

<P><STRONG><a name="[181]"></a>SPI_CloseRxTx_ISR</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, stm32f2xx_hal_spi.o(i.SPI_CloseRxTx_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = SPI_CloseRxTx_ISR &rArr; HAL_SPI_ErrorCallback &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TxRxCpltCallback
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_RxCpltCallback
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CheckFlag_BSY
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_2linesTxISR_8BIT
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_2linesTxISR_16BIT
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_2linesRxISR_8BIT
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_2linesRxISR_16BIT
</UL>

<P><STRONG><a name="[186]"></a>SPI_CloseRx_ISR</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, stm32f2xx_hal_spi.o(i.SPI_CloseRx_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = SPI_CloseRx_ISR &rArr; HAL_SPI_ErrorCallback &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_RxCpltCallback
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RxISR_8BIT
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RxISR_16BIT
</UL>

<P><STRONG><a name="[b6]"></a>SPI_DMAAbortOnError</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, stm32f2xx_hal_spi.o(i.SPI_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = SPI_DMAAbortOnError &rArr; HAL_SPI_ErrorCallback &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f2xx_hal_spi.o(i.HAL_SPI_IRQHandler)
</UL>
<P><STRONG><a name="[b7]"></a>SPI_RxISR_16BIT</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f2xx_hal_spi.o(i.SPI_RxISR_16BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = SPI_RxISR_16BIT &rArr; SPI_CloseRx_ISR &rArr; HAL_SPI_ErrorCallback &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRx_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f2xx_hal_spi.o(i.HAL_SPI_Receive_IT)
</UL>
<P><STRONG><a name="[b8]"></a>SPI_RxISR_8BIT</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f2xx_hal_spi.o(i.SPI_RxISR_8BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = SPI_RxISR_8BIT &rArr; SPI_CloseRx_ISR &rArr; HAL_SPI_ErrorCallback &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseRx_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f2xx_hal_spi.o(i.HAL_SPI_Receive_IT)
</UL>
<P><STRONG><a name="[183]"></a>SPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, stm32f2xx_hal_spi.o(i.SPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CheckFlag_BSY
</UL>

<P><STRONG><a name="[125]"></a>NVIC_GetPriorityGrouping</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_hal_cortex.o(i.NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[126]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f2xx_hal_cortex.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[fb]"></a>ADC_Init</STRONG> (Thumb, 362 bytes, Stack size 0 bytes, stm32f2xx_hal_adc.o(i.ADC_Init))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[be]"></a>I2C_DMAAbort</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, stm32f2xx_hal_i2c.o(i.I2C_DMAAbort))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_DMAAbort
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ErrorCallback
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_AbortCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f2xx_hal_i2c.o(i.I2C_ITError)
</UL>
<P><STRONG><a name="[10b]"></a>I2C_ITError</STRONG> (Thumb, 358 bytes, Stack size 16 bytes, stm32f2xx_hal_i2c.o(i.I2C_ITError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_ITError
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ListenCpltCallback
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ErrorCallback
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_AbortCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ER_IRQHandler
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_STOPF
</UL>

<P><STRONG><a name="[113]"></a>I2C_MasterReceive_BTF</STRONG> (Thumb, 248 bytes, Stack size 16 bytes, stm32f2xx_hal_i2c.o(i.I2C_MasterReceive_BTF))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_MasterReceive_BTF
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MemRxCpltCallback
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MasterRxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[112]"></a>I2C_MasterReceive_RXNE</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, stm32f2xx_hal_i2c.o(i.I2C_MasterReceive_RXNE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_MasterReceive_RXNE
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MemRxCpltCallback
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MasterRxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[111]"></a>I2C_MasterTransmit_BTF</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, stm32f2xx_hal_i2c.o(i.I2C_MasterTransmit_BTF))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_MasterTransmit_BTF
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MemTxCpltCallback
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MasterTxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[110]"></a>I2C_MasterTransmit_TXE</STRONG> (Thumb, 330 bytes, Stack size 24 bytes, stm32f2xx_hal_i2c.o(i.I2C_MasterTransmit_TXE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_MasterTransmit_TXE
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MemTxCpltCallback
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MasterTxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[10e]"></a>I2C_Master_ADD10</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f2xx_hal_i2c.o(i.I2C_Master_ADD10))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[10f]"></a>I2C_Master_ADDR</STRONG> (Thumb, 558 bytes, Stack size 16 bytes, stm32f2xx_hal_i2c.o(i.I2C_Master_ADDR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_Master_ADDR
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[10d]"></a>I2C_Master_SB</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, stm32f2xx_hal_i2c.o(i.I2C_Master_SB))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[119]"></a>I2C_SlaveReceive_BTF</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f2xx_hal_i2c.o(i.I2C_SlaveReceive_BTF))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[118]"></a>I2C_SlaveReceive_RXNE</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f2xx_hal_i2c.o(i.I2C_SlaveReceive_RXNE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_SlaveReceive_RXNE
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_SlaveRxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[117]"></a>I2C_SlaveTransmit_BTF</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f2xx_hal_i2c.o(i.I2C_SlaveTransmit_BTF))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[116]"></a>I2C_SlaveTransmit_TXE</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32f2xx_hal_i2c.o(i.I2C_SlaveTransmit_TXE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_SlaveTransmit_TXE
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_SlaveTxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[114]"></a>I2C_Slave_ADDR</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f2xx_hal_i2c.o(i.I2C_Slave_ADDR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_Slave_ADDR
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_AddrCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[10a]"></a>I2C_Slave_AF</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, stm32f2xx_hal_i2c.o(i.I2C_Slave_AF))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_Slave_AF
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_SlaveTxCpltCallback
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ListenCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ER_IRQHandler
</UL>

<P><STRONG><a name="[115]"></a>I2C_Slave_STOPF</STRONG> (Thumb, 268 bytes, Stack size 16 bytes, stm32f2xx_hal_i2c.o(i.I2C_Slave_STOPF))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_Slave_STOPF &rArr; I2C_ITError
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_SlaveRxCpltCallback
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ListenCpltCallback
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[bd]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, stm32f2xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f2xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[14c]"></a>UART_EndRxTransfer</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f2xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[14f]"></a>UART_EndTransmit_IT</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f2xx_hal_uart.o(i.UART_EndTransmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_EndTransmit_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[14b]"></a>UART_Receive_IT</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, stm32f2xx_hal_uart.o(i.UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 1752<LI>Call Chain = UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[152]"></a>UART_SetConfig</STRONG> (Thumb, 864 bytes, Stack size 24 bytes, stm32f2xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UART_SetConfig &rArr; HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[14e]"></a>UART_Transmit_IT</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, stm32f2xx_hal_uart.o(i.UART_Transmit_IT))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[156]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, stm32f2xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[e9]"></a>CAN_Receive_IT</STRONG> (Thumb, 424 bytes, Stack size 16 bytes, stm32f2xx_hal_can.o(i.CAN_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 1752<LI>Call Chain = CAN_Receive_IT &rArr; HAL_CAN_RxCpltCallback &rArr; ihu_message_send &rArr; ihu_msgid_to_string &rArr; IhuErrorPrintFo &rArr; xQueueTakeMutexRecursive &rArr; xQueueGenericReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[eb]"></a>CAN_Transmit_IT</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, stm32f2xx_hal_can.o(i.CAN_Transmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_Transmit_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_IRQHandler
</UL>

<P><STRONG><a name="[22d]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, timers.o(i.prvCheckForValidListAndQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
</UL>

<P><STRONG><a name="[24b]"></a>prvGetNextExpireTime</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, timers.o(i.prvGetNextExpireTime))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[242]"></a>prvInsertTimerInActiveList</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, timers.o(i.prvInsertTimerInActiveList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>

<P><STRONG><a name="[245]"></a>prvProcessExpiredTimer</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, timers.o(i.prvProcessExpiredTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = prvProcessExpiredTimer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[246]"></a>prvProcessReceivedCommands</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, timers.o(i.prvProcessReceivedCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[248]"></a>prvProcessTimerOrBlockTask</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, timers.o(i.prvProcessTimerOrBlockTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = prvProcessTimerOrBlockTask &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[247]"></a>prvSampleTimeNow</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, timers.o(i.prvSampleTimeNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[24a]"></a>prvSwitchTimerLists</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, timers.o(i.prvSwitchTimerLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[c5]"></a>prvTimerTask</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, timers.o(i.prvTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = prvTimerTask &rArr; prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetNextExpireTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(i.xTimerCreateTimerTask)
</UL>
<P><STRONG><a name="[238]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvCopyDataFromQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[239]"></a>prvCopyDataToQueue</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[243]"></a>prvIsQueueEmpty</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvIsQueueEmpty &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[244]"></a>prvIsQueueFull</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvIsQueueFull &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[24c]"></a>prvUnlockQueue</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[c3]"></a>prvTaskExitError</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR><BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[227]"></a>makeFreeRtosPriority</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cmsis_os.o(i.makeFreeRtosPriority))
<BR><BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>

<P><STRONG><a name="[228]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[22a]"></a>prvAllocateTCBAndStack</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, tasks.o(i.prvAllocateTCBAndStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[233]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[237]"></a>prvDeleteTCB</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[23d]"></a>prvGetExpectedIdleTime</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, tasks.o(i.prvGetExpectedIdleTime))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[c4]"></a>prvIdleTask</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulPortSetInterruptMask
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationIdleHook
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetExpectedIdleTime
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[23f]"></a>prvInitialiseTCBVariables</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, tasks.o(i.prvInitialiseTCBVariables))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvInitialiseTCBVariables
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[241]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, tasks.o(i.prvInitialiseTaskLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[26c]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[24f]"></a>prvHeapInit</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[250]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[16a]"></a>MX_ADC1_Init</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, main.o(i.MX_ADC1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_ADC1_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16c]"></a>MX_ADC2_Init</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, main.o(i.MX_ADC2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_ADC2_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16d]"></a>MX_ADC3_Init</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, main.o(i.MX_ADC3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_ADC3_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16e]"></a>MX_CAN1_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, main.o(i.MX_CAN1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_CAN1_Init &rArr; HAL_CAN_Init &rArr; HAL_CAN_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16f]"></a>MX_CAN2_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, main.o(i.MX_CAN2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_CAN2_Init &rArr; HAL_CAN_Init &rArr; HAL_CAN_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[170]"></a>MX_DMA_Init</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, main.o(i.MX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MX_DMA_Init &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[171]"></a>MX_GPIO_Init</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, main.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[173]"></a>MX_I2C1_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, main.o(i.MX_I2C1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MX_I2C1_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[174]"></a>MX_NVIC_Init</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, main.o(i.MX_NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MX_NVIC_Init &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[175]"></a>MX_RTC_Init</STRONG> (Thumb, 206 bytes, Stack size 48 bytes, main.o(i.MX_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MX_RTC_Init &rArr; HAL_RTC_SetTime &rArr; HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_SetWakeUpTimer
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[176]"></a>MX_SPI1_Init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, main.o(i.MX_SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MX_SPI1_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[177]"></a>MX_SPI2_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, main.o(i.MX_SPI2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MX_SPI2_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[178]"></a>MX_TIM6_Init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, main.o(i.MX_TIM6_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MX_TIM6_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17a]"></a>MX_TIM7_Init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, main.o(i.MX_TIM7_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MX_TIM7_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17b]"></a>MX_UART4_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, main.o(i.MX_UART4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_UART4_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17c]"></a>MX_UART5_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, main.o(i.MX_UART5_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_UART5_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17d]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, main.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17e]"></a>MX_USART2_UART_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, main.o(i.MX_USART2_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_USART2_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17f]"></a>MX_USART3_UART_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, main.o(i.MX_USART3_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_USART3_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[180]"></a>MX_USART6_UART_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, main.o(i.MX_USART6_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_USART6_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[190]"></a>_fp_digits</STRONG> (Thumb, 334 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[18d]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf
</UL>

<P><STRONG><a name="[193]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[192]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[bf]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0vsnprintf)
<LI> printfa.o(i.__0snprintf)
</UL>
<P><STRONG><a name="[c0]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
